<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CoffeaElectronica.com</title>
    <link>http://coffeaelectronica.com</link>
    <atom:link href="http://coffeaelectronica.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>Technical blog of Christopher J. Stehno.</description>
    <language>en-gb</language>
    <pubDate>Sun, 15 Feb 2015 06:42:38 -0600</pubDate>
    <lastBuildDate>Sun, 15 Feb 2015 06:42:38 -0600</lastBuildDate>

    
    <item>
      <title>Custom Domain for GitHub Pages</title>
      <link>http://coffeaelectronica.com/blog/2015/custom-github-hosting.html</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/custom-github-hosting.html</guid>
      <description>
      &lt;p&gt;I have been working for a while now to get my blog fully cut over to being generated by &lt;a href=&quot;http://jbake.org/&quot;&gt;JBake&lt;/a&gt; and hosted on &lt;a href=&quot;http://github.org&quot;&gt;GitHub&lt;/a&gt;; it&apos;s not all that difficult, just a format conversion and some domain fiddling, but I was procrastinating.&lt;/p&gt;&lt;p&gt;Pointing your GitHub Pages at a custom domain is not all that hard to do, and they provide &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&quot;&gt;decent documentation&lt;/a&gt; about how to do it; however, some streamlining is nice for DNS novices like myself. I may have done things a bit out of order, but it worked in the end...&lt;/p&gt;&lt;p&gt;First, I created &lt;code&gt;A&lt;/code&gt; records for the GitHub-provided IP Addresses. I use Godaddy for my domain names, so your experience may be a bit different; but, in the Godaddy DNS Zone File editor you end up adding something like:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/a_records.png&quot; alt=&quot;A Record&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Next, I added a &lt;code&gt;CName&lt;/code&gt; record alias for &lt;code&gt;www&lt;/code&gt; pointing to my GitHub account hostname, which ended up looking like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/cname_record.png&quot; alt=&quot;CName Record&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Lastly, you need to make &lt;a href=&quot;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&quot;&gt;changes in your repository&lt;/a&gt; - this step seems to be missed by a lot of people. The gist of it is that you add a new file to your &lt;code&gt;gh-pages&lt;/code&gt; branch, named &lt;code&gt;CNAME&lt;/code&gt; (all caps, no extension). And in that file you add your domain name (without &lt;code&gt;http://www.&lt;/code&gt;). Save the file and be sure you push it to your remote repository.&lt;/p&gt;&lt;p&gt;At this point it worked for me, but the documentation said it could take up to 48 hours to propagate the changes.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Gradle and CodeNarc</title>
      <link>http://coffeaelectronica.com/blog/2014/gradle-and-codenarc.html</link>
      <pubDate>Fri, 7 Nov 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/gradle-and-codenarc.html</guid>
      <description>
      &lt;p&gt;The subject of &quot;code quality tools&quot; has lead to many developer holy wars over the years, so I&apos;m not really going to touch the subject of their value or level of importance here, suffice to say that they are tools in your toolbox for helping to maintain a base level of &quot;tedious quality&quot;, meaning style rules and general coding conventions enforced by your organization - it should never take the ultimate decision making from the developers.&lt;/p&gt;&lt;p&gt;That being said, let&apos;s talk about &lt;a href=&quot;http://codenarc.sourceforge.net/&quot;&gt;CodeNarc&lt;/a&gt;. CodeNarc is a rule-based code quality analysis tool for Groovy-based projects. Groovy does not always play nice with other code analysis tools, so it&apos;s nice that there is one specially designed for it and &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; provides access to it out of the box.&lt;/p&gt;&lt;p&gt;Using the &lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.CodeNarc.html&quot;&gt;Gradle CodeNarc plugin&lt;/a&gt; is easy, apply the plugin to your build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apply plugin: &amp;#39;codenarc&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then do a bit of rule configuration based on the needs of your code base. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;codenarcMain {
    ignoreFailures false
    configFile file(&amp;#39;config/codenarc/codenarc-main.rules&amp;#39;)

    maxPriority1Violations 0
    maxPriority2Violations 10
    maxPriority3Violations 20
}

codenarcTest {
    ignoreFailures true
    configFile file(&amp;#39;config/codenarc/codenarc-test.rules&amp;#39;)

    maxPriority1Violations 0
    maxPriority2Violations 10
    maxPriority3Violations 20
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The plugin allows you to have different configurations for your main code and your test code, and I recommend using that functionality since generally you may care about slightly different things in your production code versus your test code. Also, there are JUnit-specific rules that you can ignore in your production code scan.&lt;/p&gt;&lt;p&gt;Notice that in my example, I have ignored failures in the test code. This is handy when you are doing a lot of active development and don&apos;t really want to fail your build every time your test code quality drops slightly. You can also set the thresholds for allowed violations of the three priority levels - when the counts exceed one of the given thresholds, the build will fail, unless it&apos;s ignored. You will always get a report for both main and test code in your build reports directory, even if there are no violations. The threshold numbers are something you will need to determine based on your code base, your team and your needs.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;.rules&lt;/code&gt; files are really Groovy DSL files, but the extension is unimportant so I like to keep them out of the Groovy namespace. The CodeNarc web site has a sample &quot;&lt;a href=&quot;http://codenarc.sourceforge.net/StarterRuleSet-AllRulesByCategory.groovy.txt&quot;&gt;kitchen sink&lt;/a&gt;&quot; rule set to get things started - though it has a few rules that cause errors, you can comment those out or remove them from the file. Basically the file is a list of all the active rules, so removing one disables it. You can also configure some of them. LineLength is one I like to change:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LineLength { length = 150 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will keep the rule active, but will allow line lengths of 150 rather than the default 120 characters. You will need to check the JavaDocs for configurable rule properties; for the most part, they seem to be on or off. &lt;/p&gt;&lt;p&gt;Running the analysis is simple, the &lt;code&gt;check&lt;/code&gt; task may be run by itself, or it will be run along with the &lt;code&gt;build&lt;/code&gt; task.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gradle check
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reports (main and test) will be available in the &lt;code&gt;build/reports/codenarc&lt;/code&gt; directory as two html files. They are not the prettiest reports, but they are functional.&lt;/p&gt;&lt;p&gt;If you are starting to use CodeNarc on an existing project, you may want to take a phased approach to applying and customizing rules so that you are not instantly bogged down with rule violations - do a few passes with the trimmed down rule set, fix what you can fix quickly and configure or disable the others and set your thresholds to a sensible level then make a goal to drop the numbers with each sprint or release so that progress is made.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Hello Again Slick2D</title>
      <link>http://coffeaelectronica.com/blog/2014/hello-again-slick2d.html</link>
      <pubDate>Sat, 11 Oct 2014 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/hello-again-slick2d.html</guid>
      <description>
      &lt;p&gt;I am finally getting back around to working on my little game programming project and I realized that somewhere along the&lt;br/&gt;way, my project stopped working. I am using the &lt;a href=&quot;http://slick.ninjacave.com/&quot;&gt;Slick2D&lt;/a&gt; library, which seems to have little&lt;br/&gt;in the way of formal release or distribution so it didn&apos;t surprise me. I think I had something hacked together making it&lt;br/&gt;work last time. I decided to try and put some more concrete and repeatable steps around basic setup, at least for how I use it - I&apos;m no&lt;br/&gt;game programmer. &lt;/p&gt;&lt;p&gt;I&apos;m using Groovy as my development language and Gradle for building. In the interest of time and clarity, I am going to use a&lt;br/&gt;dump-and-describe approach here; there are only two files, so it should not be a big deal.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;build.gradle&lt;/code&gt; file is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;group = &amp;#39;com.stehno.demo&amp;#39;
version = &amp;#39;0.1&amp;#39;

buildscript {
    repositories {
        jcenter()

        maven {
            url &amp;#39;http://dl.bintray.com/cjstehno/public/&amp;#39;
        }
    }

    dependencies {
        classpath &amp;#39;com.stehno:gradle-natives:0.2&amp;#39;
    }
}

apply plugin:&amp;#39;groovy&amp;#39;
apply plugin:&amp;#39;application&amp;#39;
apply plugin:&amp;#39;com.stehno.natives&amp;#39;

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

mainClassName = &amp;#39;helloslick.HelloSlick&amp;#39;

repositories {
    jcenter()
}

dependencies {
    compile &amp;#39;org.codehaus.groovy:groovy-all:2.3.6&amp;#39;

    compile &amp;#39;org.slick2d:slick2d-core:1.0.1&amp;#39;
}

test {
    systemProperty &amp;#39;java.library.path&amp;#39;, file(&amp;#39;build/natives/windows&amp;#39;)
}

run {
    systemProperty &amp;#39;java.library.path&amp;#39;, file(&amp;#39;build/natives/windows&amp;#39;)
}

natives {
    jars = [
        &amp;#39;lwjgl-platform-2.9.1-natives-windows.jar&amp;#39;,
        &amp;#39;jinput-platform-2.0.5-natives-windows.jar&amp;#39;
    ]
    platforms = &amp;#39;windows&amp;#39;
}

task wrapper(type: Wrapper) {
    gradleVersion = &amp;#39;2.1&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first point of note, is that I am using my &lt;a href=&quot;http://cjstehno.github.io/gradle-natives/&quot;&gt;Gradle Natives plugin&lt;/a&gt;, not as&lt;br/&gt;a self-promotion, but since this is the reason I wrote it. This plugin takes care of extracting all the little native&lt;br/&gt;libraries and putting them in your build so that they are easily accessible by your code. The configuration is found near&lt;br/&gt;the bottom of the file, in the &lt;code&gt;natives&lt;/code&gt; block - we want to extract the native libraries from the lwjgl and jinput libraries&lt;br/&gt;for this project and in my case, I only care about the Windows versions (leave off &lt;code&gt;platforms&lt;/code&gt; to get all platforms).&lt;/p&gt;&lt;p&gt;There was one interesting development during my time away from this project, a 3rd-party jar version of Slick2D has been pushed to maven central, which makes it a lot easier - I think I had to build it myself and fiddle with pushing it to my local maven repo or something. Now it&apos;s just another remote library (hopefully it works as expected - I have not played with it yet).&lt;/p&gt;&lt;p&gt;The last point of interest here is the use of the &lt;code&gt;application&lt;/code&gt; plugin. This plugin provides an easy way to run your game&lt;br/&gt;while specifying the &lt;code&gt;java.library.path&lt;/code&gt; which is the painful part of running applications with native libraries. With the&lt;br/&gt;&lt;code&gt;application&lt;/code&gt; plugin and the &lt;code&gt;run&lt;/code&gt; configuration in place, you can run the game from Gradle - admittedly not ideal, but this&lt;br/&gt;is just development; I actually have a configuration set for the IzPack installer that I will write about later.&lt;/p&gt;&lt;p&gt;Now, we need some code to run, and the Slick2D wiki provides a simple Hello world sample that I have tweaked a bit for my&lt;br/&gt;use - mostly just cosmetic changes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package helloslick

import groovy.util.logging.Log
import org.newdawn.slick.*

import java.util.logging.Level

@Log
class HelloSlick extends BasicGame {

    HelloSlick(String gamename){
        super(gamename)
    }

    @Override
    public void init(GameContainer gc) throws SlickException {}

    @Override
    public void update(GameContainer gc, int i) throws SlickException {}

    @Override
    public void render(GameContainer gc, Graphics g) throws SlickException {
        g.drawString &amp;#39;Hello Slick!&amp;#39;, 50, 50
    }

    public static void main(String[] args){
        try {
            AppGameContainer appgc = new AppGameContainer(new HelloSlick(&amp;#39;Simple Slick Game&amp;#39;))
            appgc.setDisplayMode(640, 480, false)
            appgc.start()

        } catch (SlickException ex) {
            log.log(Level.SEVERE, null, ex)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This just opens a game window and writes &quot;Hello Slick!&quot; in it, but if you have that working, you should be ready for playtime&lt;br/&gt;with Slick2D.&lt;/p&gt;&lt;p&gt;Once you have the project setup (&lt;code&gt;build.gradle&lt;/code&gt; in the root, and &lt;code&gt;HelloSlick.groovy&lt;/code&gt; in &lt;code&gt;/src/main/groovy/helloslick&lt;/code&gt;), you&lt;br/&gt;are ready to go. Run the following to run the project.&lt;/p&gt;&lt;p&gt;&lt;code&gt;gradle unpackNatives run&lt;/code&gt;&lt;/p&gt;&lt;p&gt;And if all is well, you will see the game window and message.&lt;/p&gt;&lt;p&gt;Like I said, this is mostly just for getting my development environment up and running as a sanity check, but maybe it is useful to others.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Yes, the explicit &lt;code&gt;unpackNatives&lt;/code&gt; calls are annoying, it&apos;s something I am working on.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Spring Boot Embedded Server API</title>
      <link>http://coffeaelectronica.com/blog/2014/spring-boot-embedded-server-api.html</link>
      <pubDate>Mon, 15 Sep 2014 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/spring-boot-embedded-server-api.html</guid>
      <description>
      &lt;p&gt;I have been investigating &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring-Boot&lt;/a&gt; for both work and personal projects and while it seems very all-encompassing and useful, I have found that its &quot;opinionated&quot; approach to development was a bit too aggressive for the project conversion I was doing at work; however, I did come to the realization that you don&apos;t have to use Spring-Boot as your projects core - you can use it and most of its features in your own project, just like any other java library.&lt;/p&gt;&lt;p&gt;The project I was working on had a customized embedded Jetty solution with a lot of tightly-coupled Jetty-specific configuration code with configuration being pulled from a Spring Application context. I did a little digging around in the Spring-Boot documentation and found that their API provides direct access to the embedded server abstraction used by a Boot project. On top of that, it&apos;s actually a very sane and friendly API to use. During my exploration and experimentation I was able to build up a simple demo application, which seemed like good fodder for a blog post - we&apos;re not going to solve any problems here, just a little playtime with the Spring-Boot embedded server API.&lt;/p&gt;&lt;p&gt;To start off, we need a project to work with; I called mine &quot;spring-shoe&quot; (not big enough for the whole boot, right?). I used Java 8, Groovy 2.3.2 and Gradle 2.0, but slightly older versions should also work fine - the build file looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;apply plugin: &amp;#39;groovy&amp;#39;

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileGroovy {
    groovyOptions.optimizationOptions.indy = false
}

repositories {
    jcenter()
}

dependencies {
    compile &amp;#39;org.codehaus.groovy:groovy-all:2.3.2&amp;#39;

    compile &amp;#39;javax.servlet:javax.servlet-api:3.0.1&amp;#39;
    compile &amp;#39;org.eclipse.jetty:jetty-webapp:8.1.15.v20140411&amp;#39;

    compile &amp;#39;org.springframework.boot:spring-boot:1.1.5.RELEASE&amp;#39;
    compile &amp;#39;org.springframework:spring-web:4.0.6.RELEASE&amp;#39;
    compile &amp;#39;org.springframework:spring-webmvc:4.0.6.RELEASE&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice, that I am using the spring-boot library, not the Gradle plugin or &quot;starter&quot; dependencies - this also means that you have to bring in other libraries yourself (e.g. the web and webmvc libraries above).&lt;/p&gt;&lt;p&gt;Next, we need an application starter, which just instantiates a specialized Application context, the &lt;code&gt;AnnotationConfigEmbeddedWebApplicationContext&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package shoe

import org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext
import org.springframework.boot.context.embedded.EmbeddedWebApplicationContext

class Shoe {
    static void main( args ){
        EmbeddedWebApplicationContext context = new AnnotationConfigEmbeddedWebApplicationContext(&amp;#39;shoe.config&amp;#39;)
        println &amp;quot;Started context on ${new Date(context.startupDate)}&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where the package &lt;code&gt;shoe.config&lt;/code&gt; is where my configuration class lives - the package will be auto-scanned. When this class&apos; main method is run, it instantiates the context and just prints out the context start date. Internally this context will search for the embedded server configuration beans as well as any servlets and filters to be loaded on the server - but I am jumping ahead; we need a configuration class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package shoe.config

import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory
import org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.web.servlet.config.annotation.EnableWebMvc

@Configuration
@EnableWebMvc
class ShoeConfig {

    @Bean EmbeddedServletContainerFactory embeddedServletContainerFactory(){
        new JettyEmbeddedServletContainerFactory( 10101 )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, it&apos;s just a simple Java-based configuration class. The &lt;code&gt;EmbeddedServletContainerFactory&lt;/code&gt; class is the crucial part here. The context loader searches for a configured bean of that type and then loads it to create the embedded servlet container - a Jetty container in this case, running on port 10101.&lt;/p&gt;&lt;p&gt;Now, if you run &lt;code&gt;Shoe.main()&lt;/code&gt; you will see some logging similar to what is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
INFO: Jetty started on port: 10101
Started context on Thu Sep 04 18:59:24 CDT 2014
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You have a running server, though its pretty boring since you have nothing useful configured. Let&apos;s start make it say hello using a simple servlet named &lt;code&gt;HelloServlet&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package shoe.servlet

import javax.servlet.ServletException
import javax.servlet.http.HttpServlet
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

class HelloServlet extends HttpServlet {

    @Override
    protected void doGet( HttpServletRequest req, HttpServletResponse resp ) throws ServletException, IOException{
        resp.writer.withPrintWriter { w-&amp;gt;
            w.println &amp;quot;Hello, ${req.getParameter(&amp;#39;name&amp;#39;)}&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s just a simple &lt;code&gt;HttpServlet&lt;/code&gt; extension that says &quot;hello&quot; with the input value from the &quot;name&quot; parameter. Nothing really special here. We could have just as easily used an extension of Spring&apos;s &lt;code&gt;HttpServletBean&lt;/code&gt; here instead. Moving back to the &lt;code&gt;ShoeConfig&lt;/code&gt; class, the modifications are minimal, you just create the servlet and register it as a bean.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Bean HttpServlet helloServlet(){
    new HelloServlet()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now fire the server up again, and browse to &lt;a href=&quot;http://localhost:10101/helloServlet?name=Chris&quot;&gt;http://localhost:10101/helloServlet?name=Chris&lt;/a&gt; and you will get a response of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hello, Chris
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Actually, any path will resolve to that servlet since it&apos;s the only one configured. I will come back to configuration of multiple servlets and how to specify the url-mappings in a little bit, but let&apos;s take the next step and setup a &lt;code&gt;Filter&lt;/code&gt; implementation. Let&apos;s create a Filter that counts requests as they come in and then passes the current count along with the continuing request.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package shoe.servlet

import org.springframework.web.filter.GenericFilterBean

import javax.servlet.FilterChain
import javax.servlet.ServletException
import javax.servlet.ServletRequest
import javax.servlet.ServletResponse
import java.util.concurrent.atomic.AtomicInteger

class RequestCountFilter extends GenericFilterBean {

    private final AtomicInteger count = new AtomicInteger(0)

    @Override
    void doFilter( ServletRequest request, ServletResponse response, FilterChain chain ) throws IOException, ServletException{
        request.setAttribute(&amp;#39;request-count&amp;#39;, count.incrementAndGet())

        chain.doFilter( request, response )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, I am using the Spring helper, &lt;code&gt;GenericFilterBean&lt;/code&gt; simply so I only have one method to implement, rather than three. I could have used a simple &lt;code&gt;Filter&lt;/code&gt; implementation.&lt;/p&gt;&lt;p&gt;In order to make use of this new count information, we can tweak the &lt;code&gt;HelloServlet&lt;/code&gt; so that it prints out the current count with the response - just change the &lt;code&gt;println&lt;/code&gt; statement to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;w.println &amp;quot;&amp;lt;${req.getAttribute(&amp;#39;request-count&amp;#39;)}&amp;gt; Hello, ${req.getParameter(&amp;#39;name&amp;#39;)}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lastly for this case, we need to register the filter as a bean in the &lt;code&gt;ShoeConfig&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Bean Filter countingFilter(){
    new RequestCountFilter()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, run the application again and hit the hello servlet a few times and you will see something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;10&amp;gt; Hello, Chris
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The default url-mapping for the filter is &quot;/*&quot; (all requests). While, this may be useful for some quick demo cases, it would be much more useful to be able to define the servlet and filter configuration similar to what you would do in the web container configuration - well, that&apos;s where the &lt;code&gt;RegistrationBeans&lt;/code&gt; come into play.&lt;/p&gt;&lt;p&gt;Revisiting the servlet and filter configuration in &lt;code&gt;ShoeConfig&lt;/code&gt; we can now provide a more detailed configuration with the help of the &lt;code&gt;ServletRegistrationBean&lt;/code&gt; and the &lt;code&gt;FilterRegistrationBean&lt;/code&gt; classes, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Bean ServletRegistrationBean helloServlet(){
    new ServletRegistrationBean(
        urlMappings:[ &amp;#39;/hello&amp;#39; ],
        servlet: new HelloServlet()
    )
}

@Bean FilterRegistrationBean countingFilter(){
    new FilterRegistrationBean(
        urlPatterns:[ &amp;#39;/*&amp;#39; ],
        filter: new RequestCountFilter()
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We still leave the filter mapped to all requests, but you now have access to any of the filter mapping configuration parameters. For instance, we can add a simple init-param to the &lt;code&gt;RequestCountingFilter&lt;/code&gt;, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;int startValue = 0

private AtomicInteger count

@Override
protected void initFilterBean() throws ServletException {
    count = new AtomicInteger(startValue)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will allow the starting value of the count to be specified as a filter init-parameter, which can be easily configured in the filter configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Bean FilterRegistrationBean countingFilter(){
    new FilterRegistrationBean(
        urlPatterns:[ &amp;#39;/*&amp;#39; ],
        filter: new RequestCountFilter(),
        initParameters:[ &amp;#39;startValue&amp;#39;: &amp;#39;1000&amp;#39; ]
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nice and simple. Now, when you run the application again and browse to &lt;a href=&quot;http://localhost:10101/helloServlet?name=Chris&quot;&gt;http://localhost:10101/helloServlet?name=Chris&lt;/a&gt; you get a 404 error. Why? Well, now you have specified a url-mapping for the servlet, try &lt;a href=&quot;http://localhost:10101/hello?name=Chris&quot;&gt;http://localhost:10101/hello?name=Chris&lt;/a&gt; and you will see the expected result, something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;1004&amp;gt; Hello, Chris
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also register &lt;code&gt;ServletContextListeners&lt;/code&gt; in a similar manner. Let&apos;s create a simple one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package shoe.servlet

import javax.servlet.ServletContextEvent
import javax.servlet.ServletContextListener

class LoggingListener implements ServletContextListener {

    @Override
    void contextInitialized(ServletContextEvent sce) {
        println &amp;quot;Initialized: $sce&amp;quot;
    }

    @Override
    void contextDestroyed(ServletContextEvent sce) {
        println &amp;quot;Destroyed: $sce&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then configure it in &lt;code&gt;ShoeConfig&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Bean ServletListenerRegistrationBean listener(){
    new ServletListenerRegistrationBean(
        listener: new LoggingListener()
    )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, when you run the application, you will get a message in the server output like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Initialized: javax.servlet.ServletContextEvent[source=ServletContext@o.s.b.c.e.j.JettyEmbeddedWebAppContext{/,null}]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, let&apos;s do something a bit more interesting - let&apos;s setup a Spring-MVC configuration inside our embedded server.&lt;/p&gt;&lt;p&gt;The first thing you need for a minimal Spring-MVC configuration is a &lt;code&gt;DispatcherServlet&lt;/code&gt; which, at its heart, is just an &lt;code&gt;HttpServlet&lt;/code&gt; so we can just configure it as a bean in &lt;code&gt;ShoeConfig&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Bean HttpServlet dispatcherServlet(){
    new DispatcherServlet()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, we need a controller to make sure this configuration works - how about a simple controller that responds with the current time; we will also dump the request count to show that the filter is still in play. The controller looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package shoe.controller

import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

import javax.servlet.http.HttpServletRequest

@RestController
class TimeController {

    @RequestMapping(&amp;#39;/time&amp;#39;)
    String time( HttpServletRequest request ){
        &amp;quot;&amp;lt;${request.getAttribute(&amp;#39;request-count&amp;#39;)}&amp;gt; Current-time: ${new Date()}&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lastly for this example, we need to load the controller into the configuration; just add a &lt;code&gt;@ComponentScan&lt;/code&gt; annotation to the &lt;code&gt;ShoeConfig&lt;/code&gt; as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@ComponentScan(basePackages=[&amp;#39;shoe.controller&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fire up the server and hit the &lt;a href=&quot;http://localhost:10101/time&quot;&gt;http://localhost:10101/time&lt;/a&gt; controller and you see something similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;1002&amp;gt; Current-time: Fri Sep 05 07:02:36 CDT 2014
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you have the ability to do any of your Spring-MVC work with this configuration, while the standard filter and servlet still work as before.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;As a best-practice, I would suggest keeping this server configuration code separate from other configuration code for anything more than a trivial application (i.e. you wouldn&apos;t do your security and database config in this same file).&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;For my last discussion point, I want to point out that the embedded server configuration also allows you to do additional customization to the actual server instance during startup. To handle this additional configuration, Spring provides the &lt;code&gt;JettyServerCustomizer&lt;/code&gt; interface. You simply implement this interface and add it to your sever configuration factory bean. Let&apos;s do a little customization:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class ShoeCustomizer implements JettyServerCustomizer {

    @Override
    void customize( Server server ){
        SelectChannelConnector myConn = server.getConnectors().find { Connector conn -&amp;gt;
            conn.port == 10101
        }

        myConn.maxIdleTime = 1000 * 60 * 60
        myConn.soLingerTime = -1

        server.setSendDateHeader(true)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically just a tweak of the main connector and also telling the server to send an additional response header with the date value. This needs to be wired into the factory configuration, so that bean definition becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Bean EmbeddedServletContainerFactory embeddedServletContainerFactory(){
    def factory = new JettyEmbeddedServletContainerFactory( 10101 )
    factory.addServerCustomizers( new ShoeCustomizer() )
    return factory
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when you start the server and hit the time controller you will see an additional header in the response:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Date:Fri, 05 Sep 2014 12:15:27 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see from this long discussion, the Spring-Boot embedded server API is quite useful all on its own. It&apos;s nice to see that Spring has exposed this functionality as part of its public API rather than hiding it under the covers somewhere.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The code I used for this article can be found in the main repository for this project, under the &lt;a href=&quot;https://github.com/cjstehno/coffeaelectronica/tree/master/spring-shoe&quot;&gt;spring-shoe&lt;/a&gt; directory.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>NodeTypes - Deeper Down the Rabbit Hole</title>
      <link>http://coffeaelectronica.com/blog/2014/nodetypes-rabbit-hole.html</link>
      <pubDate>Sat, 23 Aug 2014 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/nodetypes-rabbit-hole.html</guid>
      <description>
      &lt;p&gt;In my last post about &lt;a href=&quot;http://jackrabbit.apache.org&quot;&gt;Jackrabbit&lt;/a&gt;, &quot;&lt;a href=&quot;Wabbit-Season-with-Jackrabbit&quot;&gt;Wabbit Season with Jackrabbit&lt;/a&gt;&quot;, I fleshed out the old Jackrabbit tutorial and expanded it a bit to ingest some image file content. I touched on the subject of node types briefly, but did little with them. In this post, I am going to delve a bit deeper into using node types and creating your own.&lt;/p&gt;&lt;p&gt;In the older versions of Jackrabbit, they a text-based format for configuring your own node types. I is not well documented, and I was not at all sad to see that it is no longer used since Jackrabbit 2.x. There may be another approach to loading node types, but I found the programmatic approach interesting.&lt;/p&gt;&lt;p&gt;For this post, you will want to refer to the code presented in the other post, &quot;&lt;a href=&quot;Wabbit-Season-with-Jackrabbit&quot;&gt;Wabbit Season with Jackrabbit&lt;/a&gt;&quot; as a starting point (especially the last version of the code, which the code here will be based on).&lt;/p&gt;&lt;p&gt;For this example, we are going to expand the previous example to include image metadata in the stored node properties. I was originally under the impression that Jackrabbit would automatically extract the metadata on ingestion of the data, but it appears that this is only the case for text-based data when doing indexing. This is not a big roadblock, though, since &lt;a href=&quot;http://tika.apache.org&quot;&gt;Apache Tika&lt;/a&gt; is included with Jackrabbit, although a slightly older version than what I wanted to use. You can add the following to your &lt;code&gt;build.gradle&lt;/code&gt; file to update the version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;compile &amp;#39;org.apache.tika:tika-parsers:1.5&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tika provides metadata extractors for a wide range of file formats, one of which is JPEG images, which is what we are playing with here.&lt;/p&gt;&lt;p&gt;First, we need to extract the metadata from the image file. I did this just after the main method&apos;s file reference statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def metadata = extractMetadata( file )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code for the &lt;code&gt;extractMetadata(File)&lt;/code&gt; method is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;private static Map&amp;lt;String,String&amp;gt; extractMetadata( File imageFile ){
    def meta = new Metadata()
    def extractor = new ImageMetadataExtractor( meta )

    log.info &amp;#39;Extracting metadata from {}&amp;#39;, imageFile

    extractor.parseJpeg(imageFile)

    def props = [:]
    meta.names().sort().each { name-&amp;gt;
        props[name] = meta.get(name)
        log.info &amp;quot; : &amp;lt;image-meta&amp;gt; $name : ${meta.get(name)}&amp;quot;
    }

    return props
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s just a simple straight-forward use of the Tika &lt;code&gt;ImageMetadataExtractor&lt;/code&gt;, which pulls out all the data and stores it into a Map for use later.&lt;/p&gt;&lt;p&gt;Then, after we create the main file node, we want to apply the metadata properties to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;applyMetadata( fileNode, metadata )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;applyMetadata(Node,Map)&lt;/code&gt; method applies the metadata from the map as properties on the node. The code is as shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;private static void applyMetadata( Node node, Map&amp;lt;String,String&amp;gt; metadata ){
    node.addMixin(&amp;#39;pp:photo&amp;#39;)
    node.setProperty(&amp;#39;pp:photo-width&amp;#39;, metadata[&amp;#39;Image Width&amp;#39;].split(&amp;#39; &amp;#39;)[0] as long )

    log.info &amp;#39;Applied mixin -&amp;gt; {} :: {}&amp;#39;, node.mixinNodeTypes.collect { it.name }.join(&amp;#39;, &amp;#39;), node.getProperty(&amp;#39;pp:photo-width&amp;#39;).string
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For the metadata, I used the concept of &quot;Mixin&quot; node types. Every node has a primary node type, in this case it&apos;s an &quot;nt:file&quot; node, but nodes can have multiple mixin node types also applied to them so that they can have additional properties available. This works perfectly in my case, since I want a file that is a photo with extra metadata associated with it.&lt;/p&gt;&lt;p&gt;Also, the &lt;code&gt;dumpProps(Node)&lt;/code&gt; method changed slightly to avoid errors during extraction, and to hide properties we don&apos;t care about seeing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;private static void dumpProps( Node node ){
    log.info &amp;#39;Node ({}) of type ({}) with mixins ({})&amp;#39;, node.name, node.getPrimaryNodeType().name, node.getMixinNodeTypes()

    def iter = node.properties
    while( iter.hasNext() ){
        def prop = iter.nextProperty()
        if( prop.type != PropertyType.BINARY ){
            if( prop.name != &amp;#39;jcr:mixinTypes&amp;#39; ){
                log.info &amp;#39; - {} : {}&amp;#39;, prop.name, prop.value.string
            }
        } else {
            log.info &amp;#39; - {} : &amp;lt;binary-data&amp;gt;&amp;#39;, prop.name
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you run the code at this point, you will get an error about the node type not being defined, so we need to define the new node type. In the current version of Jackrabbit, they defer node type creation to the standard JCR 2.0 approach, which is pretty clean. The code is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;private static void registerNodeTypes(Session session ) throws Exception {
    if( !session.namespacePrefixes.contains(&amp;#39;pp&amp;#39;) ){
        session.workspace.namespaceRegistry.registerNamespace(&amp;#39;pp&amp;#39;, &amp;#39;http://stehno.com/pp&amp;#39;)
    }

    NodeTypeManager manager = session.getWorkspace().getNodeTypeManager()

    if( !manager.hasNodeType(&amp;#39;pp:photo&amp;#39;) ){
        NodeTypeTemplate nodeTypeTemplate = manager.createNodeTypeTemplate()
        nodeTypeTemplate.name = &amp;#39;pp:photo&amp;#39;
        nodeTypeTemplate.mixin = true

        PropertyDefinitionTemplate propTemplate = manager.createPropertyDefinitionTemplate()
        propTemplate.name = &amp;#39;pp:photo-width&amp;#39;
        propTemplate.requiredType = PropertyType.LONG
        propTemplate.multiple = false
        propTemplate.mandatory = true

        nodeTypeTemplate.propertyDefinitionTemplates &amp;lt;&amp;lt; propTemplate

        manager.registerNodeType( nodeTypeTemplate, false )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which is called just after logging in and getting a reference to a repository session. Basically, you use the &lt;code&gt;NodeTypeManager&lt;/code&gt; to create a &lt;code&gt;NodeTypeTemplate&lt;/code&gt; which you can use to specify the configuration settings of your new node type. There is a similar construct for node type properties, the &lt;code&gt;PropertyDefinitionTemplate&lt;/code&gt;. Once you have your configuration done, you register the node type and you are ready to go.&lt;/p&gt;&lt;p&gt;When run, this code generates output similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2014-08-23 16:43:02 Rabbits [INFO] User (admin) logged into repository (Jackrabbit)
...
2014-08-23 16:43:02 Rabbits [INFO]  : &amp;lt;image-meta&amp;gt; Image Width : 2448 pixels
...
2014-08-23 16:43:02 Rabbits [INFO] Applied mixin -&amp;gt; pp:photo :: 2448
2014-08-23 16:43:02 Rabbits [INFO] Stored image file data into node (2014-08-19 20.49.40.jpg)...
2014-08-23 16:43:02 Rabbits [INFO] Node (2014-08-19 20.49.40.jpg) of type (nt:file) with mixins ([org.apache.jackrabbit.core.nodetype.NodeTypeImpl@5b3bb1f7])
2014-08-23 16:43:02 Rabbits [INFO]  - jcr:createdBy : admin
2014-08-23 16:43:02 Rabbits [INFO]  - pp:photo-width : 2448
2014-08-23 16:43:02 Rabbits [INFO]  - jcr:primaryType : nt:file
2014-08-23 16:43:02 Rabbits [INFO]  - jcr:created : 2014-08-23T16:43:02.531-05:00
2014-08-23 16:43:02 Rabbits [INFO] Node (jcr:content) of type (nt:resource) with mixins ([])
2014-08-23 16:43:02 Rabbits [INFO]  - jcr:lastModified : 2014-08-19T20:49:44.000-05:00
2014-08-23 16:43:02 Rabbits [INFO]  - jcr:data : &amp;lt;binary-data&amp;gt;
2014-08-23 16:43:02 Rabbits [INFO]  - jcr:lastModifiedBy : admin
2014-08-23 16:43:02 Rabbits [INFO]  - jcr:uuid : a699fbd6-4493-4dc7-9f7a-b87b84cb1ef9
2014-08-23 16:43:02 Rabbits [INFO]  - jcr:primaryType : nt:resource
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(I omitted a bunch of the metadata output lines to clean up the output)&lt;/p&gt;&lt;p&gt;You can see that the new node type data is populated from the metadata and the mixin is properly applied.&lt;/p&gt;&lt;p&gt;Call me crazy, but this approach seems a lot cleaner than the old text-based approach. There are some rules around node types and ensuring that they are not created if they already exist, though this only seems to be a problem in certain use cases - need to investigate that a bit more, but be aware of it.&lt;/p&gt;&lt;p&gt;Now, you can stop here and create new node types all day long, but let&apos;s take this experiment a little farther down the rabbit hole. The programmatic approach to node type configuration seems to lend itself nicely to a Groovy-based DSL approach, something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;private static void registerNodeTypes( Session session ) throws Exception {
    definitions( session.workspace ){
        namespace &amp;#39;pp&amp;#39;, &amp;#39;http://stehno.com/pp&amp;#39;

        nodeType {
            name &amp;#39;pp:photo&amp;#39;
            mixin true

            propertyDefinition {
                name &amp;#39;pp:photo-width&amp;#39;
                requiredType PropertyType.LONG
                multiple false
                mandatory true
            }

            propertyDefinition {
                name &amp;#39;pp:photo-height&amp;#39;
                requiredType PropertyType.LONG
                multiple false
                mandatory true
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Seems like a nice clean way to create new node types and their properties with little fuss and muss. So, using a little Groovy DSL closure delegation we can do this without too much pain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class NodeTypeDefiner {

    private final NodeTypeManager manager
    private final Workspace workspace

    private NodeTypeDefiner( final Workspace workspace ){
        this.workspace = workspace
        this.manager = workspace.nodeTypeManager
    }

    void namespace( String name, String uri ){
        if( !workspace.namespaceRegistry.prefixes.contains(name) ){
            workspace.namespaceRegistry .registerNamespace(name, uri)
        }
    }

    static void definitions( final Workspace workspace, Closure closure ){
        NodeTypeDefiner definer = new NodeTypeDefiner( workspace )
        closure.delegate = definer
        closure.resolveStrategy = Closure.DELEGATE_ONLY
        closure()
    }

    void nodeType( Closure closure ){
        def nodeTypeTemplate = new DelegatingNodeTypeTemplate( manager )

        closure.delegate = nodeTypeTemplate
        closure.resolveStrategy = Closure.DELEGATE_ONLY
        closure()

        manager.registerNodeType( nodeTypeTemplate, true )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The key pain point I found here was that with the nested closure structures, I needed to change the &lt;code&gt;resolveStrategy&lt;/code&gt; so that you get the delegate only rather than the owner - took a little debugging to trace that one down.&lt;/p&gt;&lt;p&gt;The other useful point here was the &quot;Delegating&quot; extensions of the two &quot;template&quot; classes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class DelegatingNodeTypeTemplate implements NodeTypeDefinition {

    @Delegate NodeTypeTemplate template
    private final NodeTypeManager manager

    DelegatingNodeTypeTemplate( final NodeTypeManager manager ){
        this.manager = manager
        this.template = manager.createNodeTypeTemplate()
    }

    void name( String name ){
        template.setName( name )
    }

    void mixin( boolean mix ){
        template.mixin = mix
    }

    void propertyDefinition( Closure closure ){
        def propertyTemplate = new DelegatingPropertyDefinitionTemplate( manager )
        closure.delegate = propertyTemplate
        closure.resolveStrategy = Closure.DELEGATE_ONLY
        closure()
        propertyDefinitionTemplates &amp;lt;&amp;lt; propertyTemplate
    }
}

class DelegatingPropertyDefinitionTemplate implements PropertyDefinition {

    @Delegate PropertyDefinitionTemplate template
    private final NodeTypeManager manager

    DelegatingPropertyDefinitionTemplate( final NodeTypeManager manager ){
        this.manager = manager
        this.template = manager.createPropertyDefinitionTemplate()
    }

    void name( String name ){
        template.setName( name )
    }

    void requiredType( int propertyType ){
        template.setRequiredType( propertyType )
    }

    void multiple( boolean value ){
        template.multiple = value
    }

    void mandatory( boolean value ){
        template.mandatory = value
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;They provide the helper methods to allow a nice clean DSL. Without them you have only setters, which did not work out cleanly. You just end up with some small delegate classes.&lt;/p&gt;&lt;p&gt;This code takes care of adding in the property definitions, registering namespaces and node types. It does not currently support all the configuration properties; however, that would be simple to add - there are not very many available.&lt;/p&gt;&lt;p&gt;As you can see from the DSL example code, you can now add new node types in a very simple manner. This kind of thing is why I love Groovy so much.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If there is any interest in this DSL code, I will be using it in one of my own projects, so I could extract it into a library for more public use - let me know if you are interested.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Wabbit Season with Jackrabbit</title>
      <link>http://coffeaelectronica.com/blog/2014/wabbit-season-with-jackrabbit.html</link>
      <pubDate>Sat, 23 Aug 2014 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/wabbit-season-with-jackrabbit.html</guid>
      <description>
      &lt;p&gt;I have been playing with &lt;a href=&quot;http://jackrabbit.apache.org&quot;&gt;Apache Jackrabbit&lt;/a&gt; today, while doing some research for one of my personal projects, and while it seems to have matured a bit since the last time I looked into it, the documentation has stagnated. Granted, it still works as a jump-start better than nothing at all, but it really does not reflect the current state of the API. I present here a more modern take on the &quot;&lt;a href=&quot;http://jackrabbit.apache.org/first-hops.html&quot;&gt;First Hops&lt;/a&gt;&quot; document based on what I did for my research - I am using Gradle, Groovy, and generally more modern versions of the libraries involved. Maybe this can help others, or myself at a later date.&lt;/p&gt;&lt;h2&gt;Getting Started&lt;/h2&gt;&lt;p&gt;The quickest and easiest way to get started is using an embedded &lt;code&gt;TransientRepository&lt;/code&gt;. Create a project directory and create a &lt;code&gt;build.groovy&lt;/code&gt; Gradle build file similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;apply plugin: &amp;#39;groovy&amp;#39;

repositories {
    jcenter()
}

dependencies {
    compile &amp;#39;org.codehaus.groovy:groovy-all:2.3.6&amp;#39;

    compile &amp;#39;javax.jcr:jcr:2.0&amp;#39;
    compile &amp;#39;org.apache.jackrabbit:jackrabbit-core:2.8.0&amp;#39;
    compile &amp;#39;org.slf4j:slf4j-log4j12:1.7.7&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will give you the required dependencies and a nice playground project to work with.&lt;/p&gt;&lt;h2&gt;Logging in to Jackrabbit&lt;/h2&gt;&lt;p&gt;In the &lt;code&gt;src/main/groovy&lt;/code&gt; directory of the project, create a file called &lt;code&gt;Rabbits.groovy&lt;/code&gt; with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;import groovy.util.logging.Slf4j
import org.apache.jackrabbit.core.TransientRepository

import javax.jcr.Repository
import javax.jcr.Session

@Slf4j
class Rabbits {

    static void main(args) throws Exception {
        Repository repository = new TransientRepository(
            new File(&amp;#39;./build/repository&amp;#39;)
        )

        Session session = repository.login()
        try {
            String user = session.getUserID()
            String name = repository.getDescriptor(Repository.REP_NAME_DESC)

            log.info &amp;#39;Logged in as {} to a {} repository.&amp;#39;, user, name

        } finally {
            session.logout()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The important part here is the &lt;code&gt;TransientRepository&lt;/code&gt; code, which allows you to use/reuse a repository for testing. I found that specifying a repository directory in my build directory was useful since by default it will put a bunch of files and directories in the root of your project when you run the project - it&apos;s just a little cleaner when you can run &lt;code&gt;gradle clean&lt;/code&gt; to wipe out your development repository when needed. The downside of specifying the directory seems to be that your repository is not completely transient. I was not clear whether or not this was always the case or just when I set the directory, hence the need to wipe it out sometimes.&lt;/p&gt;&lt;p&gt;The rest of the code is pretty clear, it just does a login to the repository and writes out some information. When run, you should get something like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;2014-08-23 15:23:09 Rabbits [INFO] Logged in as anonymous to a Jackrabbit repository.```&quot;&gt;&lt;br/&gt;The `finally` block is used to always logout of the repository, though this seems a bit dubious because it seemed quite easy to lock the repository in a bad state when errors caused application failure - this will require some additional investigation.

Lastly, to round out the first version of the project, create a `log4j.properties` file in `src/main/resources` so that your logger has some configuration. I used:

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;log4j.rootCategory=INFO, Cons&lt;/p&gt;&lt;h1&gt;log4j.logger.com.something=ERROR&lt;/h1&gt;&lt;p&gt;log4j.logger.org.apache.jackrabbit=WARN&lt;/p&gt;&lt;p&gt;log4j.appender.Cons = org.apache.log4j.ConsoleAppender&lt;br/&gt;log4j.appender.Cons.layout = org.apache.log4j.PatternLayout&lt;br/&gt;log4j.appender.Cons.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %c{1} [%p] %m%n&lt;br/&gt;```&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If you want to see more about what Jackrabbit is doing, set the logging level for &lt;code&gt;log4j.logger.org.apache.jackrabbit&lt;/code&gt; to &lt;code&gt;INFO&lt;/code&gt; - it gets a little verbose, so I turned it down to WARN.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;Working with Content&lt;/h2&gt;&lt;p&gt;When using a content repository, you probably want to do something with actual content, so let&apos;s start off with a simple case of some nodes with simple text content. The &lt;code&gt;main&lt;/code&gt; method of the &lt;code&gt;Rabbits&lt;/code&gt; class now becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;Repository repository = new TransientRepository(
    new File(&amp;#39;./build/repository&amp;#39;)
)

Session session = repository.login(
    new SimpleCredentials(&amp;#39;admin&amp;#39;,&amp;#39;admin&amp;#39;.toCharArray())
)

try {
    String username = session.userID
    String name = repository.getDescriptor(Repository.REP_NAME_DESC)
    log.info &amp;#39;User ({}) logged into repository ({})&amp;#39;, username, name

    Node root = session.rootNode

    // Store content
    Node hello = root.addNode(&amp;#39;hello&amp;#39;)
    Node world = hello.addNode(&amp;#39;world&amp;#39;)
    world.setProperty(&amp;#39;message&amp;#39;, &amp;#39;Hello, World!&amp;#39;)
    session.save()

    // Retrieve content
    Node node = root.getNode(&amp;#39;hello/world&amp;#39;)
    log.info &amp;#39;Found node ({}) with property: {}&amp;#39;, node.path, node.getProperty(&amp;#39;message&amp;#39;).string

    // Remove content
    root.getNode(&amp;#39;hello&amp;#39;).remove()
    log.info &amp;#39;Removed node.&amp;#39;

    session.save()

} finally {
    session.logout()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice, that the login code now contains credentials so that we can login with a writable session rather than the read-only default session (previous example).&lt;/p&gt;&lt;p&gt;First, we need to store some content in the repository. Since Jackrabbit is a hierarchical data store, you need to get a reference to the root node, and then add a child node to it with some content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;Node root = session.rootNode

// Store content
Node hello = root.addNode(&amp;#39;hello&amp;#39;)
Node world = hello.addNode(&amp;#39;world&amp;#39;)
world.setProperty(&amp;#39;message&amp;#39;, &amp;#39;Hello, World!&amp;#39;)
session.save()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We create a node named &quot;hello&quot;, the add a child named &quot;world&quot; to that node, and give the child node a &quot;message&quot; property. Notice that we save the session to persist the changes to the underlying data store.&lt;/p&gt;&lt;p&gt;Next, we want to read the data back out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;Node node = root.getNode(&amp;#39;hello/world&amp;#39;)
log.info &amp;#39;Found node ({}) with property: {}&amp;#39;, node.path, node.getProperty(&amp;#39;message&amp;#39;).string
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You just get the node by it&apos;s relative path, in this case from the root, and then retrieve its data.&lt;/p&gt;&lt;p&gt;Lastly, for this example, we want to remove the nodes we just added:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;root.getNode(&amp;#39;hello&amp;#39;).remove()
session.save()
log.info &amp;#39;Removed node.&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Removing the &quot;hello&quot; node removes it and it&apos;s children (i.e. the &quot;world&quot; node). We then save the session to commit the node removal.&lt;/p&gt;&lt;p&gt;When you run this version of the code, you should see something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2014-08-23 15:45:18 Rabbits [INFO] User (admin) logged into repository (Jackrabbit)
2014-08-23 15:45:18 Rabbits [INFO] Found node (/hello/world) with property: Hello, World!
2014-08-23 15:45:18 Rabbits [INFO] Removed node.
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Working with Binary Content&lt;/h2&gt;&lt;p&gt;This is where my tour diverts from the original wiki document, which goes on to cover XML data imports. I was more interested in loading binary content, especially image files. To accomplish this, we need to consider how the data is stored in JCR. I found a very helpful article &quot;&lt;a href=&quot;https://docs.jboss.org/author/display/MODE/Storing+files+and+folders?_sscc=t&quot;&gt;Storing Files and Folders&lt;/a&gt;&quot; from the ModeShape documentation (another JCR implementation) - since it&apos;s standard JCR, it is still relevant with Jackrabbit.&lt;/p&gt;&lt;p&gt;Basically you need a node for the file and it&apos;s metadata, which has a child node for the actual file content. The article has some nice explanations and diagrams, so if you want more than code and quick discussion I recommend you head over there and take a look at it. For my purpose, I am just going to ingest a single image file and then read out the data to ensure that it was actually stored. The code for the &lt;code&gt;try/finally&lt;/code&gt; block of our example becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;String username = session.userID
String name = repository.getDescriptor(Repository.REP_NAME_DESC)
log.info &amp;#39;User ({}) logged into repository ({})&amp;#39;, username, name

Node root = session.rootNode

// Assume that we have a file that exists and can be read ...
File file = IMAGE_FILE

// Determine the last-modified by value of the file (if important) ...
Calendar lastModified = Calendar.instance
lastModified.setTimeInMillis(file.lastModified())

// Create an &amp;#39;nt:file&amp;#39; node at the supplied path ...
Node fileNode = root.addNode(file.name, &amp;#39;nt:file&amp;#39;)

// Upload the file to that node ...
Node contentNode = fileNode.addNode(&amp;#39;jcr:content&amp;#39;, &amp;#39;nt:resource&amp;#39;)
Binary binary = session.valueFactory.createBinary(file.newInputStream())
contentNode.setProperty(&amp;#39;jcr:data&amp;#39;, binary)
contentNode.setProperty(&amp;#39;jcr:lastModified&amp;#39;,lastModified)

// Save the session (and auto-created the properties) ...
session.save()

log.info &amp;#39;Stored image file data into node ({})...&amp;#39;, file.name

// now get the image node data back out

def node = root.getNode(file.name)
dumpProps node

dumpProps node.getNode(&amp;#39;jcr:content&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where &lt;code&gt;IMAGE_FILE&lt;/code&gt; is a &lt;code&gt;File&lt;/code&gt; object pointing to a JPEG image file.&lt;/p&gt;&lt;p&gt;The first thing we do is create the file node:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;Node fileNode = root.addNode(file.name, &amp;#39;nt:file&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice, it&apos;s of type &lt;code&gt;nt:file&lt;/code&gt; to designate that it&apos;s a file node - you will want to brush up on NodeTypes in the Jackrabbit or JCR documentation if you don&apos;t already have a basic understanding; I won&apos;t do much more than use them in these examples. For the name of the node, we just use the file name.&lt;/p&gt;&lt;p&gt;Second, we create the file content node as a child of the file node:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;Node contentNode = fileNode.addNode(&amp;#39;jcr:content&amp;#39;, &amp;#39;nt:resource&amp;#39;)
Binary binary = session.valueFactory.createBinary(file.newInputStream())
contentNode.setProperty(&amp;#39;jcr:data&amp;#39;, binary)
contentNode.setProperty(&amp;#39;jcr:lastModified&amp;#39;,lastModified)

// Save the session (and auto-created the properties) ...
session.save()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the child node is named &quot;jcr:content&quot; and is of type &quot;nt:resource&quot; and that it has a property named &quot;jcr:data&quot; containing the binary data content for the file. Of course, the session is saved to persist the changes.&lt;/p&gt;&lt;p&gt;Once we have the file data stored, we want to pull it back out to see that we stored everything as intended:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def node = root.getNode(file.name)
dumpProps node

dumpProps node.getNode(&amp;#39;jcr:content&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;dumpProps&lt;/code&gt; method just iterates the properties of a given node and writes them to the log file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;private static void dumpProps( Node node ){
    log.info &amp;#39;Node: ({})&amp;#39;, node.name

    def iter = node.properties
    while( iter.hasNext() ){
        def prop = iter.nextProperty()
        if( prop.type != PropertyType.BINARY ){
            log.info &amp;#39; - {} : {}&amp;#39;, prop.name, prop.value.string
        } else {
            log.info &amp;#39; - {} : &amp;lt;binary-data&amp;gt;&amp;#39;, prop.name
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you run this version of the code, you will have output similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2014-08-23 16:09:18 Rabbits [INFO] User (admin) logged into repository (Jackrabbit)
2014-08-23 16:09:18 Rabbits [INFO] Stored image file data into node (2014-08-19 20.49.40.jpg)...
2014-08-23 16:09:18 Rabbits [INFO] Node: (2014-08-19 20.49.40.jpg)
2014-08-23 16:09:18 Rabbits [INFO]  - jcr:createdBy : admin
2014-08-23 16:09:18 Rabbits [INFO]  - jcr:created : 2014-08-23T15:59:26.155-05:00
2014-08-23 16:09:18 Rabbits [INFO]  - jcr:primaryType : nt:file
2014-08-23 16:09:18 Rabbits [INFO] Node: (jcr:content)
2014-08-23 16:09:18 Rabbits [INFO]  - jcr:lastModified : 2014-08-19T20:49:44.000-05:00
2014-08-23 16:09:18 Rabbits [INFO]  - jcr:data : &amp;lt;binary-data&amp;gt;
2014-08-23 16:09:18 Rabbits [INFO]  - jcr:lastModifiedBy : admin
2014-08-23 16:09:18 Rabbits [INFO]  - jcr:uuid : cbdefd4a-ec2f-42d2-b58a-a39942766723
2014-08-23 16:09:18 Rabbits [INFO]  - jcr:primaryType : nt:resource
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Jackrabbit seems to still have some development effort behind it, and it&apos;s still a lot easier to setup and use when compared with something like ModeShape, which seems to be the only other viable JCR implementation which is not specifically geared to a target use case.&lt;/p&gt;&lt;p&gt;The documentation is lacking, but with some previous experience and a little experimentation, it was not too painful getting things to work.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Simple Configuration DSL using Groovy</title>
      <link>http://coffeaelectronica.com/blog/2014/simple-configuration-dsl-using-groovy.html</link>
      <pubDate>Sat, 19 Jul 2014 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/simple-configuration-dsl-using-groovy.html</guid>
      <description>
      &lt;p&gt;Recently at work we were talking about being able to process large configuration files from legacy applications where the config file had a fairly simple text-based format. One of my co-workers mentioned that you could probably just run the configuration file like a Groovy script and just handle the &lt;code&gt;missingMethod()&lt;/code&gt; calls and use them to populate a configuration object. This sounded like an interesting little task to play with so I threw together a basic implementation - and it&apos;s actually easier than I thought.&lt;/p&gt;&lt;p&gt;To start out with, we need a configuration holder class, which we&apos;ll just call &lt;code&gt;Configuration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class Configuration {
    String hostName
    String protocol
    int port
    Headers headers
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Say we are collecting configuration information for some sort of HTTP request util or something, it&apos;s a contrived example, but shows the concept nicely. The &lt;code&gt;Headers&lt;/code&gt; class is a simple delegated builder in itself, and looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@ToString(includeNames=true)
class Headers {
    Map&amp;lt;String,Object&amp;gt; values = [:]

    static Headers headers( Closure closure ){
        Headers h = new Headers()
        closure.delegate = h
        closure()
        return h
    }
    
    void header( String name, value ){
        values[name] = value
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I won&apos;t explain much about the &lt;code&gt;Headers&lt;/code&gt; class, other than it takes a closure and delegates the method calls of it onto a &lt;code&gt;Headers&lt;/code&gt; instance to populate it. For our purposes it just makes a nice simple way to show closure usage in the example.&lt;/p&gt;&lt;p&gt;Now, we need a configuration file to load. It&apos;s just a simple text file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;hostname &amp;#39;localhost&amp;#39;
protocol = &amp;#39;https&amp;#39;
port 2468

headers {
    header &amp;#39;Content-type&amp;#39;,&amp;#39;text/html&amp;#39;
    header &amp;#39;Content-length&amp;#39;,10101
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The script-based configuration is similar to the delegated builder, in that the method calls of the &quot;script&quot; (text configuration file) will be delegated to an instance of the &lt;code&gt;Configuration&lt;/code&gt; class. For that to work, we could override the &lt;code&gt;missingMethod()&lt;/code&gt; method and handle each desired operation, or if we have a good idea of the configuration (as we do in our case), we could just add the missing methods, as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@ToString(includeNames=true)
class Configuration {

    String hostName
    int port
    Headers headers
   
    void hostname( final String name ){
        this.hostName = name
    }

    void port( final int port ){
        this.port = port
    }
    
    void headers( final Closure closure ){
        this.headers = Headers.headers( closure )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically, they are just setters in our case; however, you could do whatever conversion or validation you need, they&apos;re just method calls. Also, notice that the &lt;code&gt;protocol&lt;/code&gt; property in the configuration file is actually setting the property directly with an equals &lt;code&gt;=&lt;/code&gt; rather than using a method call - this is also valid, though personally I like the way it looks without all the equals signs.&lt;/p&gt;&lt;p&gt;The final part needed to make this work, is the Groovy magic. We need to load the text as a script in a &lt;code&gt;GroovyShell&lt;/code&gt;, parse it and run it. The whole code for the &lt;code&gt;Configuration&lt;/code&gt; object is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@ToString(includeNames=true)
class Configuration {

    String hostName
    String protocol
    int port
    Headers headers
   
    void hostname( final String name ){
        this.hostName = name
    }

    void port( final int port ){
        this.port = port
    }
    
    void headers( final Closure closure ){
        this.headers = Headers.headers( closure )
    }

    static Configuration configure( final File file ){
        def script = new GroovyShell(
            new CompilerConfiguration(
                scriptBaseClass:DelegatingScript.class.name 
            )
        ).parse(file)

        def configuration = new Configuration()
        script.setDelegate( configuration )
        script.run()

        return configuration
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The important parts are the use of the &lt;code&gt;DelegatingScript&lt;/code&gt; as the &lt;code&gt;scriptBaseClass&lt;/code&gt; and then setting the &lt;code&gt;Configuration&lt;/code&gt; instance as the delegate for the script. Now if you run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def conf = Configuration.configure( new File(&amp;#39;conf.txt&amp;#39;) )
println conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You get something like the following output: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Configuration(protocol:https, hostName:localhost, port:2468, headers:Headers(values:[Content-type:text/html, Content-length:10101]))
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Notice, that in the example we didn&apos;t define a method for &lt;code&gt;protocol&lt;/code&gt;, which means that the only way you can set it in the configuration is as a property; however, we could use the property format to set the value of the other fields, such as &lt;code&gt;port&lt;/code&gt; since there is a setter method available along with the helper method (options are nice).&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Groovy makes simple DSLs, well... simple.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Going Native with Gradle</title>
      <link>http://coffeaelectronica.com/blog/2014/going-native-with-gradle.html</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/going-native-with-gradle.html</guid>
      <description>
      &lt;p&gt;With my recent foray into Java game programming, I found the support for managing the native sub-dependencies of jar files to be a bit lacking in Gradle. I did find a few blog posts about the general ways of adding it to your build; however, I did not find any specific plugin or built-in support. Since I am planning on doing a handful of simple games as a tutorial for game programming it made sense for me to pull out my native library handling functionality into a Gradle plugin... and thus the &lt;a href=&quot;https://github.com/cjstehno/gradle-natives&quot;&gt;Gradle Natives Plugin&lt;/a&gt; was born.&lt;/p&gt;&lt;p&gt;First, we need a project to play with. I found a simple &lt;a href=&quot;http://philphilphil.wordpress.com/2009/05/28/helloworld-using-lwjgl/&quot;&gt;LWJGL Hello World&lt;/a&gt; application that works nicely for our starting point. So, create the standard Gradle project structure with the following files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// hello/src/main/java/hello/HelloWorld.java
package hello;

import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.Display;
 
public class HelloWorld {
    public static void main (String args[]){
        try {
            Display.setTitle(&amp;quot;Hello World&amp;quot;);
            Display.create();
			
			while(!Display.isCloseRequested()){
				Thread.sleep(100);      
			}
		
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
			Display.destroy();
		}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;with a standard Gradle build file as a starting point: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;// hello/build.gradle

apply plugin:&amp;#39;java&amp;#39;

repositories {
	jcenter()
}

dependencies {
	compile &amp;#39;org.lwjgl.lwjgl:lwjgl:2.9.1&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, the project will build, but will not run without jumping through some extra hoops. Let&apos;s do some of that hoop-jumping in Gradle with the &lt;code&gt;application&lt;/code&gt; plugin. Add the following to the &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;apply plugin:&amp;#39;application&amp;#39;

mainClassName = &amp;#39;hello.HelloWorld&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This adds the &lt;code&gt;run&lt;/code&gt; task to the build which will run the &lt;code&gt;HelloWorld&lt;/code&gt; main class; however, this still won&apos;t work since it does not know how to deal with the LWJGL native libraries. That&apos;s where the &lt;code&gt;natives&lt;/code&gt; plugin comes in. At this time there is no official release of the plugin on Bintray (coming soon), so you will need to clone the repo and build the plugin, then install it into your local maven repo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:cjstehno/gradle-natives.git

cd gradle-natives

gradle build install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once that is done, you will need to add the natives plugin to your build:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;buildscript {
    repositories {
        mavenLocal()
    }

    dependencies {
        classpath &amp;#39;gradle-natives:gradle-natives:0.1&amp;#39;
    }
}

apply plugin:&amp;#39;natives&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then you will need to apply the custom configuration for your specific native libraries. You will need to add an entry in the jars list for each dependency jar containing native libraries. These are the jars that will be searched on the classpath for native libraries by platform.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;natives {
	jars = [
		&amp;#39;lwjgl-platform-2.9.1-natives-windows&amp;#39;, 
		&amp;#39;lwjgl-platform-2.9.1-natives-osx&amp;#39;, 
		&amp;#39;lwjgl-platform-2.9.1-natives-linux&amp;#39;
	]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will allow the associated native libraries to be unpacked into the build directory with:&lt;/p&gt;&lt;p&gt;&lt;code&gt;gradle unpackNatives&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Which will copy the libraries into a directory for each platform under &lt;code&gt;build/natives/PLATFORM&lt;/code&gt;. Then we need one more step to allow it to be run. The &lt;code&gt;java.library.path&lt;/code&gt; needs to be set before the run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;run {
    systemProperty &amp;#39;java.library.path&amp;#39;, file( &amp;#39;build/natives/windows&amp;#39; )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you can run the application using:&lt;/p&gt;&lt;p&gt;&lt;code&gt;gradle run&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Granted, there are still issues to be resolved with the plugin. Currently, it is a little picky about when it is run. If you have tests that use the native libraries you will need to build without tests and then run the tests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gradle clean build unpackNatives -x test

gradle test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lastly, you can also specify the platforms whose library files are to be copied over using the &lt;code&gt;platforms&lt;/code&gt; configuration property, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;natives {
	jars = [
		&amp;#39;lwjgl-platform-2.9.1-natives-windows&amp;#39;, 
		&amp;#39;lwjgl-platform-2.9.1-natives-osx&amp;#39;, 
		&amp;#39;lwjgl-platform-2.9.1-natives-linux&amp;#39;
	]
	platforms = &amp;#39;windows&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will only copy the windows libraries into the build.&lt;/p&gt;&lt;p&gt;Feel free to create an issue for any bugs you find or features you would like to see. Also, I am open to bug fixes and pull requests from others.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Mapping Large Data Sets</title>
      <link>http://coffeaelectronica.com/blog/2013/mapping-large-data-sets.html</link>
      <pubDate>Sun, 9 Jun 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2013/mapping-large-data-sets.html</guid>
      <description>
      &lt;p&gt;Recently, I was tasked to resolve some performance issues related to displaying a large set of geo-location data on a map. Basically, the existing implementation was taking the simple approach of fetching all the location data from the server and rendering it on the map. While, there is nothing inherently wrong with this approach, it does not scale well as the number of data points increases, which was the problem at hand. &lt;/p&gt;&lt;p&gt;The map needed to be able to render equally well whether there were 100 data points or a million. With this direct approach, the browser started to bog down at just over a thousand points, and failed completely at 100-thousand. A million was out of the question. So, what can be done?&lt;/p&gt;&lt;p&gt;I have created a small demo application to help present the concepts and techniques I used in solving this problem. I intend to focus mostly on the concepts and keep the discussion of the code to a minimum. This will not really be much of an OpenLayers tutorial unless you are faced with a similar task. See the sidebar for more information about how to setup and run the application - it&apos;s only necessary if you want to run the demo yourself.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The demo application is available on &lt;a href=&quot;https://github.com/cjstehno/coffeaelectronica/tree/master/mapping-large-data&quot;&gt;GitHub&lt;/a&gt; and its README file contains the information you need to build and run it.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;First, let&apos;s look at the problem itself. If you fire up the demo &quot;V1&quot; with a data set of 10k or less, you will see something like the following:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/mapping-large-data/src/main/webapp/img/v1_view.png&quot; alt=&quot;V1 View&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;You can see that even with only ten thousand data points it is visually cluttered and a bit sluggish to navigate. If you build a larger data set of 100k or better yet, a million data points and try to run the demo, at best it will take a long time, most likely it will crash your browser. This approach is just not practical for this volume of data.&lt;/p&gt;&lt;p&gt;The code for this version simply makes an ajax request to the data service to retrieve all the data points:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$.ajax(&amp;#39;poi/v1/fetch&amp;#39;, { contentType:&amp;#39;application/json&amp;#39; }).done(function(data){
	updateMarkers(map, data);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then renders the markers for each data point on the map:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function updateMarkers( map, data ){
	var layer = map.getLayersByName(&amp;#39;Data&amp;#39;)[0];

	var markers = $.map(data, function(item){
		return new OpenLayers.Feature.Vector(
			new OpenLayers.Geometry.Point(
				item.longitude, item.latitude
			).transform(PROJECTION_EXTERNAL, PROJECTION_INTERNAL),
			{ 
				item:item 
			},
			OpenLayers.Util.applyDefaults(
				{ fillColor:&amp;#39;#0000ff&amp;#39; }, 
				OpenLayers.Feature.Vector.style[&amp;#39;default&amp;#39;]
			)
		);
	});

	layer.addFeatures(markers);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What we really need to do is reduce the amount of data being processed without losing any visual information? The key is to consider the scope of your view. Other than at the lowest zoom levels (whole Earth view) you are only viewing a relatively limited part of the whole map, which means that only a sub-set of the data is visible at any given time. So why fetch it all from the server when it just adds unnecessary load on the JavaScript mapping library?&lt;/p&gt;&lt;p&gt;The answer is that you don&apos;t have to. If you listen to map view change events and fetch the data for only your current view by passing the view bounding box to your query, you can limit the data down to only what you currently see. The &quot;V2&quot; demo uses this approach to limit the volume of data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;eventListeners:{
	moveend:function(){
		var bounds = map.getExtent().transform(PROJECTION_INTERNAL, PROJECTION_EXTERNAL).toString();

		$.ajax(&amp;#39;poi/v2/fetch/&amp;#39; + bounds, { contentType:&amp;#39;application/json&amp;#39; }).done(function(data){
			updateMarkers(map, data);
		});
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;updateMarkers()&lt;/code&gt; function remains unchanged in this version.&lt;/p&gt;&lt;p&gt;Visually, this version of the application is the same; however, it will handle larger data sets with less pain. This approach increases the number of requests for data but will reduce the amount of data retrieved as the user zooms into their target area of interest.&lt;/p&gt;&lt;p&gt;This approach is still a bit flawed; this method works fine for cases where the user is zoomed in on a state or small country; however, it is still possible to view the whole large data set when your view is at the lower zoom levels (whole Earth). There is still more work to be done.&lt;/p&gt;&lt;p&gt;In order to reduce the number of data points when viewing the lower zoom levels, we need to consider how useful all this data really is. Considering the image from V1, which is still valid for V2, is there any use in rendering all of those data points? This is just random distributed data, but even real data would probably be as dense or even more so in areas around population centers which would only compound the problem. How can you clean up this display mess while also reducing the amount of data being sent, oh, and without any lose of useful information?&lt;/p&gt;&lt;p&gt;The first part of the answer is clustering (see &lt;a href=&quot;http://en.wikipedia.org/wiki/Cluster_analysis&quot;&gt;Cluster Analysis&lt;/a&gt;). We needed to group the data together in a meaningful way such that we present a representative point for a nearby group of points, otherwise known as a cluster. After some research and peer discussion, it was decided that the &lt;a href=&quot;http://en.wikipedia.org/wiki/K-means_clustering&quot;&gt;K-Means Clustering Algorithm&lt;/a&gt; was the approach for our needs, and the &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons - Math&lt;/a&gt; library provided a stable and generic implementation that would work well for our requirements. It is also what I have used here for this demo.&lt;/p&gt;&lt;p&gt;The clustering provides a means of generating a fixed-size data set representing the whole around a common center point. With this, you can limit your clustered data set down to something like 200, which can easily be displayed on the map, and will still provide an accurate representation of the location data.&lt;/p&gt;&lt;p&gt;Notice, though, I said that clustering was the first part of the answer... what is the second? Consider the effect of clustering on your data set as you zoom in from whole Earth view down to city street level. Clustering combined with view-bounds limiting will cause your overall data set to change. When the data points used in the cluster calculation change, the results change, which causes the location points to jump. I called this &quot;jitter&quot;. Even just panning the map at a constant zoom level would cause map markers to move around like they were doing some sort of annoying square dance. To overcome the jittery cluster markers, you need to keep the data set used in the cluster calculation constant.&lt;/p&gt;&lt;p&gt;A hybrid approach is required. Basically, add the zoom level to the fetch request.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;eventListeners:{
	moveend:function(){
		var bounds = map.getExtent().transform(PROJECTION_INTERNAL, PROJECTION_EXTERNAL).toString();
		var zoom = map.getZoom();

		$.ajax(&amp;#39;poi/v3/fetch/&amp;#39; + bounds + &amp;#39;/&amp;#39; + zoom, { contentType:&amp;#39;application/json&amp;#39; }).done(function(data){
			updateMarkers(map, data);
		});
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At the lower zoom levels, up to a configured threshold, you calculate the clusters across the whole data set (not bound by view) and cache this cluster data so that the calculation will only be done on the first call. Since zoom is not a function of this calculation, there can be one cached data set for all of the zoom levels below the specified threshold. Then, when the user zooms into the higher zoom levels (over the threshold), the actual data points (filtered by the view bounds) are returned by the fetch.&lt;/p&gt;&lt;p&gt;If you look at demo V3, you can see this in action, for 10-thousand points:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/mapping-large-data/src/main/webapp/img/v3_10k.png&quot; alt=&quot;V3 10k View&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;And if you run the demo with a one-million point data set, you will see the same view. The initial load will take a bit longer but once loaded, it should perform nicely. What you may notice, though is that once you cross the clustered threshold you may suddenly get a large data set again... not overly so, but just more than you might expect. This is an area that you would want to tune to your specific needs so that you have a balance of when this change occurs to get the best perceived results.&lt;/p&gt;&lt;p&gt;You could stop here and be done with it, but depending on how your data is distributed you could still run into some overly-dense visual areas. Consider the case where you generate a million data points, but only in the Western Hemisphere.&lt;/p&gt;&lt;p&gt;If you build a one-million point data set for only the Americas, you can see that there are still some overly-dense areas even with the clustering. Since I am using &lt;a href=&quot;http://openlayers.org/&quot;&gt;OpenLayers&lt;/a&gt; as the mapping API, I can use their client-side clustering mechanism to help resolve this. With the client-side clustering enabled, the mapping API will groups markers together by distance to help de-clutter the view. If you look at V3 again, you can see the cluster clutter problem:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/mapping-large-data/src/main/webapp/img/v3_west.png&quot; alt=&quot;V3 West&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;You can see that there are still some areas of high marker density. The client-side clustering strategy in OpenLayers can help relieve the clutter a bit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;new OpenLayers.Layer.Vector(&amp;#39;Data&amp;#39;,{
	style: OpenLayers.Util.applyDefaults(
		{
			fillColor:&amp;#39;#00ff00&amp;#39;
		},
		OpenLayers.Feature.Vector.style[&amp;#39;default&amp;#39;]
	),
	strategies:[
		new OpenLayers.Strategy.Cluster({
			distance:50,
			threshold:3
		})
	]
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;as can be seen in V4:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/mapping-large-data/src/main/webapp/img/v4_west.png&quot; alt=&quot;V4 West&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;But, it is more apparent when you zoom in:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/mapping-large-data/src/main/webapp/img/v4_west_zoom.png&quot; alt=&quot;V4 West Zoom&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;You can see now that the green markers are client-side clusters and the blue markers are server-side points (clusters or single locations).&lt;/p&gt;&lt;p&gt;At the end of all that you have a map with client-side clustering to handle visual density at the local level. You have server-side clustering at more-global zoom levels, with caching to remove jitter and reduce calculation time and you have actual location points being served filtered by bounds. It seems like a lot of effort, but overall the code itself is fairly simple and straight-forward... and now we can support a million data points with no real issues or loss of information.&lt;/p&gt;&lt;p&gt;One thing I have not mentioned here is the use of GIS databases or extensions. My goal here was more conceptual, but should you be faced with this kind of problem, you should look into the GIS support for your data storage solution since being able to run queries directly on the bounding shape can be more efficient with GIS solutions in place.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Javassist - Mind Blown</title>
      <link>http://coffeaelectronica.com/blog/2013/javasisst-mind-blown.html</link>
      <pubDate>Sat, 25 May 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2013/javasisst-mind-blown.html</guid>
      <description>
      &lt;p&gt;I have been doing a lot with Java reflection recently in one of my personal projects and while doing some research I came across the &lt;a href=&quot;http://www.javassist.org&quot;&gt;Javassist&lt;/a&gt; bytecode manipulation API.&lt;/p&gt;&lt;p&gt;Javassist allows you to create new classes and/or manipulate existing classes at runtime... at the bytecode level, and it does it without you having to understand all the deep down details of classfiles.&lt;/p&gt;&lt;p&gt;Let&apos;s take an example and say that I have an interface:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package jsist;

public interface Greeter {

	String sayHello( String name );
	
	String sayGoodbye( String name );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s very easy to dynamically implement that interface at runtime, but first we need a little demo application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;package jsist;

public class Demo {

    private static final ClassPool CLASS_POOL = ClassPool.getDefault();
    private static CtClass STRING_CLASS;

    static {
        try{
            STRING_CLASS = CLASS_POOL.get( &amp;quot;java.lang.String&amp;quot; );
        } catch( NotFoundException e ){
            e.printStackTrace();
        }
    }

    public static void main( final String[] args ) throws Exception {
		useIt( implementIt() );
	}
	
	private static Class implementIt() throws Exception {
		// will contain our javassist code
	}
	
	private static void useIt( Class clazz ) throws  Exception {
        System.out.println( clazz );

        Greeter greeter = (Greeter)clazz.newInstance();

        System.out.println(&amp;quot;Hi : &amp;quot; + greeter.sayHello(&amp;quot;Bytecode&amp;quot;));
        System.out.println(&amp;quot;Bye: &amp;quot; + greeter.sayGoodbye( &amp;quot;Java&amp;quot; ));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will give us a simple test bed for the various dynamic implementations of the Greeter interface. Basically, it builds an implementation of the interface, prints out the class and the result of executing the two methods. Now for the fun part.&lt;/p&gt;&lt;p&gt;Our first example will be a simple implementation of the interface:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private static Class implementIt() throws Exception {
	CtClass greeterClass = CLASS_POOL.makeClass(&amp;quot;jsist.gen.GreeterImpl&amp;quot;);
	greeterClass.addInterface( CLASS_POOL.get(&amp;quot;jsist.Greeter&amp;quot;) );

	CtMethod sayHelloMethod = new CtMethod( STRING_CLASS, &amp;quot;sayHello&amp;quot;, new CtClass[]{STRING_CLASS}, greeterClass );
	greeterClass.addMethod( sayHelloMethod );
	sayHelloMethod.setBody( &amp;quot;{return \\&amp;quot;Hello, \\&amp;quot; + $1;}&amp;quot; );

	CtMethod sayGoodbyeMethod = new CtMethod( STRING_CLASS, &amp;quot;sayGoodbye&amp;quot;, new CtClass[]{STRING_CLASS}, greeterClass );
	greeterClass.addMethod( sayGoodbyeMethod );
	sayGoodbyeMethod.setBody( &amp;quot;return \\&amp;quot;Goodbye, \\&amp;quot; + $1;&amp;quot; );

	greeterClass.setModifiers(greeterClass.getModifiers() &amp;amp; ~Modifier.ABSTRACT);

	return greeterClass.toClass();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We start off by creating a new class called &lt;code&gt;jsist.gen.Greeter&lt;/code&gt; where the package name does not need to exist; it will be created. We then need to add the interface we want to implement, the &lt;code&gt;jsist.Greeter&lt;/code&gt; interface. Next we have to provide method implementations.&lt;/p&gt;&lt;p&gt;It feels a bit odd to create a &lt;code&gt;CtMethod&lt;/code&gt; object with the &lt;code&gt;greeterClass&lt;/code&gt; instance and then add the method to the instance, but this is the pattern that is used. I am sure there must be some internal reason for doing so.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;setBody(String)&lt;/code&gt; method is the key worker here. It allows you to provide source code as a template using the Javassist source template language. With what I have done above it it equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;return &amp;quot;Hello, &amp;quot; + arg0;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;for the &lt;code&gt;sayHello(String)&lt;/code&gt; method, and similar for the other. The important thing to note here is that your provided source is compiled down to Java bytecode, this is not some embedded scripting language.&lt;/p&gt;&lt;p&gt;Next we need to change the modifiers of the class to remove &quot;abstract&quot;, and then with a call to the &lt;code&gt;toClass()&lt;/code&gt; method we have a standard Java &lt;code&gt;Class&lt;/code&gt; object representing our newly created implementation.&lt;/p&gt;&lt;p&gt;If you run the demo with this, you will get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class jsist.gen.GreeterImpl
Hi : Hello, Bytecode
Bye: Goodbye, Java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ok, that was fun, but how about an abstract class? Let&apos;s say we have an abstract implemenation of the &lt;code&gt;Greeter&lt;/code&gt; interface:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public abstract class AbstractGreeter implements Greeter {

    @Override
    public String sayGoodbye( String name ){
        return &amp;quot;(Abstract) Goodbye, &amp;quot; + name;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note, I have implemented the &lt;code&gt;sayGoodbye(String)&lt;/code&gt; method but not the &lt;code&gt;sayHello(String)&lt;/code&gt; to make things more interesting. Our implementation of the &lt;code&gt;implementIt()&lt;/code&gt; method now becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private static Class implementIt() throws Exception {
	CtClass greeterClass = CLASS_POOL.makeClass( &amp;quot;jsist.gen.GreeterImpl&amp;quot; );
	greeterClass.setSuperclass( CLASS_POOL.get(&amp;quot;jsist.AbstractGreeter&amp;quot;) );

	CtMethod sayHelloMethod = new CtMethod( STRING_CLASS, &amp;quot;sayHello&amp;quot;, new CtClass[]{STRING_CLASS}, greeterClass );
	greeterClass.addMethod( sayHelloMethod );
	sayHelloMethod.setBody( &amp;quot;{return \\&amp;quot;Hello, \\&amp;quot; + $1;}&amp;quot; );

	greeterClass.setModifiers(greeterClass.getModifiers() &amp;amp; ~Modifier.ABSTRACT);

	return greeterClass.toClass();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first difference to note is that now we are setting the superclass rather than the interface, since our superclass already implements the interface. Also, notice that since we already have an implementation of the &lt;code&gt;sayGoodbye(String)&lt;/code&gt; method, we only need to implement &lt;code&gt;sayHello(String)&lt;/code&gt;. Other than that, there is little difference. When you run with this implementation you get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class jsist.gen.GreeterImpl
Hi : Hello, Bytecode
Bye: (Abstract) Goodbye, Java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected, our dynamic implementation plays nicely with the concrete implementation.&lt;/p&gt;&lt;p&gt;Now, what if you already have objects that implement the functionality of the two interface methods, but that do not implement the &lt;code&gt;Greeter&lt;/code&gt; interface? Say, we have:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Hello {

    public String say( String name ){
        return &amp;quot;(Delegate) Hello, &amp;quot; + name;
    }
}

public class Goodbye {

    public String say( String name ){
        return &amp;quot;(Delegate) Goodbye, &amp;quot; + name;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can easily implement the interface by copying the methods from these classes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private static Class implementIt() throws Exception {
	CtClass greeterClass = CLASS_POOL.makeClass(&amp;quot;jsist.gen.GreeterImpl&amp;quot;);
	greeterClass.addInterface( CLASS_POOL.get(&amp;quot;jsist.Greeter&amp;quot;) );

	CtClass helloClass = CLASS_POOL.get( &amp;quot;jsist.Hello&amp;quot; );
	CtMethod helloSay = helloClass.getMethod( &amp;quot;say&amp;quot;, &amp;quot;(Ljava/lang/String;)Ljava/lang/String;&amp;quot; );

	CtMethod sayHelloMethod = new CtMethod( STRING_CLASS, &amp;quot;sayHello&amp;quot;, new CtClass[]{STRING_CLASS}, greeterClass );
	greeterClass.addMethod( sayHelloMethod );
	sayHelloMethod.setBody( helloSay, null );


	CtClass gbClass = CLASS_POOL.get( &amp;quot;jsist.Goodbye&amp;quot; );
	CtMethod gbSay = gbClass.getMethod( &amp;quot;say&amp;quot;, &amp;quot;(Ljava/lang/String;)Ljava/lang/String;&amp;quot; );

	CtMethod sayGoodbyeMethod = new CtMethod( STRING_CLASS, &amp;quot;sayGoodbye&amp;quot;, new CtClass[]{STRING_CLASS}, greeterClass );
	greeterClass.addMethod( sayGoodbyeMethod );
	sayGoodbyeMethod.setBody( gbSay, null );

	greeterClass.setModifiers(greeterClass.getModifiers() &amp;amp; ~Modifier.ABSTRACT);

	return greeterClass.toClass();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This version is similar to the original interface implementation, except that now rather than providing source code for the method bodies, we provide a method object. You first find the &lt;code&gt;Hello&lt;/code&gt; class in the &lt;code&gt;ClassPool&lt;/code&gt; and then find it&apos;s &lt;code&gt;say(String)&lt;/code&gt; method - the description string is the formal JVM parameter format, but I found it simple to dump out the methods and just copy it as a shortcut.&lt;/p&gt;&lt;p&gt;If you run this version, you get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class jsist.gen.GreeterImpl
Hi : (Delegate) Hello, Bytecode
Bye: (Delegate) Goodbye, Java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Showing that both methods were from the delegate classes.&lt;/p&gt;&lt;p&gt;For our final example, to round things out, let&apos;s go back to the abstract class and provide a delegate for the abstract method rather than source:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private static Class implementIt() throws Exception {
	CtClass greeterClass = CLASS_POOL.makeClass( &amp;quot;jsist.gen.GreeterImpl&amp;quot; );
	greeterClass.setSuperclass( CLASS_POOL.get(&amp;quot;jsist.AbstractGreeter&amp;quot;) );

	CtClass helloClass = CLASS_POOL.get( &amp;quot;jsist.Hello&amp;quot; );
	CtMethod helloSay = helloClass.getMethod( &amp;quot;say&amp;quot;, &amp;quot;(Ljava/lang/String;)Ljava/lang/String;&amp;quot; );

	CtMethod sayHelloMethod = new CtMethod( STRING_CLASS, &amp;quot;sayHello&amp;quot;, new CtClass[]{STRING_CLASS}, greeterClass );
	greeterClass.addMethod( sayHelloMethod );
	sayHelloMethod.setBody( helloSay, null );

	greeterClass.setModifiers(greeterClass.getModifiers() &amp;amp; ~Modifier.ABSTRACT);

	return greeterClass.toClass();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is not really anything here, you have not already seen, but when you run it you see:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class jsist.gen.GreeterImpl
Hi : (Delegate) Hello, Bytecode
Bye: (Abstract) Goodbye, Java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected, one method provided by the delegate and one by the abstract class&apos; implementation.&lt;/p&gt;&lt;p&gt;There are other bytecode manipulation libraries, but most of the ones I looked at seemed to be very abstract or probably closer to the actual class file format, whereas Javassist is a lot more familar when coming from a Java reflection background.&lt;/p&gt;&lt;p&gt;It seems very powerful and full of interesting potential. I am by no means an expert with it, but I wanted to share what I had found since the documentation is reasonably good, but not very rich with examples.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>JUnit Rules</title>
      <link>http://coffeaelectronica.com/blog/2013/junit-rules.html</link>
      <pubDate>Thu, 28 Mar 2013 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2013/junit-rules.html</guid>
      <description>
      &lt;p&gt;No, the title is not simply an expression of my love of &lt;a href=&quot;http://junit.org/&quot;&gt;JUnit&lt;/a&gt;, but rather specifies that I will be talking&lt;br/&gt;about the &lt;code&gt;@Rule&lt;/code&gt; annotations provided by JUnit... and yes, they do &quot;rule&quot;.&lt;/p&gt;&lt;p&gt;Out of the box, JUnit has a &lt;a href=&quot;https://github.com/junit-team/junit/wiki/Rules&quot;&gt;handful of useful rules&lt;/a&gt; defined for things like&lt;br/&gt;temporary folder and test timeouts. With this post I am going to focus on writing my own rules using extensions of the&lt;br/&gt;&lt;a href=&quot;https://github.com/junit-team/junit/wiki/Rules#externalresource-rules&quot;&gt;ExternalResource&lt;/a&gt; rule class.&lt;/p&gt;&lt;p&gt;Suppose we are doing some unit testing of database access code using JDBC. Mocking direct JDBC calls is tedious and not very&lt;br/&gt;productive so we will be using a real database for testing. To keep this post a simple and straight-forward as possible&lt;br/&gt;without forsaking useful content, I am going to use Groovy for the examples and assume that we are using the Spring JDBC&lt;br/&gt;framework and some random database.&lt;br /&gt;&lt;br /&gt;We have a PersonDao for storing the name and email address of people in&lt;br/&gt;the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class PersonDao {
    JdbcTemplate jdbcTemplate

    void createPerson( person ){
        jdbcTemplate.update(&amp;#39;insert into people (name,email) values (?,?)&amp;#39;, person.name, person.email )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are only going to worry about a simple create operation since we are discussing the rules, not the testing itself.&lt;br/&gt;We first need to have a test case to work with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class PersonDaoTest {
    private PersonDao personDao

    @Before void before(){
        personDao = new PersonDao(
            jdbcTemplate: null // ?
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Right out of the gate we run into our first hurdle... we need a &lt;code&gt;JdbcTempate&lt;/code&gt; to inject. We could just connect to a&lt;br/&gt;database or fire up an embedded database right here and move on, but we can assume that if there is one of these&lt;br/&gt;tests, there will be many so a reusable solution would be best. Enter the JUnit rules. Basically, the rules are just&lt;br/&gt;reusable code that implements a simple interface to provide operations before and after test classes or methodes&lt;br/&gt;(depending on the rule annotation).&lt;/p&gt;&lt;p&gt;For our first rule, we want to setup a database environment to test with.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class DatabaseEnvironment extends ExternalResource {
    DataSource dataSource

    JdbcTemplate getJdbcTemplate(){
        new JdbcTemplate(dataSource: dataSource)
    }

    @Override
    protected void before() throws Throwable {
        Connection conn
        try {
            conn = getDataSource().getConnection()
            final Liquibase liquibase = new Liquibase(
                &amp;quot;src/main/resources/changelog.xml&amp;quot;,
                new FileSystemResourceAccessor(),
                new JdbcConnection( conn )
            )
            liquibase.dropAll()
            liquibase.update( &amp;quot;test&amp;quot; )
        } catch( ex ){
            fail(ex.message)
        } finally {
            conn?.close()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember, we are assuming that you have some &lt;code&gt;DataSource&lt;/code&gt; that you are using for testing. When the &lt;code&gt;before()&lt;/code&gt; method is&lt;br/&gt;called, our database is destroyed if it exists and is then recreated to the fresh empty state. I am using liquibase for&lt;br/&gt;database management, but any means of creating and destroying your database would work here.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note: that I do not destroy the database in the &lt;code&gt;after()&lt;/code&gt; method. This is intentional; it allows you to investigate the data conditions of a failed test.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;We can now integrate this into the test case and move forward:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class PersonDaoTest {

    @ClassRule public DatabaseEnvironment dbEnvironment = new DatabaseEnvironment(
        dataSource: myTestDataSource // you must define somewhere
    )

    private PersonDao personDao

    @Before void before(){
        personDao = new PersonDao(
            jdbcTemplate: dbEnvironment.jdbcTemplate
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I defined the DatabaseEnvironment as a &lt;code&gt;@ClassRule&lt;/code&gt; so that the database is created once for each test class, rather than&lt;br/&gt;for every test method. Now we can add an actual test method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class PersonDaoTest {

    @ClassRule public DatabaseEnvironment dbEnvironment = new DatabaseEnvironment(
        dataSource: myTestDataSource // you must define somewhere
    )

    private PersonDao personDao

    @Before void before(){
        personDao = new PersonDao(
            jdbcTemplate: dbEnvironment.jdbcTemplate
        )
    }

    @Test void &amp;#39;createPerson: simple&amp;#39;(){
        personDao.createPerson([ name:&amp;#39;Chris&amp;#39;, email:&amp;#39;chris@stehno.com&amp;#39; ])

        assert 1 == JdbcTestUtils.countRowsInTable(dbEnvironment.jdbcTemplate, &amp;#39;people&amp;#39;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The test runs and passes with a fresh database every time. There is still a hidden problem here though, let&apos;s add another&lt;br/&gt;test method. This is a bit arbitrary but let&apos;s test the case when you add a person with no email address (successfully);&lt;br/&gt;we add the following test method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Test void &amp;#39;createPerson: simple&amp;#39;(){
    personDao.createPerson([ name:&amp;#39;Chris&amp;#39; ])

    assert 1 == JdbcTestUtils.countRowsInTable(dbEnvironment.jdbcTemplate, &amp;#39;people&amp;#39;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, if you run all the tests (not just the one you added), the test will fail with a value of 2 where 1 was expected.&lt;br/&gt;Why? The database is created and destroyed per-class, not per-test so you are working with a database that already has&lt;br/&gt;data in it. To get around this we could make the database work per-test, but depending on how large your schema is,&lt;br/&gt;this could be time consuming and greatly increase your test runtime. What we want is to clean up the existing database&lt;br/&gt;in-place after each test. Another &lt;code&gt;ExternalResource&lt;/code&gt; rule to the rescue!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class DatabaseCleaner extends ExternalResource {
    JdbcTemplate jdbcTemplate

    def tables = []

    @Override
    protected void before() throws Throwable {
        tables.each { table-&amp;gt;
            jdbcTemplate.execute(&amp;quot;truncate table $table cascade&amp;quot;)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here we have defined an &lt;code&gt;ExternalResource&lt;/code&gt; rule which will truncate a specified collection of tables each time the &lt;code&gt;before()&lt;/code&gt;&lt;br/&gt;method is called. We want to use this as an instance rule, and again, we do nothing in the &lt;code&gt;after()&lt;/code&gt; method so that our&lt;br/&gt;data is in a known-failed state for a failed test. Our test case becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class PersonDaoTest {

    @ClassRule public DatabaseEnvironment dbEnvironment = new DatabaseEnvironment(
        dataSource: myTestDataSource // you must define somewhere
    )

    @Rule public DatabaseCleaner dbCleaner = new DatabaseCleaner(
        jdbcTemplate: dbEnvironment.jdbcTemplate,
        tables:[&amp;#39;people&amp;#39;]
    )

    private PersonDao personDao

    @Before void before(){
        personDao = new PersonDao(
            jdbcTemplate: dbEnvironment.jdbcTemplate
        )
    }

    @Test void &amp;#39;createPerson: simple&amp;#39;(){
        personDao.createPerson([ name:&amp;#39;Chris&amp;#39;, email:&amp;#39;chris@stehno.com&amp;#39; ])

        assert 1 == JdbcTestUtils.countRowsInTable(dbEnvironment.jdbcTemplate, &amp;#39;people&amp;#39;)
    }

    @Test void &amp;#39;createPerson: simple&amp;#39;(){
        personDao.createPerson([ name:&amp;#39;Chris&amp;#39; ])

        assert 1 == JdbcTestUtils.countRowsInTable(dbEnvironment.jdbcTemplate, &amp;#39;people&amp;#39;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when we run the whole test case, we have both tests passing because before each test method, the database is cleaned&lt;br/&gt;in-place.&lt;/p&gt;&lt;p&gt;With just these two rules we have created a stable and flexible means of testing database code. With configuration you&lt;br/&gt;can point your tests at an in-memory database, locally running database or shared database server. For normal unit&lt;br/&gt;testing I would recommend either an embedded database, or when that is not possible a database running local to the&lt;br/&gt;testing machine, but those strategies will have to be discussed another time.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Integration Testing with JUnit and Maven</title>
      <link>http://coffeaelectronica.com/blog/2013/integration-testing-with-junit-and-maven.html</link>
      <pubDate>Sat, 9 Feb 2013 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2013/integration-testing-with-junit-and-maven.html</guid>
      <description>
      &lt;p&gt;When I talk about unit testing, I generally mean small quick and mocked tests of individual chunks of functionality,&lt;br/&gt;traditional unit testing. In some cases I will be testing slightly larger chunks, such as the interaction of a&lt;br/&gt;controller and a service, with everything else mocked out; however, when you start using a real database (especially&lt;br/&gt;not an embedded one) or needing to connect to other services in order to get a good solid test, you cross over into the&lt;br/&gt;realm of integration testing.&lt;/p&gt;&lt;p&gt;Recently on one of my projects I had DAO integration tests that require a real database to test against, and it is not&lt;br/&gt;embeddable (PostgreSQL using some non-standard features). I used a system property check to ensure that these integration&lt;br/&gt;tests only ran when I wanted them to so that I could ensure that there was a database ready to test against. You would&lt;br/&gt;have something like the following in your unit test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;assumeTrue( &amp;quot;true&amp;quot;.equalsIgnoreCase(System.getProperty(&amp;quot;integration&amp;quot;)) );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which would only continue with the test if the assumption was true, otherwise it stops without failing the test. With&lt;br/&gt;this, when I wanted to run the integration tests I would just run them with that property, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn test -Dintegration=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works, and it&apos;s not a horrible solution, but it does get annoying when testing from an IDE since you have to keep&lt;br/&gt;setting that property on any new test runners, which can slow things down.&lt;/p&gt;&lt;p&gt;A better way would be to have the test be no different than any other test so that if you want to run it, you run it,&lt;br/&gt;if not, you don&apos;t. I figured that there had to be a solution to this problem out there so a little research was in order.&lt;br/&gt;I found out that maven has an &quot;integration-test&quot; phase (since Maven 3) and that there is a fork of the&lt;br/&gt;&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/&quot;&gt;surefire&lt;/a&gt; testing plugin called&lt;br/&gt;&lt;a href=&quot;http://maven.apache.org/surefire/maven-failsafe-plugin/&quot;&gt;failsafe&lt;/a&gt;&lt;br/&gt;to take advantage of this build phase.&lt;/p&gt;&lt;p&gt;Surefire is the unit test running plugin used by maven. You usually don&apos;t even realize it&apos;s there; Unless you have some&lt;br/&gt;special configuration needs it just runs your tests for you. The failsafe fork of the plugin does the same functionality&lt;br/&gt;but with slightly different configuration. Failsafe looks for tests ending in &quot;IT&quot; for &quot;integration test&quot; rather than&lt;br/&gt;&quot;Test&quot; as a normal JUnit test. Also, failsafe runs in the integration-test phase rather rather than the test phase.&lt;/p&gt;&lt;p&gt;Now what I needed was a simple way to take advantage of this build phase. I could have used the naming patterns, but I&lt;br/&gt;prefer the &quot;Test&quot; suffix and wanted another option. I found an interesting alternative, the experimental categories&lt;br/&gt;feature in &lt;a href=&quot;http://junit.org/&quot;&gt;JUnit&lt;/a&gt; (4.9+).&lt;/p&gt;&lt;p&gt;To get this running, you need to have something like the following config in your maven build plugins:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.13&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;excludedGroups&amp;gt;com.coffeaelectronica.Integration&amp;lt;/excludedGroups&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-failsafe-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.13&amp;lt;/version&amp;gt;
        &amp;lt;executions&amp;gt;
            &amp;lt;execution&amp;gt;
                &amp;lt;goals&amp;gt;
                    &amp;lt;goal&amp;gt;integration-test&amp;lt;/goal&amp;gt;
                    &amp;lt;goal&amp;gt;verify&amp;lt;/goal&amp;gt;
                &amp;lt;/goals&amp;gt;
            &amp;lt;/execution&amp;gt;
        &amp;lt;/executions&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;groups&amp;gt;com.coffeaelectronica.Integration&amp;lt;/groups&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;**/*Test.*&amp;lt;/include&amp;gt;
        &amp;lt;/includes&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This tells surefire to ignore any JUnit tests annotated with the Integration annotation and then configures failsafe to only consider classes ending in &quot;Test&quot; and having the Integration annotation. Remember, by default failsafe looks for &quot;**/*IT.*&quot;.&lt;/p&gt;&lt;p&gt;With this, your tests either have no Category annotation, for a normal test, or something like the example shown below for Integration tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Category(Integration.class)
public class SomeDaoTest {
    // your integration test methods...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, when you run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You get only your normal unit tests being run, while running&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mvn integration-test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will run only your integration tests.&lt;/p&gt;&lt;p&gt;Along with this, you retain the ability to run any single test in your IDE without having to do any extra configuration.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Multi-threaded Work Queue</title>
      <link>http://coffeaelectronica.com/blog/2013/multi-threaded-work-queue.html</link>
      <pubDate>Sun, 27 Jan 2013 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2013/multi-threaded-work-queue.html</guid>
      <description>
      &lt;p&gt;I finally had some time to play with the DataFlow functionality in GPars, and as you would expect, it&apos;s both simple and&lt;br/&gt;powerful. I needed a simple means of processing data from a queue in a multi-threaded manner. I considered something like&lt;br/&gt;JMS, but for what I am working on that was too complex and too heavy. I really just needed to toss a message on a queue&lt;br/&gt;and let it get processed at some future time, hopefully by a couple threads. The DataFlowQueue came through perfectly.&lt;/p&gt;&lt;p&gt;Below is a simple demo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def pool = new DefaultPool(false, 3)
def queue = new DataflowQueue&amp;lt;String&amp;gt;()

def latch = new CountDownLatch(100)

queue.wheneverBound(new DataCallbackWithPool(pool,{msg-&amp;gt;
    println &amp;quot;[${Thread.currentThread().name}] ${System.currentTimeMillis()} $msg&amp;quot;
    latch.countDown()
}))

100.times { n-&amp;gt;
    queue.bind(&amp;quot;Message-$n&amp;quot;)
}

latch.await()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;DataFlowQueue&lt;/code&gt; accepts messages that it will hand off to bound handlers. The &lt;code&gt;wheneverBound()&lt;/code&gt; method will bind the&lt;br/&gt;handler permanently (rather than for just a single message) so that you can use the &lt;code&gt;DataCallbackWithPool&lt;/code&gt; message stream&lt;br/&gt;as a handler. Configure the &lt;code&gt;DataCallbackWithPool&lt;/code&gt; object with a pool and your actual message handler then you are done.&lt;/p&gt;&lt;p&gt;When you run the demo code you will see that the bind call returns immediately and that each message is handled on one&lt;br/&gt;of the three threads configured.&lt;/p&gt;&lt;p&gt;Nothing Earth-shattering, but it will come in handy. Also, since the above example was written in Groovy, you could also&lt;br/&gt;do this with GPars in Java, with just a few changes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Pool pool = new DefaultPool( false, 3 );
DataflowQueue&amp;lt;String&amp;gt; queue = new DataflowQueue&amp;lt;&amp;gt;();

final CountDownLatch latch = new CountDownLatch( 100 );

queue.wheneverBound( new DataCallbackWithPool( pool, new MessagingRunnable&amp;lt;String&amp;gt;(){
    @Override
    protected void doRun( final String msg ){
        System.out.printf( &amp;quot;[%s] %d%n&amp;quot;, Thread.currentThread().getName(), System.currentTimeMillis() );
        latch.countDown();
    }
}));

for( int i=0; i&amp;lt;100; i++){
    queue.bind( &amp;quot;Message-&amp;quot; + i );
}

latch.await();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main difference being the introduction of the MessageRunnable, since Java does not have closures yet.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Call Screening Tip</title>
      <link>http://coffeaelectronica.com/blog/2012/call-screening-tip.html</link>
      <pubDate>Fri, 28 Sep 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2012/call-screening-tip.html</guid>
      <description>
      &lt;p&gt;Yes, I am one of those people who likes to screen my phone calls. Basically, I don&apos;t want my phone to ring unless it&apos;s important... there is only one caller that I want my phone to ring for and that is my wife. Everything else can go to voice mail.&lt;/p&gt;&lt;p&gt;I had an app called &quot;Special Call&quot; for a while that worked great. You would pick a contact that would always ring, no matter what the volume or sound mode; however, after the Android 4 upgrade (ICS) it never really worked right. It would still put the special calls through, but it would then turn on the sound so that any call or notification after a &quot;special call&quot; would be at normal volume which kind of defeats the purpose.&lt;/p&gt;&lt;p&gt;So, I had an idea and it actually works great. With my phone, and I would assume all Android phones, I can configure a default ringtone and then configure separate ringtones for any contact. I created a &quot;silence&quot; ringtone by recording a few seconds of silence in an empty conference room at work. Then I made this my default ringtone and gave my wife her own normal ringtone.&lt;/p&gt;&lt;p&gt;Now, without any extra app, I can easily turn on or off the ring for any contact. It&apos;s quite handy.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Google Protocol Buffers</title>
      <link>http://coffeaelectronica.com/blog/2012/google-protocol-buffers.html</link>
      <pubDate>Sun, 13 May 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2012/google-protocol-buffers.html</guid>
      <description>
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;Google Protocol Buffers&lt;/a&gt; have been around for a while; however, I have&lt;br/&gt;only started working with them recently. We use them at work for well-defined communication protocols between Java and&lt;br/&gt;native systems. I was always under the impression that they were a lot more complicated than what they really are. I&lt;br/&gt;decided to collect my working knowledge into a quick little tutorial.&lt;/p&gt;&lt;p&gt;The best way to describe Google Protocol Buffers is right from the blurb on the project web site:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Protocol buffers are Google&apos;s language-neutral, platform-neutral, extensible mechanism for serializing structured data -&lt;br/&gt;think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use&lt;br/&gt;special generated source code to easily write and read your structured data to and from a variety of data streams and&lt;br/&gt;using a variety of languages - Java, C++, or Python.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;As an example to play with let&apos;s consider a simple set of messages for searching a remote database for user information.&lt;br/&gt;We will need a &lt;code&gt;Person&lt;/code&gt; data structure to hold the information being transferred:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Person
    id - the id of the user
    name - the full name of the user
    age - the age of the user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will also need a container for the query itself, let&apos;s call it a &lt;code&gt;PersonQuery&lt;/code&gt;, which will contain a prototype Person&lt;br/&gt;with the search criteria.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PersonQuery
    prototype - a partially complete Person used as search criteria
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And, finally we will need a response structure, &lt;code&gt;PersonQueryResults&lt;/code&gt; which will contain all the matching Person(s) in the&lt;br/&gt;external data source.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PersonQueryResults
    prototype - the search criteria
    results - the resulting Person(s) found
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That should be enough to work with. Next we need to create the actual protocol definition GPB protocols are defined in a&lt;br/&gt;simple well-documented text format so we create a text file called &lt;code&gt;PersonMessages.proto&lt;/code&gt; in your favorite text editor.&lt;/p&gt;&lt;p&gt;All three of our structures are considered &quot;message&quot; structures in GPB. The Person would be defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;message Person {
    optional int32 id = 1;
    optional string name = 2;
    optional int32 age = 3;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, we see all three fields are listed as &quot;optional&quot; since these fields do not have to be present. The type&lt;br/&gt;of each field is defined next (int32 and string in our case) and then the field name. After each field is an index&lt;br/&gt;number. These index numbers should not be changed once your protocol is in use as they are used in generating the&lt;br/&gt;compiled objects used by the various supported platforms to determine serialization and deserialization&lt;br/&gt;information.&lt;/p&gt;&lt;p&gt;We can similarly work up the other two structures:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;message PersonQuery {
    required Person prototype = 1;
}

message PersonQueryResults {
    required Person prototype = 1;
    repeated Person result = 2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note, that the fields in these two are &quot;required&quot;, which as it sounds, means that these fields must be filled&lt;br/&gt;in. There are a few other modifiers and a bunch of field types you can use; you should definitely check out the&lt;br/&gt;documentation if you are interested in going deeper.&lt;/p&gt;&lt;p&gt;Since we will be working with Java, we want to specify an &quot;option&quot; at the top of the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;option java_package = &amp;quot;com.stehno.proto&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This tells the GPB compiler to put the generated classes in the specified package. Also good to note is that&lt;br/&gt;the wrapper class for the protocol structures will have the same name as the proto file (though I think it will also&lt;br/&gt;convert underscore-separated names as well).&lt;/p&gt;&lt;p&gt;You can either use the command line compiler or, if you are using Maven, you can create a project for all of your&lt;br/&gt;protocols and build them with the &quot;maven-protoc-plugin&quot; plugin. The source for this post will have the complete proto&lt;br/&gt;file and pom.xml file.&lt;/p&gt;&lt;p&gt;Once you have the message classes, you can use the provided Builders to create your message objects for a query:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;PersonMessages.Person.Builder personBuilder = PersonMessages.Person.newBuilder();
personBuilder.setName( &amp;quot;Chris&amp;quot; );

PersonMessages.PersonQuery.Builder personQueryBuilder = PersonMessages.PersonQuery.newBuilder();
personQueryBuilder.setPrototype( personBuilder );

PersonMessages.PersonQuery personQuery = personQueryBuilder.build();
byte[] bytes = personQuery.toByteArray();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This code creates a Person with &lt;code&gt;name=&amp;quot;Chris&amp;quot;&lt;/code&gt;, the prototype of the person we are searching for, and then&lt;br/&gt;creates a PersonQuery with that Person. The resulting Builder is built with the build() method which creates the actual&lt;br/&gt;message object. Then all you need to do is call &lt;code&gt;toByteArray()&lt;/code&gt; to render the message as bytes suitable for transfer or&lt;br/&gt;storage.&lt;/p&gt;&lt;p&gt;And, on the other end of the pipeline you can deserialize the message simply by parsing the bytes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;PersonMessages.PersonQuery rebuiltQuery = PersonMessages.PersonQuery.parseFrom( bytes );
String name = rebuiltQuery.getPrototype().getName();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This simple serialization and deserialization method could also be useful for long-term object storage, though GPB&lt;br/&gt;works best when the message structures do not change much or often (though there are ways of minimizing the effect of&lt;br/&gt;protocol changes).&lt;/p&gt;&lt;p&gt;To finish up, there are some design concerns you need to be aware of when working with GPB. The serialized message bytes&lt;br/&gt;have no concept of what type of message created them, meaning you need to know what the message is in order to parse it&lt;br/&gt;with the correct message object class. You can work-around this by wrapping all messages in an &quot;envelope message&quot; that&lt;br/&gt;defines a type and the content bytes of that type. Another approach, if available, is to provide message type information&lt;br/&gt;in any header information provided by your transport mechanism.&lt;/p&gt;&lt;p&gt;GPB messages are best for static or slowly-changing protocols, if your needs are not well-defined or may change drastically,&lt;br/&gt;you may not want to use GPB.&lt;/p&gt;&lt;p&gt;So, that&apos;s all there is. The GPB documentation is pretty straight-forward and provides good suggestions for message style and design.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The source code for this post can be found at: &lt;a href=&quot;https://github.com/cjstehno/coffeaelectronica&quot;&gt;https://github.com/cjstehno/coffeaelectronica&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Personal Development Process</title>
      <link>http://coffeaelectronica.com/blog/2012/personal-development-process.html</link>
      <pubDate>Sun, 6 May 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2012/personal-development-process.html</guid>
      <description>
      &lt;p&gt;Lately my duties have started drifting more into the realm of team leader and mentor, and with that I am often quite surprised by the lack of understanding around best practices. I try not to take it for granted that everyone places the same value on these topics as I do, but there are some basic concepts that (at least to me) feel like basic &quot;rules of development&quot;.&lt;/p&gt;&lt;p&gt;In general, on a daily (or so) basis, a developer should do most if not all of the following during an active coding cycle:&lt;/p&gt;&lt;h2&gt;Write Good Code&lt;/h2&gt;&lt;p&gt;You should always be writing code in a manner that you expect others to be able to understand and build on. Your comments should be clear, concise and meaningful. Your formatting should follow the general standards of the language and any standards provided by your development team.&lt;/p&gt;&lt;h2&gt;Unit Testing&lt;/h2&gt;&lt;p&gt;Write meaningful and useful unit tests while you are coding, not at the end of your development cycle. Testing should become second-nature and something that you are disturbed about not doing. Unit tests are your first line of proof that your functionality does what it is supposed to do. You should be writing tests for code you are adding or modifying as well as adding tests to improve the general stability of the project.&lt;/p&gt;&lt;h2&gt;Run Tests&lt;/h2&gt;&lt;p&gt;While developing and writing unit tests, you need to actually run your tests and any test suites in related areas, generally your project and projects that depend on it. You need to be sure that you have not broken anything in the project you are working on and that you have not broken anything in projects that depend on yours.&lt;/p&gt;&lt;h2&gt;Test Coverage&lt;/h2&gt;&lt;p&gt;Unit test coverage can provide a useful measure of the areas covered by your unit tests. It is not a fool-proof measurement, but it can point our areas of your code that should have additional tests. You need to be careful that you do not simply add tests to get good coverage numbers; you should view your coverage and ensure that the tests you add have value and are really testing the areas they cover.&lt;/p&gt;&lt;h2&gt;Code Analysis&lt;/h2&gt;&lt;p&gt;Code analysis tools can provide useful insight into style and structure issues, as well as potential bugs. Most IDEs provide some level of code analysis either directly or though the use of plugins. You should become familiar with the analysis tools you have available and run them on a regular basis, then take action based on the results.&lt;/p&gt;&lt;h2&gt;Update and Commit&lt;/h2&gt;&lt;p&gt;When you are working with other team members on a project, it is important that you all have up-to-date code so that you do not start to diverge away from each other. In general, during active development you should update your local workspace every morning and check in your code every evening.&lt;/p&gt;&lt;h2&gt;Never Break It&lt;/h2&gt;&lt;p&gt;Never check in code that is broken or has failing unit tests. This can disrupt the work of your fellow team members and pollute the branch. With your daily commits, you should ensure that you have not broken anything.&lt;/p&gt;&lt;h2&gt;Always Make it Better&lt;/h2&gt;&lt;p&gt;Always use the Boy Scout rule... leave the code you are working on in a better condition than when you found it. Brushing off &quot;bad code&quot; is not a valid excuse in general... if you are there and the fix is obvious, then fix it. If the fix is more complex or risky, then it should be noted and scheduled for rework. It should not be ignored.&lt;/p&gt;&lt;h2&gt;Ask Questions&lt;/h2&gt;&lt;p&gt;No developer works alone. Ask questions about specifications, design, existing code, etc... especially when you are in a codebase that is new to you. Too often, I have seen a feature go way off course simply because the developer made assumptions and did not bother to ask for clarification.&lt;/p&gt;&lt;h2&gt;Conclusions&lt;/h2&gt;&lt;p&gt;As with any guidelines, these can be broken or bent; however, you should have a good reason for doing so and be able to communicate it. More junior developers should take these as requirements, while more senior developers should have a bit more latitude since they &lt;em&gt;should&lt;/em&gt; have a better understanding of how their development affects the system as a whole, and they will probably already have most of these steps integrated into their development style in some form or another.&lt;/p&gt;&lt;p&gt;Also, I am not saying that these will work for everyone, they are just my suggestions... unless you work for me.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Simple Time Unit Conversion</title>
      <link>http://coffeaelectronica.com/blog/2012/simple-time-unit-conversion.html</link>
      <pubDate>Wed, 11 Apr 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2012/simple-time-unit-conversion.html</guid>
      <description>
      &lt;p&gt;Here&apos;s a quick tip I found recently. I am sure we have all done this or run into this while coding time duration values, most of which end up being milliseconds.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;long waitTime = 2 * 60 * 1000 // 2 minutes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or worse yet, you run into the less descriptive version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;long waitTime = 120000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Neither of these is wrong or even all that horrible considering the fact that generally you set these values and forget them; however, there is a clean way to do this that is also much more explicit using TimeUnit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;import java.util.concurrent.TimeUnit
long waitTime1 = TimeUnit.MILLISECONDS.convert( 2, TimeUnit.MINUTES )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which says, &quot;Give me 2 minutes, in milliseconds&quot;.&lt;/p&gt;&lt;p&gt;This allows you to have the expression of the units involved right in the code while making it trivial to change the value as needed without potential math errors (yes, I have seen missing zeros).&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>When GStrings Attack</title>
      <link>http://coffeaelectronica.com/blog/2012/when-gstrings-attack.html</link>
      <pubDate>Wed, 28 Mar 2012 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2012/when-gstrings-attack.html</guid>
      <description>
      &lt;p&gt;I have run into this behavior a few times now, so I decided to dig into it a bit. Basically, if you have a map using &quot;string&quot; keys in &lt;a href=&quot;http://groovy.codehaus.org&quot;&gt;Groovy&lt;/a&gt;, they can provide unexpected (or at least non-intuitive results).&lt;/p&gt;&lt;p&gt;Groovy has two object types of &quot;string&quot;... the standard Java String, which is denoted by single-quotes, and the dynamic GString, which is denoted by double-quotes _(Note: the current version of the documentation has a nice outline of &lt;a href=&quot;http://groovy.codehaus.org/Strings+and+GString&quot;&gt;Strings vs GStrings&lt;/a&gt;). From a developer perspective these generally seem interchangable other than the dynamic nature of GStrings; however, there is a more fundamental difference when you are working with hashes (Sets and Maps) since these are not the same class.&lt;/p&gt;&lt;p&gt;Let&apos;s consider the following two strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def str = &amp;#39;foo2&amp;#39;&amp;lt;br/&amp;gt;def gstr = &amp;quot;foo${1+1}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yes, the 1+1 is a bit contrived, but it&apos;s where the fun comes in. If you check them for equality:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;println( str == gstr )&amp;lt;br/&amp;gt;println( str.equals( gstr ) )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first line (==), will print &quot;true&quot;, while the second line (equals) will print &quot;false&quot;. But, wait, there&apos;s more...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;println( str.hashCode() == gstr.hashCode() )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will print &quot;false&quot;. They are two different instances of two different classes, lightly hidden by a layer of similarity. As a developer, you can get used to not thinking about the differences, especially when they are not always visible. Consider the case when both strings have the same non-dynamic content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def str = &amp;#39;foo2&amp;#39;
def gstr = &amp;quot;foo2&amp;quot;

println( str == gstr )
println( str.equals( gstr ))
println( str.hashCode() == gstr.hashCode() )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this scenario, all three lines print &quot;true&quot;. So really what it comes down to is the cases when there is actually dynamic content in the GString. These will be considered differently than a seemingly equivalent static string. This is can be a dangerous difference when working with maps:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def map = [:]
map.put( &amp;#39;foo2&amp;#39;, 1 )
map.put( &amp;quot;foo${1+1}&amp;quot; as String, 2 )
map.put( &amp;quot;foo${1+1}&amp;quot;, 3 )

println &amp;quot;map.size() -&amp;amp;gt; ${map.size()}&amp;quot;
map.each {k,v-&amp;gt; println &amp;quot;$k = $v&amp;quot; }

println map[&amp;#39;foo2&amp;#39;] // 2
println map[&amp;quot;foo2&amp;quot;] // 2
println map[&amp;quot;foo${1+1}&amp;quot;] // 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you add a similar string in three different ways (static string, GString cast as String, and GString), you will see that it results in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;map.size() -&amp;gt; 2
foo2 = 2
foo2 = 3
2
2
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You end up with two unique entries in the map, though only one of them is accessible directly.&lt;/p&gt;&lt;p&gt;I don&apos;t really feel that this is a bug in Groovy; however, more of an unexpected behavior that can play against what a developer might feel is intuitive (e.g. a string is a string). This is just something to beware of while developing in Groovy.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Home Server v2</title>
      <link>http://coffeaelectronica.com/blog/2011/home-server-v2.html</link>
      <pubDate>Sat, 15 Oct 2011 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2011/home-server-v2.html</guid>
      <description>
      &lt;p&gt;Since my &lt;a href=&quot;From-Junk-Box-to-Jukebox-in-a-Couple-Hours&quot;&gt;last home server&lt;/a&gt; was fried by a lightning storm a few months back,&lt;br/&gt;I have been serverless, which is an uncomfortable position for a server software developer. I did some good research and decided to try and put together a new box from scratch. My&lt;br/&gt;previous server was just a converted &quot;retired&quot; desktop box I had so this would be a fun project.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://lifehacker.com/&quot;&gt;Lifehacker&lt;/a&gt; put out a timely series of articles about how to build your own&lt;br/&gt;computer. It was an awesome introduction for someone like myself who had never done more than swap out some RAM or a&lt;br/&gt;hard drive. If you are a computer-build noob (like me), I would highly recommend giving the series a read&lt;br/&gt;(&lt;a href=&quot;http://lifehacker.com/5828747/how-to-build-a-computer-from-scratch-the-complete-guide&quot;&gt;How to Build a Computer from Scrath: A Complete Guide&lt;/a&gt;)&lt;br/&gt;if you are thinking of putting together your own box.&lt;/p&gt;&lt;p&gt;For my home server I had only a few requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Low power consumption - this is running at home, I don&apos;t want to overly-inflate my electrical bill.&lt;/li&gt;
  &lt;li&gt;Low price - this is a home server box for my projects and some helpful apps for my wife, it needs to be cheap.&lt;/li&gt;
  &lt;li&gt;Room to grow - something with some upgrade room would be nice&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;What I was able to put together fit all those criteria nicely:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.newegg.com/Product/Product.aspx?Item=N82E16811112219&quot;&gt;LIAN LI PC-A05NA Silver Aluminum ATX Mini Tower Computer Case&lt;/a&gt; - I had originally found a cheaper, smaller case; however, the Lifehacker article recommends some brands over others so I spent a few dollars more and I feel that it was worth it. The case has a lot of room for what I have and may want to add in the future. It also has great cooling and even looks nice.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.newegg.com/Product/Product.aspx?Item=N82E16817371035&quot;&gt;Antec EarthWatts EA-500D Green 500W ATX12V v2.3 / EPS12V 80 PLUS BRONZE Certified Active PFC Power Supply&lt;/a&gt; - Again, I had a cheaper one picked out but deferred to a Lifehacker-recommended brand. It&apos;s also a &quot;green&quot; model with greater power efficiency and enough available power to allow for future growth.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.newegg.com/Product/Product.aspx?Item=N82E16813121442&quot;&gt;Intel BOXD525MW Intel Atom D525@1.8GHz (Dual Core) BGA559 Intel NM10 Mini ITX Motherboard/CPU Combo&lt;/a&gt; - I decided to start with an Intel motherboard with an Atom processor for low power usage and I think it should be enough processor power for my needs (1.8 GHz dual core 64-bit)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.newegg.com/Product/Product.aspx?Item=N82E16820139033&amp;amp;cm_sp=Pers_InterAlsoBought-_-20-139-033_3_DM-_-13-121-442&amp;amp;nm_mc=AFC-C8Junction&amp;amp;cm_mmc=AFC-C8Junction-_-RSSDailyDeals-_-na-_-na&amp;amp;AID=10521304&amp;amp;PID=4165814&amp;amp;SID=2ixej4ic5pa5&quot;&gt;Kingston ValueRAM 4GB (2 x 2GB) 204-Pin DDR3 SO-DIMM DDR3 1066 (PC3 8500) Laptop Memory Model KVR1066D3SOK2/4GR&lt;/a&gt; - The supported max is 4GB, I bought 4GB.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.newegg.com/Product/Product.aspx?Item=N82E16822136195&amp;amp;nm_mc=AFC-C8Junction&amp;amp;cm_mmc=AFC-C8Junction-_-RSSDailyDeals-_-na-_-na&amp;amp;AID=10521304&amp;amp;PID=4165814&amp;amp;SID=ppu8hu6z3s&quot;&gt;Western Digital Caviar Blue WD800AAJS 80GB 7200 RPM 8MB Cache SATA 3.0Gb/s 3.5&quot; Internal Hard Drive -Bare Drive&lt;/a&gt; - Your standard Western Digital in the smallest size that I could find (80GB) without going into something too old. My storage requirements are small. I had originally wanted to get a SSD but that would have blown the cost up too much.&lt;/li&gt;
  &lt;li&gt;No optical drive, sound card, video card or network card; the latter three all being integrated on the motherboard, the optical drive was not necessary for a server like this.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I bought everything from &lt;a href=&quot;http://newegg.com/&quot;&gt;NewEgg&lt;/a&gt; for a grand total (with extra warranty and shipping) out of pocket of a hair over&lt;br/&gt;&lt;em&gt;$300&lt;/em&gt;. Not bad at all considering everything I looked at &quot;off the rack&quot; was at least $400, and usually had more or less&lt;br/&gt;than what I actually wanted. Maybe someone with more experience building systems could do better since there are probably&lt;br/&gt;areas I could have cut corners on where I played it safe.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/content/files/compbuild1.jpg&quot; alt=&quot;The components&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Once all the parts came in (the following week, damn they ship fast), I put everything together with the help of the&lt;br/&gt;Lifehacker articles. With a little help and guidance it was actually a pretty easy and mostly straight-forward process&lt;br/&gt;that took about three hours. Once everything was secured and wired together, I fired it up for the first time and was&lt;br/&gt;able to get into the BIOS; however, my hard drive was not being recognized. After trying different cables and then&lt;br/&gt;trying the drive in my desktop computer the only thing I can figure is that the drive was dead on arrival, great quality&lt;br/&gt;control WD! I ran out to BestBuy and bought another of the same drive (well the same brand but larger size) for&lt;br/&gt;basically the same price to test my theory and I was correct. Once the new drive was in place everything worked fine. I&lt;br/&gt;returned the dead drive to NewEgg and have gotten my refund with no problems.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/content/files/compbuild12.jpg&quot; alt=&quot;The completed build&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Next, I moved on to the OS. My server OS of choice is &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; so I downloaded the&lt;br/&gt;64-bit version of Ubuntu 11.04 and followed the instructions to create a USB installer... I have no optical drive,&lt;br/&gt;remember. It was down right simple and it booted from the stick with no problem and installed, as always, like a&lt;br/&gt;dream.&lt;/p&gt;&lt;p&gt;From there I basically followed along with my previous post to install my shared directories and the&lt;br/&gt;applications I wanted. It&apos;s been nice having a server up and running again.&lt;/p&gt;&lt;p&gt;I think in a couple years when it&apos;s&lt;br/&gt;time to upgrade my desktop, I will do a custom build. It&apos;s kind of fun and you get exactly what you want.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Determining Overlap Across Multiple Variables</title>
      <link>http://coffeaelectronica.com/blog/2011/overlap-ccross-multiple-variables.html</link>
      <pubDate>Mon, 5 Sep 2011 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2011/overlap-ccross-multiple-variables.html</guid>
      <description>
      &lt;p&gt;I have run into two cases now where I have needed to validate that no overlap exists for data across three axes of&lt;br/&gt;comparison, each with potentially large value-spaces containing single values and/or ranges of values. An example of&lt;br/&gt;such a comparison could be something like a filter rule used to find People based on demographic data.&lt;/p&gt;&lt;p&gt;Say we have a search rule to find males between 15 and 25 years old who weigh 200 to 300 pounds.&lt;br/&gt;You could have something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;People A
Ages: 15-25
Gender: M
Weight: 200-300
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now consider the case when you have other search rules in the same search and that for the sake of efficiency we want to&lt;br/&gt;find overlapping rules and merge them into one (we will only consider the overlap determination here). With two other&lt;br/&gt;rules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;People B
Ages: 13-20
Gender: M
Weight: 250-400

People C
Ages: 8-10
Gender: M
Weight: 200-300
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s not hard to look at the rules and determine which ones overlap. &quot;People A&quot; overlaps with &quot;People B&quot;, while &quot;People C&quot;&lt;br/&gt;does not overlap with either of the other two. Programmatically this can be a difficult comparison to do correctly and&lt;br/&gt;efficiently. Also, as your number of comparison axes increases, so does the complexity of determining overlap for any given&lt;br/&gt;pair of objects.&lt;/p&gt;&lt;p&gt;What is needed is a simple means of determining the overlap of two objects and the best way I have found to do that is to&lt;br/&gt;break each object down into its overlap-comparison components, each of which I will call a &quot;Lobe&quot; from here on out. I chose&lt;br/&gt;the term lobe because it is defined as:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&quot;any rounded projection forming part of a larger structure&quot;&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Also, terms like element and node are used far too much already in programming.&lt;/p&gt;&lt;p&gt;When you break each object down into it&apos;s lobes, you will have one lobe for Gender, one for Ages, and one for weights. Now&lt;br/&gt;you can build your overlap determination based on whether or not each lobe overlaps with its corresponding lobe on the&lt;br/&gt;other object. If all of the lobes overlap those of the other object, then the two objects are considered overlapping,&lt;br/&gt;otherwise they are not. This allows for a fail-fast comparison since if the comparison of any given lobe fails, you cannot&lt;br/&gt;have an overlapping object and no further comparison is necessary.&lt;br/&gt;&lt;br/&gt;Programmatically a lobe can be defined by interface as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;interface Lobe {
    boolean overlaps( Lobe other )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each lobe implementation defines what it means to overlap another Lobe of the same type. Using Groovy and some&lt;br/&gt;generic logic we can easily come up with a&lt;br/&gt;&lt;a href=&quot;http://github.com/cjstehno/overlap/blob/master/src/main/groovy/com/stehno/overlap/ComparableLobe.groovy&quot;&gt;ComparableLobe&lt;/a&gt;&lt;br/&gt;which is based on single values and ranges of Comparable objects such as numbers, strings and ranges. This allows us to&lt;br/&gt;do things like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;new ComparableLobe( 10..20, 50, 75 )
new ComparableLobe( &amp;#39;a&amp;#39;, &amp;#39;h&amp;#39;..&amp;#39;j&amp;#39;, &amp;#39;m&amp;#39; )

lobeA.overlaps( lobeB )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which can make the overlap determination very flexible.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; All of the source code from this article is available in my &lt;a href=&quot;http://github.com/&quot;&gt;GitHub&lt;/a&gt; repo called &lt;a href=&quot;http://github.com/cjstehno/overlap&quot;&gt;Overlap&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Now we can create Lobes for each of the overlap-comparable parts of our People, using &quot;People A&quot; as an&lt;br/&gt;example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def genderLobe = new ComparableLobe( &amp;#39;M&amp;#39; )
def agesLobe = new ComparableLobe( 15..25 )
def weightsLobe = new ComparableLobe( 200..300 )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next thing we need is a way of comparing these lobes in a simple and repeatable manner and that&apos;s where the&lt;br/&gt;&lt;a href=&quot;http://github.com/cjstehno/overlap/blob/master/src/main/groovy/com/stehno/overlap/Overlappable.groovy&quot;&gt;Overlappable&lt;/a&gt; interface&lt;br/&gt;comes in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;interface Overlappable {
    boolean overlaps ( Overlappable other )
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Overlappable interface defines an object that can be compared for overlap. The required method is basically the&lt;br/&gt;same as that of the Lobe; however, this interface is for the parent object itself. By providing an abstract&lt;br/&gt;implementation of this interface we have a nice clean way of providing overlap detection functionality for an object&lt;br/&gt;type. The &lt;a href=&quot;http://github.com/cjstehno/overlap/blob/master/src/main/groovy/com/stehno/overlap/AbstractOverlappable.groovy&quot;&gt;AbstractOverlappable&lt;/a&gt;&lt;br/&gt;provides an implementation of the overlaps() method using the OverlapBuilder, which we will talk about in a minute. What&lt;br/&gt;the abstract class also provides is a simple way of emitting the Lobes for the given object in a simple manner, as an&lt;br/&gt;array. You can use this with our example above to create a simple Overlappable Person object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class People extends AbstractOverlappable {
    String gender
    IntRange ages
    IntRange weights

    @Override Lobe[] lobes() {
        [
            new ComparableLobe(gender),
            new ComparableLobe(ages),
            new ComparableLobe(weights)
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The overlaps() method uses the provided Lobes to popualte an&lt;br/&gt;&lt;a href=&quot;http://github.com/cjstehno/overlap/blob/master/src/main/groovy/com/stehno/overlap/OverlapBuilder.groovy&quot;&gt;OverlapBuilder&lt;/a&gt;,&lt;br/&gt;which is basically a helper class for performing the actual Lobe-to-Lobe comparison of a given set of Lobes. The&lt;br/&gt;OverlapBuilder is inspired by the builder in the Apache Commons - Lang API, such as EqualsBuilder and HashCodeBuilder.&lt;br/&gt;You create an instance and append your Lobes to it, then execute the overlap() method to perform the comparison.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;new OverlapBuilder()
    .appendLobe(new ComparableLobe(1..10), new ComparableLobe(5..15))
    .overlap()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It also provides an append method for simple comparable cases:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;overlapBuilder.appendComparable( 20..25, 15..30 )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which just wraps each value in a &lt;code&gt;ComparableLobe&lt;/code&gt;. Now, given a list of People objects, you can determine if any&lt;br/&gt;of them overlap any of the others simply by iterating over the list and comparing each element with the&lt;br/&gt;others:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def list = [
    new Person( gender:&amp;#39;M&amp;#39;, ages:15..25, weights:200..300 ),
    new Person( gender:&amp;#39;M&amp;#39;, ages:13..20, weights:250..400 ),
    new Person( gender:&amp;#39;M&amp;#39;, ages:8..10, weights:200..300 )
]

list[0..-2].eachWithIndex { self, idx-&amp;gt;
    list[(idx+1)..(-1)].each { other-&amp;gt;
        if( self.overlaps( other ) ){
            println &amp;quot;$self overlaps $other&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As a final little bonus feature, I have added a &lt;code&gt;ComparableLobe.ANY&lt;/code&gt; object which denotes a Lobe that will always be&lt;br/&gt;considered to overlap, no matter what the other value is.&lt;/p&gt;&lt;p&gt;This kind of multi-variable overlap-checking scenario may not come up all that often, but when it does, it can give you&lt;br/&gt;a lot of grief, especially if the fields being compared are numerous and complex. I have had to create a couple&lt;br/&gt;additional Lobe implementations but am also using the &lt;code&gt;ComparableLobe&lt;/code&gt; quite a bit. This library has been a real&lt;br/&gt;time-saver. And, once broken down into component parts, the overlap determination becomes simple to implement and test,&lt;br/&gt;which makes it much more stable over time.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Adding Icons to your Links</title>
      <link>http://coffeaelectronica.com/blog/2011/adding-icons-to-your-links.html</link>
      <pubDate>Wed, 9 Feb 2011 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2011/adding-icons-to-your-links.html</guid>
      <description>
      &lt;p&gt;I have started working on a new browser start page for myself and thought it would be nice to have the favicon images for the links I add to the page. Obviously, you could just download them and render them next to the link by brute force, but then you&apos;d have to do that for every link you added... a big waste of time.&lt;/p&gt;&lt;p&gt;I thought about it for a few minutes and came up with an automated solution that works pretty well. You know the path to the favicon for a given url; it&apos;s just thesite.com/favicon.ico, though there are ways to change this that I am not&lt;br/&gt;accounting for. With a little JQuery JavaScripting you can pull the icon from the link itself. First, we need to style&lt;br/&gt;the external anchor tags in preparation for the icon:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;a[href^=&amp;quot;http://&amp;quot;]{
    background-repeat:no-repeat;
    background-position:left;
    padding-left:17px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will cause all anchor tags with an href starting with &quot;http://&quot; (external) to be left-padded and have some&lt;br/&gt;additional background configuration. This basically adds a blank spot for the icon. Now we need some JavaScript to pull&lt;br/&gt;the icon for the link:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;jQuery(function(){
    $(&amp;#39;a[href^=&amp;quot;http&amp;quot;]&amp;#39;).each(function(it){
        var url = $(this).attr(&amp;#39;href&amp;#39;);
        var slashIndex = url.indexOf(&amp;#39;/&amp;#39;,7);
        if( slashIndex != -1 ){
            url = url.substring(0, slashIndex);
        }

        $(this).css(&amp;#39;background-image&amp;#39;,&amp;quot;url(&amp;#39;&amp;quot; + url + &amp;quot;/favicon.ico&amp;#39;)&amp;quot;);
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using JQuery, I find each of the external anchor tags, and ignoring the path part of the url, I set the&lt;br/&gt;&quot;background-image&quot; property of the anchor to be the favicon url. And that&apos;s it. Below is the full example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;
        &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
            a[href^=&amp;quot;http://&amp;quot;]{
                background-repeat:no-repeat;
                background-position:left;
                padding-left:17px;
            }
        &amp;lt;/style&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.5.0/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            jQuery(function(){
                $(&amp;#39;a[href^=&amp;quot;http&amp;quot;]&amp;#39;).each(function(it){
                    var url = $(this).attr(&amp;#39;href&amp;#39;);
                    var slashIndex = url.indexOf(&amp;#39;/&amp;#39;,7);
                    if( slashIndex != -1 ){
                        url = url.substring(0, slashIndex);
                    }

                    $(this).css(&amp;#39;background-image&amp;#39;,&amp;quot;url(&amp;#39;&amp;quot; + url + &amp;quot;/favicon.ico&amp;#39;)&amp;quot;);
                });
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        This is some text surrounding &amp;lt;a href=&amp;quot;http://jqueryui.com&amp;quot;&amp;gt;JQuery UI&amp;lt;/a&amp;gt; the link I am playing with.
        Also I will add another link &amp;lt;a href=&amp;quot;http://google.com&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt;.
        More &amp;lt;a href=&amp;quot;http://jqueryui.com/demos/&amp;quot;&amp;gt;Demos&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;
        Local links like &amp;lt;a href=&amp;quot;local.html&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt; will be unchanged.
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you render this example, you will get something like the following image. href-icons.png I am sure there are&lt;br/&gt;tweaks that could be done and other scenarios to consider, but this is an interesting starting point.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Tour de Mock 5 - Groovy</title>
      <link>http://coffeaelectronica.com/blog/2010/tour-de-mock-5.html</link>
      <pubDate>Fri, 29 Oct 2010 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2010/tour-de-mock-5.html</guid>
      <description>
      &lt;p&gt;I decided to add another post to my series of mocking comparisons. I have been working a lot with &lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt;&lt;br/&gt;and felt that it would make an interesting addition considering the language provides a rich mocking ability without any additional libraries required.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;@Before&lt;/code&gt; method shows the flexibility of Groovy right away with the mocking of the service interface as well as the&lt;br/&gt;&lt;code&gt;ServletContext&lt;/code&gt; and &lt;code&gt;ServletConfig&lt;/code&gt; interfaces:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Before
void before(){
    emailListService = [
        getListByName:{ name-&amp;gt;
            if( &amp;#39;foolist&amp;#39; == name ){ return LIST }
            throw new IOException()
        }
    ] as EmailListService

    def servletContext = [
        getAttribute:{ key-&amp;gt;
            assertEquals EmailListService.KEY, key
            emailListService
        }
    ] as ServletContext

    def servletConfig = [ getServletContext:{servletContext} ] as ServletConfig

    emailListServlet = new EmailListServlet()
    emailListServlet.init servletConfig
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Groovy allows you to take a map of closures keyed with the method name and cast it as an instance of an interface,&lt;br/&gt;basically built-in mocking. The first test is where we test the doGet method with no listName parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Test(expected=IOException.class)
void doGet_without_list(){
    def request = [
        getParameter:{ pname-&amp;gt;
            assertEquals &amp;#39;listName&amp;#39;, pname
            null
        }
    ] as HttpServletRequest

    emailListServlet.doGet request, [] as HttpServletResponse
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you don&apos;t use Groovy much, these mocked instances may seem less readable than some of the other mocking APIs;&lt;br/&gt;however, with a little practice you can really see the broad scope of mocking capabilities it has. The test with&lt;br/&gt;listName data shows a successful result:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Test
void doGet_with_list(){
    def request = [
        getParameter:{ pname-&amp;gt;
            assertEquals &amp;#39;listName&amp;#39;, pname
            &amp;#39;foolist&amp;#39;
        }
    ] as HttpServletRequest

    def outcalls = [].addAll( LIST )
    PrintWriter.metaClass.println = { out-&amp;gt; assertEquals outcalls.remove(0), out }

    def response = [ getWriter:{ new PrintWriter(new StringWriter()) } ] as HttpServletResponse

    emailListServlet.doGet request, response
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where we can also see the generally tricking mocking of the PrintWriter and its ordered sequence of calls. In this&lt;br/&gt;case you are working with simple code rather than any additional API functionality. The list of expected email strings&lt;br/&gt;is provided in the order they are to be called and the mock PrintWriter verifies that the current call is the same as&lt;br/&gt;the next expected value. The whole test case is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package com.stehno.mockery;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse
import static junit.framework.Assert.*
import org.junit.After
import org.junit.Test
import org.junit.Before
import com.stehno.mockery.service.EmailListService

class EmailListServlet_GroovyMockTest {
    private def LIST = [&amp;#39;larry@stooge.com&amp;#39;,&amp;#39;moe@stooge.com&amp;#39;,&amp;#39;curley@stooge.com&amp;#39;]
    private def emailListServlet
    private def emailListService

    @Before void before(){
        emailListService = [
            getListByName:{ name-&amp;gt;
                if( &amp;#39;foolist&amp;#39; == name ){ return LIST }
                throw new IOException()
            }
        ] as EmailListService

        def servletContext = [
            getAttribute:{ key-&amp;gt;
                assertEquals EmailListService.KEY, key
                emailListService
            }
        ] as ServletContext

        def servletConfig = [ getServletContext:{servletContext} ] as ServletConfig

        emailListServlet = new EmailListServlet()
        emailListServlet.init servletConfig
    }

    @Test(expected=IOException.class) void doGet_without_list(){
        def request = [
            getParameter:{ pname-&amp;gt;
                assertEquals &amp;#39;listName&amp;#39;, pname
                null
            }
        ] as HttpServletRequest

        emailListServlet.doGet request, [] as HttpServletResponse
    }

    @Test void doGet_with_list(){
        def request = [
            getParameter:{ pname-&amp;gt;
                assertEquals &amp;#39;listName&amp;#39;, pname
                &amp;#39;foolist&amp;#39;
            }
        ] as HttpServletRequest

        def outcalls = [].addAll( LIST )
        PrintWriter.metaClass.println = { out-&amp;gt; assertEquals outcalls.remove(0), out }

        def response = [ getWriter:{ new PrintWriter(new StringWriter()) } ] as HttpServletResponse

        emailListServlet.doGet request, response
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I found Groovy to be a very useful mocking tool and would recommend it, especially if you are already using Groovy in your&lt;br/&gt;project. Beyond this basic functionality there are also some mocking APIs written for Groovy that add additional&lt;br/&gt;features or provide simpler mocking capabilities.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can find the source code used in this posting in my &lt;a href=&quot;http://github.com/cjstehno/coffeaelectronica/tree/master/tourdemock&quot;&gt;TourDeMock&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Java and IPv6</title>
      <link>http://coffeaelectronica.com/blog/2010/java-and-ipv6.html</link>
      <pubDate>Sun, 24 Oct 2010 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2010/java-and-ipv6.html</guid>
      <description>
      &lt;p&gt;In case you have not run into it yet, &lt;a href=&quot;http://en.wikipedia.org/wiki/IPv6&quot;&gt;IPv6&lt;/a&gt; is creeping into our lives. Recently I&lt;br/&gt;had to work on functionality that had to support the storing of both IPv4 and IPv6 in a database record... and it&apos;s&lt;br/&gt;actually pretty easy.&lt;/p&gt;&lt;p&gt;Let&apos;s say we have tow IP addresses, one of each type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;157.166.224.26
1080:0:0:0:8:800:200C:417A
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first thing we need to do is parse the string values into &lt;code&gt;java.net.InetAddress&lt;/code&gt; objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;InetAddress inet = InetAddress.getByName( ipstr );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which works in either case. From there you may want to determine which type of address you are working with. The only way&lt;br/&gt;that I found (though I didn&apos;t spend all that long) was to do an instance check:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;if( inet instanceof Inet6Address ){
    // you have an IPv6 address
} else if( inet instanceof Inet4Address ){
    // you have an IPv4 address
} else {
    // I dont know what you have
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From there you will need to convert the InetAddress object into bytes for storage. You could store the addresses as&lt;br/&gt;strings, but you end up more dependant on hacky format recognition tricks, and the byte conversion is nice and pre-built&lt;br/&gt;for you:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;byte[] bytes = inet.getAddress();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you are ready to store the address in the database. Without going into all the db-related code you end up with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;statement.setBytes( 1, bytes );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could just as easily write the bytes to an output stream or other storage format. Once you have the address stored&lt;br/&gt;somewhere, you need to pull it out again. First you need to read the bytes from your storage location. Assuming a database,&lt;br/&gt;you get something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;byte[] inbytes = resultSet.getBytes( 1 );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With these bytes you can create an InetAddress again,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;InetAddress inetIn = InetAddress.getByAddress( inbytes );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;From there, a nice &lt;code&gt;getHostAddress()&lt;/code&gt; call will get you your formatted IP address string, for both IPv4 and&lt;br/&gt;IPv6. Notice there is no code specific to either type. The instance checking is only required if you want to know&lt;br/&gt;specifically which type you have... and there may be a better way to do that, I didn&apos;t come across one. One oddity I&lt;br/&gt;found is that IPv4 addresses mapped to IPv6 addresses can get a little strange depending on how your application handles&lt;br/&gt;them; the InetAddress class parses them fine, but converts them to IPv4 addresses rather than noting that they are&lt;br/&gt;mapped addresses. Not a big deal, but something to keep in mind.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>From Junk Box to Jukebox in a Couple Hours</title>
      <link>http://coffeaelectronica.com/blog/2010/from-junk-box-to-jukebox.html</link>
      <pubDate>Sun, 17 Oct 2010 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2010/from-junk-box-to-jukebox.html</guid>
      <description>
      &lt;p&gt;I finally got tired of griping about not having enough space on my phone to store all of my music, and not wanting to&lt;br/&gt;pay for one of the music cloud storage services... so I decided to bite the bullet and setup my own using&lt;br/&gt;&lt;a href=&quot;http://ubuntu.com/&quot;&gt;Ubuntu Server&lt;/a&gt;, &lt;a href=&quot;http://subsonic.org/&quot;&gt;SubSonic Music Streamer&lt;/a&gt; and its&lt;br/&gt;Android app. It only took a couple hours, most of which was baby-sitting installations, and now I am able to listen to&lt;br/&gt;any/all of my music whenever and wherever I want; it&apos;s quite nice.&lt;/p&gt;&lt;p&gt;The steps are pretty straight forward, but going into this process I must make it clear that I am not an expert network/server administrator,&lt;br/&gt;I am a developer, therefore if this process causes you or your equipment any harm in any way, sorry, but it&apos;s not my&lt;br/&gt;fault. Continue at your own risk.&lt;/p&gt;&lt;p&gt;First, you need a computer to work with. I had an old Dell desktop that is about four or five years old and it is working nicely.&lt;br/&gt;Hook up a keyboard, mouse and monitor to the box... if it&apos;s an&lt;br/&gt;old desktop box you should have all the connections you need. You will also need to connect the box to your&lt;br/&gt;network.&lt;/p&gt;&lt;p&gt;It almost goes without saying that you will need internet access of at least DSL, but really I would not do this with&lt;br/&gt;anything less than a high-speed cable internet connection.&lt;/p&gt;&lt;p&gt;Download &lt;a href=&quot;http://www.ubuntu.com/server&quot;&gt;Ubuntu 10.10 Server&lt;/a&gt; (or whatever the most current version is when&lt;br/&gt;you read this). Make sure that you are downloading the server version, &lt;em&gt;not&lt;/em&gt; the desktop. Also make sure that you&lt;br/&gt;download the appropriate version for your system, 32- or 64-bit. I had to use 32-bit since it was an old desktop&lt;br/&gt;box.&lt;/p&gt;&lt;p&gt;Burn the .iso file you downloaded to a CD (I recommend &lt;a href=&quot;http://www.imgburn.com/&quot;&gt;ImgBurn&lt;/a&gt; if&lt;br/&gt;you don&apos;t have a favorite image buring application).&lt;/p&gt;&lt;p&gt;Once you have the CD created, pop it into the box you are&lt;br/&gt;building and boot from it. You may have to fiddle with your boot order in your bios, but the CD is bootable. Once the&lt;br/&gt;Ubuntu installation menu comes up, just follow the instructions.&lt;/p&gt;&lt;p&gt;A couple items to be aware of: You will want&lt;br/&gt;to enable the automatic security updates so that you don&apos;t have to bother with it yourself. Also, you will come to a&lt;br/&gt;server installation screen (after the restart I think)... at this point I selected LAMP server, Tomcat server and&lt;br/&gt;OpenSSH server. The SSH server is required for this, though the others are not; I plan on adding more to this box so I&lt;br/&gt;wanted to have the servers ready to go.&lt;/p&gt;&lt;p&gt;Once the installation is done, disconnect the keyboard, mouse and&lt;br/&gt;monitor, but leave the box running. You now have a nice clean Linux web server to play with. I recommend giving the new&lt;br/&gt;server box a dedicated IP address on your network so that you don&apos;t need to keep track of it. This is gererally very&lt;br/&gt;specific to your router, so I can&apos;t really go into it here.&lt;/p&gt;&lt;p&gt;From your desktop box, laptop, whatever, connect to&lt;br/&gt;the new server using your favorite SSH client (for windows you can use &lt;a href=&quot;http://cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; or&lt;br/&gt;&lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;Putty&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;All of my music is on a NAS on my&lt;br/&gt;local network, so I had to create a mount of the music directory on the server box. There is a nice wiki article about&lt;br/&gt;how to do this, &lt;a href=&quot;https://wiki.ubuntu.com/MountWindowsSharesPermanently&quot;&gt;Mount Windows Shares Permanently&lt;/a&gt; so&lt;br/&gt;that&apos;s easy enough.&lt;/p&gt;&lt;p&gt;Now download the deb installer file from &lt;a href=&quot;http://www.subsonic.org/&quot;&gt;SubSonic&lt;/a&gt; and follow the installation&lt;br/&gt;instructions. There are also some additional packages they recommend installing. I did. I eventually want to have&lt;br/&gt;SubSonic use the default servers on the box, but this installation method seemed to be the fastest one to get a server&lt;br/&gt;up and running.&lt;/p&gt;&lt;p&gt;Once you have SubSonic installed you will need to create a directory for your playlists,&lt;br/&gt;&quot;/var/playlists&quot; by default. Now that the server is running, go ahead and login and change the admin password and set&lt;br/&gt;the music and playlist locations. I created a second user to user for myself that did not have admin permissions. Make&lt;br/&gt;sure that you can see a list of your music artists down the left hand side and you are ready to go... at least for&lt;br/&gt;access on your own network.&lt;/p&gt;&lt;p&gt;In order to have access to SubSonic from the outside world, you need to setup port forwarding on your router to map one&lt;br/&gt;of the external ports to the server and port that your SubSonic instance is running on. Again, this is router-specific,&lt;br/&gt;but &lt;a href=&quot;http://lifehacker.com/&quot;&gt;Lifehacker&lt;/a&gt; has a good overview in the article &quot;&lt;a href=&quot;http://lifehacker.com/127276/geek-to-live--how-to-access-a-home-server-behind-a-routerfirewall&quot;&gt;How to Access a Home Server Behind a Router Firewall&lt;/a&gt;&quot;.&lt;/p&gt;&lt;p&gt;Once you have access from the outside world, you can&lt;br/&gt;install the Android or iPhone apps for SubSonic and play your music while you are away from home. The Android app is&lt;br/&gt;quite good. I created two profiles, one for home when I can use my local wireless network, and another for access when I&lt;br/&gt;am away from my network... helps to keep the bandwidth down. Using the phone is also a nice way to test out the external&lt;br/&gt;interface. Turn off your wifi antenna and connect via 3G.&lt;/p&gt;&lt;p&gt;One concern I have about running my own server is&lt;br/&gt;power consumption. The box I am using was a desktop box and not really made to conserve energy. I am looking into ways&lt;br/&gt;of setting up smart power usage, sleeping, etc, but that will come in another posting. For now I am going to test out&lt;br/&gt;the actual power consuption using one of those &lt;a href=&quot;http://www.thinkgeek.com/gadgets/travelpower/7657/&quot;&gt;Killawatt&lt;/a&gt; plug-in wattage meters so that I can see&lt;br/&gt;what I am doing to my monthly power bill. One thought I had is that if the power consumption is too high, I might look&lt;br/&gt;into building a really low-power box with an atom processor and solid-state drive or something else really bare bones&lt;br/&gt;and cheap. I have a few other projects in mind for this now that I have a server running, though I don&apos;t think I will be&lt;br/&gt;moving my blog hosting there any time soon, but you never know.&lt;/p&gt;&lt;p&gt;If any of this is too vague, please let me know&lt;br/&gt;and I can add more detail. This is intended for users with minimal Linux, networking, and hardware experience, but&lt;br/&gt;sometimes I take more for granted than I realize.&lt;/p&gt;&lt;p&gt;Good luck and have fun!&lt;/p&gt;&lt;h2&gt;Follow-up&lt;/h2&gt;&lt;p&gt;After about six days for power monitoring, the server used 6.38 kilowatt-hours of power. With a little groovy calculating:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def kwh = 6.38, kwhcost = 0.12
def duration /* days */ = (((time(&amp;#39;10/22/2010 06:54&amp;#39;) - time(&amp;#39;10/16/2010 10:10&amp;#39;)) / 1000) / 3600) / 24
def costPerDay = (kwh * kwhcost)/duration
def costPerMonth = costPerDay * 30
def time( d ){ new java.text.SimpleDateFormat(&amp;#39;MM/dd/yyyy HH:mm&amp;#39;).parse( d ).getTime()}
def money( m ){ new java.text.DecimalFormat(&amp;#39;$0.00&amp;#39;).format( m )}
println &amp;quot;${money(costPerDay)}/day ==&amp;gt; ${money(costPerMonth)}/month&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I found that the server uses roughly $0.13/day or $3.93/month on average based on the time duration I tested in which&lt;br/&gt;the server was under normal usage. Obviously, this number is very dependent on the system you build your server with.&lt;br/&gt;Given some of the new Atom-based boxes that are available, you could probably really cut that cost down even more. If&lt;br/&gt;you consider that most hosting with any useful functionality is at least $3-5 per month, and a lot of the cloud-based&lt;br/&gt;services that are coming out are in the range of $5-10 per month... $3-5 per month for your own server with unlimited&lt;br/&gt;possibilities is not bad at all. Also there is one cost-cutting measure you can do with your own server that you&lt;br/&gt;cannot do with hosting... turn it off.&lt;/p&gt;&lt;p&gt;Finally, I also found a useful tool for working with the server. If you&lt;br/&gt;have an Android phone you can install &lt;a href=&quot;http://code.google.com/p/connectbot/&quot;&gt;ConnectBot&lt;/a&gt; which gives you SSH&lt;br/&gt;shell access to your server. I don&apos;t have my SSH port forwarded from the router so this only works inside my home&lt;br/&gt;network via wireless, but ConnectBot makes it very easy to check on the status of the box, do a shutdown or restart the&lt;br/&gt;web server without having to fire up your desktop box.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Finding Your Center</title>
      <link>http://coffeaelectronica.com/blog/2010/finding-your-center.html</link>
      <pubDate>Sat, 28 Aug 2010 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2010/finding-your-center.html</guid>
      <description>
      &lt;p&gt;Way back when I was in high school my typing teacher (yes, on a mechanical typewriter) taught us how to center blocks of text on a page. This has been a useful skill as I got into web development and programming as not everything has a built-in &quot;center&quot; alignment property.&lt;/p&gt;&lt;p&gt;I have never been asked how to do this, so it may be common knowledge, but I thought I would share anyway since I have not been blogging much. Basically, think about your viewing area as a page and what you are centering as a rectangle drawn on that page. Now fold that page in half and you will see that half of your rectangle is contained on half the page... makes sense. You are finding the horizontal position (x coordinate) of the left edge of your rectangle by subtracting half of its width from half the width of the page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = [page_width]/2 - [item_width]/2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or after a little simplification&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = ( [page_width] - [item_width] )/2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is exactly the same way you would center vertically. The equation from above expressed with more meaningful terms:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;y = ( [page_height] - [item_height] )/2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now to bring this into the Java world you can center a JFrame in the center of your monitor screen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Dimension frameSize = new Dimension(800,600);
Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
int x = (screenSize.width-frameSize.width)/2;
int y = (screenSize.height-frameSize.height)/2;
frame.setBounds( x, y, frameSize.width, frameSize.height );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not too bad at all, but it has always surprised me that Swing does not provide helper methods to center components inside of other components.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Sorting in JavaScript</title>
      <link>http://coffeaelectronica.com/blog/2010/sorting-in-javascript.html</link>
      <pubDate>Mon, 12 Apr 2010 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2010/sorting-in-javascript.html</guid>
      <description>
      &lt;p&gt;Every now and then you need to sort something in JavaScript and though, it&apos;s not all that hard to do, it is not the best-documented feature. Here is a quick little summary of how to do it.&lt;/p&gt;&lt;p&gt;You call the sort function of an array with your comparator. A JavaScript comparator is just a function that returns -1, 0, or 1 depending on whether a is less than b, a is equal to b, or a is greater than b:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;myarray.sort(function(a,b){
    if(a &amp;lt; b){
        return -1;
    } else if(a == b){
        return 0;
    } else { // a &amp;gt; b
        return 1;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is just an example, your function can base the comparison on whatever you want, but it needs to return -1,0,1. Say you had a set of custom JavaScript objects that you want sorted by age:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;var people = [{name:&amp;#39;Bob&amp;#39;,age:21}, {name:&amp;#39;Fred&amp;#39;,age:34}, {name:&amp;#39;Dan&amp;#39;,age:19}];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could easily sort them using&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;people.sort(function(a,b){
    if(a.age &amp;lt; b.age){
        return -1;
    } else if(a.age == b.age){
        return 0;
    } else { // a &amp;gt; b
        return 1;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not too hard to do. It&apos;s actually very similar to the Java &lt;code&gt;Comparator&lt;/code&gt; interface.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Collapsible Divs with JQuery</title>
      <link>http://coffeaelectronica.com/blog/2009/collapsible-div-with-jquery.html</link>
      <pubDate>Wed, 23 Dec 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/collapsible-div-with-jquery.html</guid>
      <description>
      &lt;p&gt;I coded up a nice little collapsible-group side bar thingy using &lt;a href=&quot;http://jquery.com/&quot;&gt;JQuery&lt;/a&gt; and it was surprisingly&lt;br/&gt;easy. Say you have a sidebar with collapsible group content such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;group&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;group-title&amp;quot;&amp;gt;Group A&amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;group-content&amp;quot;&amp;gt;This is where you would put the content for Group A.&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;group&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;group-title&amp;quot;&amp;gt;Group B&amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;group-content&amp;quot;&amp;gt;This is where you would put the content for Group B.&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;group&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;group-title&amp;quot;&amp;gt;Group C&amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;group-content&amp;quot;&amp;gt;This is where you would put the content for Group C.&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where you have group block titles and group content that you want to be able to toggle the visibility of. With a&lt;br/&gt;couple lines of JavaScript and JQuery it&apos;s a sinch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$(&amp;#39;div.group-title&amp;#39;).bind(&amp;#39;click&amp;#39;,function(evt){
    $(evt.target).parent().find(&amp;#39;.group-content&amp;#39;).slideToggle(500);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will be put inside an onload handler (also using JQuery). When the group title is clicked, the group-content&lt;br/&gt;block will toggle by sliding up or down in about half a second. With this model you can also place any number of these&lt;br/&gt;&quot;components&quot; on a page without the concern about event collision since the event handling is based on the click&lt;br/&gt;location. Add in a little CSS and you end up with:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/content/files/collapsable-div.png&quot; alt=&quot;Screen shot of div.&quot;&quot;/&gt;&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>If at First You Don't Succeed...</title>
      <link>http://coffeaelectronica.com/blog/2009/if-at-first-you-dont-succeed.html</link>
      <pubDate>Sun, 20 Dec 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/if-at-first-you-dont-succeed.html</guid>
      <description>
      &lt;p&gt;Sometimes you run into an operation that is a little on the flaky side and might sometimes fail on one execution&lt;br/&gt;but then work fine on the next; apart from fixing the underlying issue which may not be within your control, you can&lt;br/&gt;implement an operation retry strategy. With an operation retry strategy you attempt to execute an operation and then&lt;br/&gt;retry it if it fails. After a specified number of attempts (or under certain exceptions) you can allow the operation to&lt;br/&gt;fail gracefully. This gives you greater isolation of the questionable service while also allowing you more control what&lt;br/&gt;happens on a failure.&lt;/p&gt;&lt;p&gt;I have run into this issue a few years back with a twitchy SMTP server, and now again with a slightly-flaky database&lt;br/&gt;connection pool. Last time I wrote a very code-specific retry strategy (and like a doof, never blogged about it), but&lt;br/&gt;this time something more reusable is in order since this component would be used extensively throughout the code.&lt;/p&gt;&lt;p&gt;Basically the requirement is the ability to run a repeatable operation some number of times until it either succeeds or&lt;br/&gt;exceeds a specified number of attempts, at which point it will stop trying and fail. Since there are no closures in&lt;br/&gt;Java yet, I came up with a &lt;code&gt;Retriable&lt;/code&gt; interface with a single method which will execute the operation and return it&apos;s&lt;br/&gt;return value if there is one.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public interface Retriable&amp;lt;T&amp;gt; {
    public T execute() throws Exception;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I had originally considered using &lt;code&gt;java.lang.Runnable&lt;/code&gt;; however, a return value simplifies cases where you&lt;br/&gt;are trying to extract some value from the operation. Similarly I considered the &lt;code&gt;org.apache.commons.lang.Closure&lt;/code&gt;&lt;br/&gt;class and discarded if for the same reason.&lt;/p&gt;&lt;p&gt;The retry logic itself is pretty straight-forward. The failure condition is based on exceptions thrown by the operation&lt;br/&gt;execution. If an execption is thrown that is not contained in the &quot;catchAndThrow&quot; list, the counter will be incremented and the operation will be tried again if the max number of&lt;br/&gt;tries has not been exceeded. The &quot;catchAndThrow&quot; list is an array of Exception classes which if caught are to be thrown&lt;br/&gt;out of the handler rather than initiating a retry. This allows some desired exceptions to be handled by the calling&lt;br/&gt;method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public &amp;lt;T&amp;gt; T execute( final Retriable&amp;lt;T&amp;gt; op ) throws Exception {
    boolean retry = true;
    int count = 0;
    do {
        try {
            return op.execute();
        } catch(final Exception e) {
            if( ArrayUtils.contains(catchAndThrow, e.getClass()) ) throw e;

            retry = ++count &amp;lt; maxRetries;

            if(log.isWarnEnabled() &amp;amp;&amp;amp; !retry) {
                log.warn(&amp;quot;RetriesFailed[&amp;quot; + op.getClass().getName() + &amp;quot;]: &amp;quot; + e.getMessage(), e);
            }
        }
    } while( retry );

    throw new MaxRetriesExceededException(maxRetries,op.getClass().getName());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will notice that if all the retries fail, a &lt;code&gt;MaxRetriesExceededException&lt;/code&gt; is thrown. This allows calling&lt;br/&gt;methods to catch and handle the case when total failure occurs in a method-specific manner.&lt;/p&gt;&lt;p&gt;A more advanced retry strategy could also be derived from this where the failure condition is based on an injected&lt;br/&gt;object (ala strategy pattern) so that other criteria could be used to determine success and failure. The exception catch&lt;br/&gt;and throw filter could also be enhanced in this manner.&lt;br/&gt;&lt;br/&gt;The retry object itself, which I have called&lt;br/&gt;the &lt;code&gt;Retrier&lt;/code&gt; is a reusable thread-safe POJO so it can be configured via dependency injection (Spring) and used for any&lt;br/&gt;number of &lt;code&gt;Retriable&lt;/code&gt; operations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;quot;retrier&amp;quot; class=&amp;quot;retry.Retrier&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;maxRetries&amp;quot; value=&amp;quot;3&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;catchAndThrow&amp;quot;&amp;gt;
        &amp;lt;list&amp;gt;
            &amp;lt;value&amp;gt;java.lang.NullPointerException&amp;lt;/value&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What you end up with is a very clean way to perform retiable logic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final long id = someBeanId;
final String criteria = searchCriteria;

SomeBean resultBean = retrier.execute( new Retriable&amp;lt;SomeBean&amp;gt;(){
    public SomeBean execute() throws Exception {
        return searchDao.findBean(id,criteria);
    }
} );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this sample code a searchDao is being called in a retriable manner using parameters from the calling method. As&lt;br/&gt;long as parameters are final they can be passed into the anonymous inner class craeted by the inline creation of the&lt;br/&gt;&lt;code&gt;Retriable&lt;/code&gt;. You will also see that with the use of generics you get a seamless integration of the retiable&lt;br/&gt;operation into your code.&lt;/p&gt;&lt;h2&gt;Slightly Different Approach&lt;/h2&gt;&lt;p&gt;After a bit more thought, I came up with a slightly different approach to the retry execution method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public &amp;lt;T&amp;gt; T execute( final Retriable&amp;lt;T&amp;gt; op ) throws Exception {
    for(int r=0; r&amp;lt;maxRetries; r++){
        try {
            return op.execute();
        } catch(final Exception e) {
            if( ArrayUtils.contains(catchAndThrow, e.getClass()) ) throw e;

            if(log.isWarnEnabled()){
                log.warn(&amp;quot;RetryCaughtException[&amp;quot; + r + &amp;quot;]: &amp;quot; + e.getMessage());
            }
        }
    }

    if(log.isWarnEnabled()) {
        log.warn(&amp;quot;RetriesFailed: &amp;quot; + op.getClass().getName());
    }

    throw new MaxRetriesExceededException(maxRetries,op.getClass().getName());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This approach does not rely on the boolean to end the loop. If an exception is thrown it will try again until a&lt;br/&gt;return value is returned or the retry count has been exceeded. With this approach you only fall out of the loop on a&lt;br/&gt;retry exceeded condition, hence the logging and the thrown exception. This feels a little cleaner than the other&lt;br/&gt;approach. I have not run it through the unit testing so, you might do that first if you intend to use this code.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I have added this code to my &lt;a href=&quot;https://github.com/cjstehno/codeperks&quot;&gt;CodePerks&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>XML Serialization</title>
      <link>http://coffeaelectronica.com/blog/2009/xml-serialization.html</link>
      <pubDate>Fri, 27 Nov 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/xml-serialization.html</guid>
      <description>
      &lt;p&gt;Another pair of those seemingly forgotten classes in the core Java API are the &lt;code&gt;java.beans.XMLEncoder&lt;/code&gt; and &lt;code&gt;java.beans.XMLDecoder&lt;/code&gt;. Added in 1.4, they don&apos;t really seem to be used all that much, that I have come across anyway. It seems that whenever someone needs to convert objects into xml, they instantly reach for 3rd-party libraries rather than looking in the core API. Not to downplay other APIs, but I do think XMLEncoder and XMLDecoder deserve consideration, especially when you simply need to export data objects in a simple and repeatable manner.&lt;/p&gt;&lt;p&gt;First off, we need something to work with, how about a nice Person class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Person {
    private String firstName, lastName;
    private short age;

    public Person(){ super(); }

    public Person(final String firstName, final String lastName, final short age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    public String getFirstName() { return firstName; }

    public void setFirstName(final String firstName) { this.firstName = firstName; }

    public String getLastName() { return lastName; }

    public void setLastName(final String lastName) { this.lastName = lastName; }

    public short getAge() { return age; }

    public void setAge(final short age) { this.age = age; }

    @Override
    public String toString() { return firstName+&amp;quot; &amp;quot;+lastName+&amp;quot; (&amp;quot;+age+&amp;quot;)&amp;quot;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s nothing special, just first name, last name and age with getters and setters. I also overrode the &lt;code&gt;toString()&lt;/code&gt; method so we can get something useful from it. Now say you are in a situation where you need to quickly convert objects of the Person class to a format usable by another client (maybe another programming language); as much trouble as XML can be a times, it is still a good interoperability choice. Converting a collection of Person objects to XML is trivial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final Collection&amp;lt;Person&amp;gt; people = new LinkedList&amp;lt;Person&amp;gt;();
people.add( new Person(&amp;quot;Joe&amp;quot;,&amp;quot;Smith&amp;quot;,(short) 32) );
people.add( new Person(&amp;quot;Abe&amp;quot;,&amp;quot;Ableman&amp;quot;,(short) 54) );
people.add( new Person(&amp;quot;Cindy&amp;quot;,&amp;quot;Lindy&amp;quot;,(short) 42) );

final XMLEncoder encoder = new XMLEncoder( outputStream );
encoder.writeObject(people);
encoder.close();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which will generate the following XML in the given output stream:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;java version=&amp;quot;1.6.0_13&amp;quot; class=&amp;quot;java.beans.XMLDecoder&amp;quot;&amp;gt;
    &amp;lt;object class=&amp;quot;java.util.LinkedList&amp;quot;&amp;gt;
        &amp;lt;void method=&amp;quot;add&amp;quot;&amp;gt;
            &amp;lt;object class=&amp;quot;foo.Person&amp;quot;&amp;gt;&amp;lt;void property=&amp;quot;age&amp;quot;&amp;gt;&amp;lt;short&amp;gt;32&amp;lt;/short&amp;gt;&amp;lt;/void&amp;gt;
                &amp;lt;void property=&amp;quot;firstName&amp;quot;&amp;gt;&amp;lt;string&amp;gt;Joe&amp;lt;/string&amp;gt;&amp;lt;/void&amp;gt;
                &amp;lt;void property=&amp;quot;lastName&amp;quot;&amp;gt;&amp;lt;string&amp;gt;Smith&amp;lt;/string&amp;gt;&amp;lt;/void&amp;gt;
            &amp;lt;/object&amp;gt;
        &amp;lt;/void&amp;gt;
        &amp;lt;void method=&amp;quot;add&amp;quot;&amp;gt;
            &amp;lt;object class=&amp;quot;foo.Person&amp;quot;&amp;gt;
                &amp;lt;void property=&amp;quot;age&amp;quot;&amp;gt;&amp;lt;short&amp;gt;54&amp;lt;/short&amp;gt;&amp;lt;/void&amp;gt;
                &amp;lt;void property=&amp;quot;firstName&amp;quot;&amp;gt;&amp;lt;string&amp;gt;Abe&amp;lt;/string&amp;gt;&amp;lt;/void&amp;gt;
                &amp;lt;void property=&amp;quot;lastName&amp;quot;&amp;gt;&amp;lt;string&amp;gt;Ableman&amp;lt;/string&amp;gt;&amp;lt;/void&amp;gt;
            &amp;lt;/object&amp;gt;
        &amp;lt;/void&amp;gt;
        &amp;lt;void method=&amp;quot;add&amp;quot;&amp;gt;
            &amp;lt;object class=&amp;quot;foo.Person&amp;quot;&amp;gt;
                &amp;lt;void property=&amp;quot;age&amp;quot;&amp;gt;&amp;lt;short&amp;gt;42&amp;lt;/short&amp;gt;&amp;lt;/void&amp;gt;
                &amp;lt;void property=&amp;quot;firstName&amp;quot;&amp;gt;&amp;lt;string&amp;gt;Cindy&amp;lt;/string&amp;gt;&amp;lt;/void&amp;gt;
                &amp;lt;void property=&amp;quot;lastName&amp;quot;&amp;gt;&amp;lt;string&amp;gt;Lindy&amp;lt;/string&amp;gt;&amp;lt;/void&amp;gt;
            &amp;lt;/object&amp;gt;
        &amp;lt;/void&amp;gt;
    &amp;lt;/object&amp;gt;
&amp;lt;/java&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yeah, it&apos;s not pretty and it&apos;s a bit on the verbose side, but it was easy to produce and easy to read. Now, if you want to read that back into Java objects, it it equally as simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final XMLDecoder decoder = new XMLDecoder( inputStream );
final Collection&amp;lt;Person&amp;gt; persons = (Collection&amp;lt;Person&amp;gt;)decoder.readObject();
decoder.close();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will give you back copies of your original objects. If you were to call &lt;code&gt;toString()&lt;/code&gt; on the resulting&lt;br/&gt;collection you would get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Joe Smith (32), Abe Ableman (54), Cindy Lindy (42)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Exactly what you put in. Obviously, this is not the best approach for serializing and deserializing data, but it&apos;s another tool in the tool box and I am always surprised by how few developers actually know that they are available.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>MessageFormat Goodies</title>
      <link>http://coffeaelectronica.com/blog/2009/message-format-goodies.html</link>
      <pubDate>Tue, 24 Nov 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/message-format-goodies.html</guid>
      <description>
      &lt;p&gt;The &lt;code&gt;java.text.MessageFormat&lt;/code&gt; class is, in my opinion, underutilized. It is what &lt;code&gt;org.springframework.context.MessageSource&lt;/code&gt; implementations use under the covers to provide message formatting, so they are probably used quite a bit, but do you really let them do what they are made to do... formatting? I am guilty of it to; you convert a Date object to a formatted string before handing it off to a &lt;code&gt;MessageSource&lt;/code&gt; or &lt;code&gt;MessageFormat&lt;/code&gt; instance... but no more. I wrote a quick&lt;br/&gt;little format dumper to show what each type of formatting prints out:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Object[] params = new Object[]{ new Date() };
out.println(&amp;quot;Dates:&amp;quot;);
out.println(&amp;quot;  default:\t&amp;quot; + format(&amp;quot;{0}&amp;quot;,                 params) );
out.println(&amp;quot;  short:\t&amp;quot;   + format(&amp;quot;{0,date,short}&amp;quot;,      params) );
out.println(&amp;quot;  medium:\t&amp;quot;  + format(&amp;quot;{0,date,medium}&amp;quot;,     params) );
out.println(&amp;quot;  long:\t\t&amp;quot;  + format(&amp;quot;{0,date,long}&amp;quot;,       params) );
out.println(&amp;quot;  custom:\t&amp;quot;  + format(&amp;quot;{0,date,d MMMM yyyy}&amp;quot;,params) );

out.println(&amp;quot;\nTime:&amp;quot;);
out.println(&amp;quot;  default:\t&amp;quot; + format(&amp;quot;{0,time}&amp;quot;,         params) );
out.println(&amp;quot;  short:\t&amp;quot;   + format(&amp;quot;{0,time,short}&amp;quot;,   params) );
out.println(&amp;quot;  medium:\t&amp;quot;  + format(&amp;quot;{0,time,medium}&amp;quot;,  params) );
out.println(&amp;quot;  long:\t\t&amp;quot;  + format(&amp;quot;{0,time,long}&amp;quot;,    params) );
out.println(&amp;quot;  full:\t\t&amp;quot;  + format(&amp;quot;{0,time,full}&amp;quot;,    params) );
out.println(&amp;quot;  custom:\t&amp;quot;  + format(&amp;quot;{0,time,HH:mm:ss}&amp;quot;,params) );

params = new Object[]{ new Float(31415.967F) };
out.println(&amp;quot;\nNumbers:&amp;quot;);
out.println(&amp;quot;  default:\t&amp;quot;  + format(&amp;quot;{0}&amp;quot;,                  params) );
out.println(&amp;quot;  integer:\t&amp;quot;  + format(&amp;quot;{0,number,integer}&amp;quot;,   params) );
out.println(&amp;quot;  currency:\t&amp;quot; + format(&amp;quot;{0,number,currency}&amp;quot;,  params) );
out.println(&amp;quot;  percent:\t&amp;quot;  + format(&amp;quot;{0,number,percent}&amp;quot;,   params) );
out.println(&amp;quot;  custom:\t&amp;quot;   + format(&amp;quot;{0,number,#,###.0000}&amp;quot;,params) );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: I used static imports for &lt;code&gt;System.out&lt;/code&gt; and &lt;code&gt;MessageFormat.format&lt;/code&gt; so that I could minimize the code&lt;br/&gt;noise. For the same reason, I pulled the format label text outside of the formatting call; they could have easily been done as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;out.println( format(&amp;quot;  short:\t{0,time,short}&amp;quot;, params) );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It just seemed easier to see the formatting the other way. When I ran my format dumper I ended up with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dates:
  default: 11/23/09 7:59 PM
  short: 11/23/09
  medium: Nov 23, 2009
  long:  November 23, 2009
  custom: 23 November 2009

Time:
  default: 7:59:37 PM
  short: 7:59 PM
  medium: 7:59:37 PM
  long:  7:59:37 PM CST
  full:  7:59:37 PM CST
  custom: 19:59:37

Numbers:
  default: 31,415.967
  integer: 31,416
  currency: $31,415.97
  percent: 3,141,597%
  custom: 31,415.9668
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am going to make a point to use these from now on, rather than converting manually beforehand.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Converting Numbers to Ranges</title>
      <link>http://coffeaelectronica.com/blog/2009/converting-numbers-to-ranges.html</link>
      <pubDate>Sat, 21 Nov 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/converting-numbers-to-ranges.html</guid>
      <description>
      &lt;h2&gt;Python&lt;/h2&gt;&lt;p&gt;I have decided to start doing little programming puzzle problems in various languages, since my duplicate int finding problem is getting old and repetitive. My first puzzle comes from a site called &lt;a href=&quot;http://codegolf.com/&quot;&gt;Code Golf&lt;/a&gt; and it is titled &lt;a href=&quot;http://codegolf.com/home-on-the-range&quot;&gt;Home on the Range&lt;/a&gt;. I decided to start with &lt;a href=&quot;http://python.org/&quot;&gt;Python&lt;/a&gt; since it is something I have been playing with.&lt;/p&gt;&lt;p&gt;Basically the puzzle boils down to taking a series of numbers (in sequence) as input and producing a result where the numbers that are reduced to ranges where applicable, as below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[1 2 3 6 9 10 11 15] becomes &amp;quot;1-3, 6, 9-11, 15.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a couple iterations and a handful of language/api reference searches I came up with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;import sys

def convert_to_ranges(nums):
    ranges, holder = &amp;#39;&amp;#39;,&amp;#39;&amp;#39;
    num_count = len(nums)
    cap = endcap(num_count)

    for i in range(num_count):
        if i+1 &amp;lt; num_count and int(nums[i])+1 == int(nums[i+1]):
            if not holder: holder = nums[i]
            else:
                if holder:
                    ranges += holder + &amp;#39;-&amp;#39; + nums[i] + cap(i)
                    holder = &amp;#39;&amp;#39;
                else:
                    ranges += nums[i] + cap(i)
    return ranges

def endcap(ln):
    return lambda idx: &amp;#39;.&amp;#39; if idx == ln-1 else &amp;#39;, &amp;#39;

print(convert_to_ranges(sys.argv[1:]))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I had originally had the &lt;code&gt;holder&lt;/code&gt; variable as a list to hold each grouped number, but I realized that you&lt;br/&gt;really only need to store the first one so that you can use it to create the start of the grouping once you find the end&lt;br/&gt;of it. The lambda function &lt;code&gt;endcap()&lt;/code&gt; was originally just a normal function, but I wanted to play with some&lt;br/&gt;interesting built-in features, and it actually worked out nicely. The python ternary operator is also interesting&lt;br/&gt;( &lt;code&gt;VAL if CONDITION else OTHERVAL&lt;/code&gt; ); it reads better than other ternary operators. The &lt;code&gt;int()&lt;/code&gt; calls I make in the&lt;br/&gt;function are simply there because the input comes from the standard in, where they are strings.&lt;/p&gt;&lt;h2&gt;Java&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally separate posting on 11/222009&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I decided to do a quick Java implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HomeOnTheRange {
    public static void main( final String[] args ) {
        System.out.println( convertToRanges( args ) );
    }

    public static String convertToRanges(final String[] args){
        final int[] nums = new int[args.length];
        for( int n=0; n&amp;lt;args.length; n++){
            nums[n] = Integer.valueOf( args[n] );
        }

        String hold = null;
        final StringBuilder str = new StringBuilder();

        for(int i=0; i&amp;lt;args.length; i++){
            if( i+1 &amp;lt; args.length &amp;amp;&amp;amp; nums[i]+1 == nums[i+1] ){
                if(hold == null) hold = args[i];
            } else {
                if(hold != null){
                    str.append(hold).append(&amp;#39;-&amp;#39;).append(args[i]).append(&amp;quot;, &amp;quot;);
                    hold = null;
                } else {
                    str.append( args[i] ).append(&amp;quot;, &amp;quot;);
                }
            }
        }
        str.delete( str.length()-2, str.length() ).append( &amp;#39;.&amp;#39; );

        return str.toString();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is not much difference from the Python version; I guess with simple problems like these you are going to end&lt;br/&gt;up with pretty much the same form of solution unless you can find some tricky little piece of the language that works&lt;br/&gt;better as a solution. One thing I did different in the Java solution is that I pre-converted the argument String array&lt;br/&gt;into an integer array. I noticed that you really end up doing the string to int conversion twice for most of the input&lt;br/&gt;elements, which in Java can really add up for a large data set. I wonder if the same problem is inherent in the python&lt;br/&gt;solution? I also did the ending period a little different here, simple deleting the end of the string buffer and adding&lt;br/&gt;a period; an approach similar to the python version would probably be a little better, but either way is fine. I guess&lt;br/&gt;you could write a separate method to do the string to int conversion and then cache the results so that you are still&lt;br/&gt;doing the conversion once and &quot;inline&quot; with the main loop.&lt;/p&gt;&lt;p&gt;With a little thought about the problem space you can see that each string is converted and used at most twice, so you&lt;br/&gt;can setup the caching to convert and cache on the first use and then just return the converted int on the second call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HomeOnTheRange2 {
    private static final ThreadLocal&amp;lt;Converter&amp;gt; converter = new ThreadLocal&amp;lt;Converter&amp;gt;(){
        @Override
        protected Converter initialValue() {
            return new Converter();
        };
    };

    public static void main( final String[] args ) {
        System.out.println( convertToRanges( args ) );
    }

    public static String convertToRanges(final String[] args){
        String hold = null;
        final StringBuilder str = new StringBuilder();

        final Converter conv = converter.get();
        for(int i=0; i&amp;lt;args.length; i++){
            if( i+1 &amp;lt; args.length &amp;amp;&amp;amp; conv.toInt( args[i] )+1 == conv.toInt( args[i+1] )){
                if(hold == null) hold = args[i];
            } else {
                if(hold != null){
                    str.append(hold).append(&amp;#39;-&amp;#39;).append(args[i]).append(&amp;quot;, &amp;quot;);
                    hold = null;
                } else {
                    str.append( args[i] ).append(&amp;quot;, &amp;quot;);
                }
            }
        }

        str.delete( str.length()-2, str.length() ).append( &amp;#39;.&amp;#39; );

        return str.toString();
    }

    private static final class Converter {
        private String key;
        private int value;

        public int toInt(final String str){
            if( !str.equals( key ) ){
                this.key = str;
                this.value = Integer.valueOf( str );
            }
            return value;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will see that this code no longer does the initial conversion loop. The string to int conversion is now done&lt;br/&gt;using the &lt;code&gt;Converter&lt;/code&gt; class, which simply converts and caches the value on the first request for a value, and&lt;br/&gt;will simply return the cached int for a second call of the same number. This makes the assumption that the numbers are&lt;br/&gt;in ascending order, which is valid for this problem. I also added the converter as a &lt;code&gt;ThreadLocal&lt;/code&gt; variable since&lt;br/&gt;this conversion is now very tied to the order in which the values are converted. Making it thread-safe ensures that two&lt;br/&gt;calls to this method on different threads will not mess with each others values.&lt;/p&gt;&lt;p&gt;I considered just using a Map of some sort, but without some sort of bounds you end up caching every number, when as you can see you really only need&lt;br/&gt;one. Technically delving that deep into the problem to come up with a custom caching solution is really premature&lt;br/&gt;optimization, which is generally a bad thing. You should just to the original conversion as needed and then do the&lt;br/&gt;followup refactoring if performance bottlenecks lead you to do so.&lt;/p&gt;&lt;h2&gt;Clojure&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally separate posting on 10/10/2010&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Ok, in a wild mood, I decided to go back and try some &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; again to work out another implementation&lt;br/&gt;of the number range problem. I think Clojure needed some time to sink into my brain, as it seemed to make more sense this&lt;br/&gt;time around.&lt;/p&gt;&lt;p&gt;Working out the solution for this was not all that bad:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;(defn rangify [items]
    (loop [its items holder nil outp &amp;quot;&amp;quot;]
        (if (empty? its)
            outp
            (if (= (+ (first its) 1) (first (rest its)) )
                (if (nil? holder)
                    (recur (rest its) (first its) outp )
                    (recur (rest its) holder outp )
                )
                (if (nil? holder)
                    (recur (rest its) nil (print-str outp (first its) &amp;quot;,&amp;quot; ) )
                    (recur (rest its) nil (print-str outp holder &amp;quot;-&amp;quot; (first its) &amp;quot;,&amp;quot; ) )
                )
            )
        )
    )
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am sure that there is still a lot that can be done to make this cleaner and more efficient. Even now it does not fully&lt;br/&gt;satisfy the criteria since the output is not quite right, as shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ranges=&amp;gt; (rangify [1 2 3 4 5 6 10])
&amp;quot; 1 - 6 , 10 ,&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a little more thought, I was able to move some of the function calls around and merge them into the recur&lt;br/&gt;calls to simplify and tighten the code down a bit so that we end up with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(defn rangify [items]
    (loop [its items holder nil outp &amp;quot;&amp;quot;]
        (if (empty? its)
            outp
            (if (= (inc (first its)) (first (rest its)) )
                (recur (rest its) (if holder holder (first its) ) outp )
                (recur (rest its) nil
                    (if holder
                        (print-str outp holder &amp;quot;-&amp;quot; (first its) &amp;quot;,&amp;quot; )
                        (print-str outp (first its) &amp;quot;,&amp;quot; )
                    )
                )
            )
        )
    )
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This, actually is a bit cleaner and easier to read, but it sure seems like an odd language. I decided to put out&lt;br/&gt;what I have and come back to finish it later. It was a fun exercise.&lt;/p&gt;&lt;h2&gt;Groovy&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally separate posting on 10/9/2010&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Having been working with Groovy a lot more lately, I decided to give it a whirl and here is what I came up with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def rangeize( items ){
    def hold, str = &amp;#39;&amp;#39;

    items.eachWithIndex { it,i-&amp;gt;
        if( (it as int)+1 == (items[i+1] as int) ){
            if( !hold ) hold = it
        } else {
            str += hold ? &amp;quot;$hold-${it}, &amp;quot; : &amp;quot;${it}, &amp;quot;
            hold = null
        }
    }

    str[ 0..(str.length()-3) ] + &amp;#39;.&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The problem states that the input will be in order and have no duplicate entries, so I don&apos;t need to account for&lt;br/&gt;those. Other than some slightly simplified syntax, it&apos;s not all that much different from the Java version, thought it&apos;s&lt;br/&gt;a bit more condensed. I kept the string to int conversions inline on this version as I am still up in the air about how&lt;br/&gt;much overhead that would really add. You could just as easily convert the string array before doing the grouping. Always&lt;br/&gt;fun to practice.&lt;/p&gt;&lt;h2&gt;Obsessed With Ranges&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally separate posting on 10/16/2010&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Okay, I had drafts for three more postings of different solutions to the Home on the Range problem mentioned in earlier&lt;br/&gt;postings. I decided that I need to merge them into one post to save you all from being overly spammed by odd little&lt;br/&gt;programming snippets.&lt;/p&gt;&lt;p&gt;First off, we have an alternate Groovy solution based on the recursive approach which was necessary for the Clojure&lt;br/&gt;implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def iter( items, holder, str ){
    if( items.isEmpty() ) return &amp;quot;${str[0..(str.length()-3)]}.&amp;quot;
        def it = items.remove(0) as int
        if( it+1 == (items[0] as int) ){
            iter( items, holder ?: it, str )
        } else {
            iter( items, null, holder ? &amp;quot;$str$holder-$it, &amp;quot; : &amp;quot;$str$it, &amp;quot; )
        }
    }

    def rangize( items ){
        iter( items, null, &amp;#39;&amp;#39; )
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I had fun with this one as I got to play with some Groovy syntax sugar; however, I was unable to do it in a single&lt;br/&gt;function definition, so you get two. Next, we have a solution done using Ruby, which I was surprised to see that I had&lt;br/&gt;not previously done.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def rangize( items )
    holder, str = nil, &amp;#39;&amp;#39;
    for i in (0...items.size())
        if items[i].to_i + 1 == items[i+1].to_i then
            if !holder then holder = items[i] end
        else
            str &amp;lt;&amp;lt; (holder ? &amp;quot;#{holder}-&amp;quot; : &amp;#39;&amp;#39;) &amp;lt;&amp;lt; &amp;quot;#{items[i]}, &amp;quot;
            holder = nil
        end
    end

    str.chomp(&amp;#39;, &amp;#39;) &amp;lt;&amp;lt; &amp;#39;.&amp;#39;
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, after working on it I realized why I didn&apos;t bother before... other than a few Ruby syntax items, it&apos;s not all&lt;br/&gt;that interesting. The final one is the kicker. I got a little crazy and decide to do an implementation of the recursive&lt;br/&gt;approach using browser-based JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function rangize(nums){
    function iter(items, holder, str){
        if(items.length == 0) return str;
        var itm = items[0];
        if( (parseInt(itm)+1) == parseInt(items[1]) ){
            return iter( items.slice(1), holder ? holder : itm, str);
        } else {
            return iter( items.slice(1), null, str + (holder ? holder+ &amp;#39;-&amp;#39; + itm : itm) + &amp;#39;, &amp;#39; );
        }
    }
    var str = iter(nums,null,&amp;#39;&amp;#39;);
    return str.slice(0, str.length-2) + &amp;#39;.&amp;#39;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yes, you can nest functions inside of functions in JavaScript... I never realized that. The implementaion is not&lt;br/&gt;quite as clean as some of the others since JavaScript lacks some of the fancy string manipulation syntax; however, it&lt;br/&gt;really helps to show that JavaScript is a fairly robust and powerful language in itself. For better or worse, you could&lt;br/&gt;add some additional helper functions (also nested) to clean up the iteration a bit, though it does make it a bit more&lt;br/&gt;&quot;busy&quot; when you first look at it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function rangize(nums){
    function eqNxt( items ){ return (parseInt(items[0])+1) == parseInt(items[1]); }

    function endcap( str ){ return str.slice(0, str.length-2) + &amp;#39;.&amp;#39;; }

    function iter(items, holder, str){
        if(items.length == 0) return str;
        return iter(
            items.slice(1),
            eqNxt(items) ? (holder ? holder : items[0]) : null,
            eqNxt(items) ? str : (str + (holder ? holder+ &amp;#39;-&amp;#39; + items[0] : items[0]) + &amp;#39;, &amp;#39;)
        );
    }
    return endcap( iter(nums,null,&amp;#39;&amp;#39;) );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here is the whole code for the HTML test page:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Home on The Range&amp;lt;/title&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            function rangize(nums){
                function iter(items, holder, str){
                    if(items.length == 0) return str;

                    var itm = items[0];
                    if( (parseInt(itm)+1) == parseInt(items[1]) ){
                        return iter( items.slice(1), holder ? holder : itm, str);
                    } else {
                        return iter( items.slice(1), null, str + (holder ? holder+ &amp;#39;-&amp;#39; + itm : itm) + &amp;#39;, &amp;#39; );
                    }
                }

                var str = iter(nums,null,&amp;#39;&amp;#39;);
                return str.slice(0, str.length-2) + &amp;#39;.&amp;#39;;
            }
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body onload=&amp;quot;alert(rangize([&amp;#39;1&amp;#39;,&amp;#39;2&amp;#39;,&amp;#39;3&amp;#39;,&amp;#39;5&amp;#39;,&amp;#39;7&amp;#39;,&amp;#39;8&amp;#39;,&amp;#39;9&amp;#39;,&amp;#39;10&amp;#39;,&amp;#39;13&amp;#39;]))&amp;quot;&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I think I have burned this coding puzzle to the end, so hopefully I can move on to something else.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Development Environment</title>
      <link>http://coffeaelectronica.com/blog/2009/dev-environment.html</link>
      <pubDate>Fri, 13 Nov 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/dev-environment.html</guid>
      <description>
      &lt;p&gt;One of the tasks I have been given at work is to help modernize the &quot;old school&quot; organization and implement more standardized Java development practices; it has gotten me thinking a lot about what makes a good development procedure/environment.&lt;/p&gt;&lt;p&gt;The list I came up with, should be very familiar to most developers, and though they are most often considered part of &quot;agile&quot; development, they are in my opinion, just good development practices that go beyond any specific development methodology:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Coding to interfaces&lt;/li&gt;
  &lt;li&gt;Unit testing&lt;/li&gt;
  &lt;li&gt;Decoupled tools&lt;/li&gt;
  &lt;li&gt;Automated build (with command line ability)&lt;/li&gt;
  &lt;li&gt;Good source control&lt;/li&gt;
  &lt;li&gt;Continuous integration&lt;/li&gt;
  &lt;li&gt;Good bug tracking&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Coding to Interfaces&lt;/h2&gt;&lt;p&gt;Write your services and DAOs based on interfaces rather than concrete classes. This allows you to test code in a more decoupled manner and allows you greater implementation flexability. It also makes team development more manageable, since you can agree on some interfaces early on in the project and then code to them separately withough the need to wait for the missing pieces.&lt;/p&gt;&lt;h2&gt;Unit Testing&lt;/h2&gt;&lt;p&gt;Again... how do you know that your code works without proof. Unit testing in some automated, reproducable format is crucial to providing confidence that your code does what it is supposed to do. Into this category I also throw code coverage, which gives you some clues as to how thoroughly you have tested your code.&lt;/p&gt;&lt;h2&gt;Decoupled Tools&lt;/h2&gt;&lt;p&gt;Your tools should work for you, not against you. Your IDEs, servers, build tools, etc should not be tied together in any way. Developers should be able to use whatever IDE/tools (other than servers) that they are familiar with.&lt;/p&gt;&lt;h2&gt;Automated Build&lt;/h2&gt;&lt;p&gt;Your project(s) should be buildable from the command line in a repeatable manner with little effort. Tools like &lt;a href=&quot;http://ant.apache.org/&quot;&gt;Ant&lt;/a&gt; and &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; provide rich environments for build production, while still allowing good integration with most IDEs. This goes along somewhat with the previous point about decoupled tools. There is no reason why a developer should not be able to easity edit a file with a plain text editor, run the tests and produce build from the command line with no less confidence than working in a full-featured IDE.&lt;/p&gt;&lt;h2&gt;Source Control&lt;/h2&gt;&lt;p&gt;Whether it&apos;s a personal project, a prototype, or a project for work, it should have some sort of good source control setup for it. There are tons of free options (&lt;a href=&quot;http://gitscm.org/&quot;&gt;git&lt;/a&gt;, &lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;svn&lt;/a&gt;, &lt;a href=&quot;http://bazaar-vcs.org/en/&quot;&gt;bazar&lt;/a&gt;, &lt;a href=&quot;http://mercurial.selenic.com/&quot;&gt;mercurial&lt;/a&gt;, cvs) and even some good commercial options (&lt;a href=&quot;http://perforce.com/&quot;&gt;perforce&lt;/a&gt;), each with varrying levels of IDE integration and ease of use. A good source control system should provide good IDE integration as well as good command line usability.&lt;/p&gt;&lt;h2&gt;Continuous Integration&lt;/h2&gt;&lt;p&gt;If you have more than one person committing code to a project you will need a continuous integration server (&lt;a href=&quot;http://cruisecontrol.sourceforge.net/&quot;&gt;CruiseControl&lt;/a&gt;, &lt;a href=&quot;http://hudson-ci.org/&quot;&gt;Hudson&lt;/a&gt;, &lt;a href=&quot;http://continuum.apache.org/&quot;&gt;Continuum&lt;/a&gt; ) setup to do automated builds at least once a day. Having a build kicked off after a checkin is made is also very helpful. CI builds provide an addition level of assurance that the project compiles and is testable on something other than the developers machine. It also provides help with larger teams in keeping the repository clean from bad code commits. A failing build becomes a red flag that should be fixed right away.&lt;/p&gt;&lt;h2&gt;Bug Tracking&lt;/h2&gt;&lt;p&gt;A good means of logging and managing bug tickets is very important to keeping track of what has been done as well as what needs to be done. Don&apos;t use an in-house spreadsheed, access database or some other bogus bug tracker. Install one of the many free options (&lt;a href=&quot;http://www.bugzilla.org/&quot;&gt;bugzilla&lt;/a&gt;, &lt;a href=&quot;http://trac.edgewall.org/&quot;&gt;trac&lt;/a&gt;, redmine, &lt;a href=&quot;http://www.mantisbt.org/&quot;&gt;mantis&lt;/a&gt;) or one of the commercial options (fogbugz). A good tracker should provide a number of access points so that developer tools can also integrate with the tracker and provide a more rich interaction experience. I am sure that most of this is nothing new, but I wanted to get it all down in one place for future reference. Let me know if I have missed or over/under-stated anything.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Herding Jackrabbit</title>
      <link>http://coffeaelectronica.com/blog/2009/hearding-jackrabbit.html</link>
      <pubDate>Wed, 28 Oct 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/hearding-jackrabbit.html</guid>
      <description>
      &lt;p&gt;I decided to play around a little with &lt;a href=&quot;http://jackrabbit.apache.org/&quot;&gt;Jackrabbit&lt;/a&gt; the other day... here are some of my notes... I am running on Ubuntu with &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat 6&lt;/a&gt; and all I had to do to get started was download the Jackrabbit war distribution and install it in the webapps directory, then add the jcr-1.0.jar (downloaded from Sun) to the TOMCAT/lib directory. Once you start up the server and go into the context you get a nice welcome screen:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/content/files/jack-screen-1.png&quot; alt=&quot;Welcome Screen&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;I created a content repo in my home directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/home/cjstehno/.jackrabbit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the repo is configured you get a list of common clients, with links on how to use them:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/content/files/jack-screen-2.png&quot; alt=&quot;Configured Repo&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;I was interested in Standard WebDAV to do some simple content sharing between a few computers. It seemed simple enough and there is even a WebDAV connection setup in Ubuntu, but I had a heck of a time getting it to work. Finally I just tried pasting the connection URL into Nautilus directly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:8080/jackrabbit/repository/default
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but that didn&apos;t work, so I tried a slight change,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dav://localhost:8080/jackrabbit/repository/default
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which worked and asked me for a username and password, which the documentation says will take anything until you configure it. It looked like I had everything up and running:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://raw.github.com/cjstehno/coffeaelectronica/master/content/files/jack-screen-3.png&quot; alt=&quot;File browser&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Looks can be deceiving... I could add files but not edit them or add directories; however, after a refresh of the WebDAV view my folder was there. It did allow me to copy files from it into other directories and then work with them as normal. It does not seem like a very useful means of accessing the files. I can view everything in the web interface, but that is really not much better. I decided to try connecting using one of the more programmatic means, the RMI client provided with Jackrabbit. It was actually very easy to connect and use. After digging around for a while with the files I had in the repository, It seems that this content repository stuff is quite flexible and could be very powerful, but the learning curve to make good use of it may be a little high... and there seems to be little documentation. I wrote a&lt;br/&gt;little dumper app, which I called Jackalope so I could see how things were laid out in the repo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Jackalope {
	public static void main( final String[] args ) {
		final ClientRepositoryFactory factory = new ClientRepositoryFactory();
		Session session = null;
		try {
			final Repository repo = factory.getRepository( &amp;quot;//localhost/jackrabbit.repository&amp;quot; );
			session = repo.login( new SimpleCredentials(&amp;quot;cjstehno&amp;quot;, &amp;quot;foo&amp;quot;.toCharArray() ) );
			
			final String user = session.getUserID();
			final String name = repo.getDescriptor(Repository.REP_NAME_DESC);
			System.out.println(&amp;quot;Logged in as &amp;quot; + user + &amp;quot; to a &amp;quot; + name + &amp;quot; repository.&amp;quot;);
			
			final Workspace ws = session.getWorkspace();
			System.out.println(&amp;quot;Workspace: &amp;quot; + ws.getName());
			
			final Node node = session.getRootNode();
			System.out.println(&amp;quot;Node: &amp;quot; + node.getName());
			
			final NodeIterator children = node.getNodes();
			System.out.println(&amp;quot;Children: &amp;quot; + children.getSize());
			while(children.hasNext()){
				final Node child = (Node)children.next();
				System.out.println(&amp;quot;--&amp;gt; &amp;quot; + child.getName() + &amp;quot; [&amp;quot; + child.getPrimaryNodeType().getName() + &amp;quot;]&amp;quot;);
				
				final NodeDefinition nodeDef = child.getDefinition();
				System.out.println(&amp;quot;--&amp;gt;\tn: &amp;quot; + nodeDef.getDeclaringNodeType().getName());
				
				final PropertyIterator props = child.getProperties();
				while(props.hasNext()){
					final Property prop = (Property)props.next();
					System.out.println(&amp;quot;--&amp;gt;\tp: &amp;quot; + prop.getName() + &amp;quot; = &amp;quot; + prop.getValue().getString());
				}
				
				if(! child.getPrimaryNodeType().isNodeType( &amp;quot;rep:system&amp;quot; ) ){
					final VersionHistory history = child.getVersionHistory();
					System.out.println(&amp;quot;--&amp;gt; labels: &amp;quot; + Arrays.toString( history.getVersionLabels() ));
				}
			}
		} catch (final Exception e) {
			e.printStackTrace();
		} finally {
			session.logout();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s nothing fancy, just a little code to poke around. There was apparently an Eclipse plug-in for navigating through JCR repos, but it has since died away. (Also, if you get errors running the code above, remove the last if block related to versioning... the versioning functionality is not well documented and this was bombing a lot for me). Interesting stuff, but not really what I was looking for. I will keep it in mind for future use.&lt;/p&gt;&lt;h2&gt;Further down the rabbit hole&lt;/h2&gt;&lt;p&gt;So far, the JCR is a very interesting and seemingly under-utilized API, but I for the purpose of this discussion I am going to assume that you already have a bare minimum of understanding of Jackrabbit and the JCR. The documentation is a little thin in some parts so I decided to share some of my experimentation with &lt;code&gt;NodeType&lt;/code&gt; registry and SQL searching of Nodes.&lt;/p&gt;&lt;p&gt;The registration of custom NodeTypes is apparently not part of the 1.0 spec, since the only implementation for registering custom node types seems to be in a Jackrabbit-specific class, though it does have a note about changes in JCR 2.0 moving the functionality into the core interface, which is nice. The basic code needed to load and register node types is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final NodeTypeManagerImpl manager = (NodeTypeManagerImpl)session.getWorkspace().getNodeTypeManager();
manager.registerNodeTypes(new FileInputStream(cndFile), NodeTypeManagerImpl.TEXT_X_JCR_CND, true);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;registerNodeTypes(...)&lt;/code&gt; boolean parameter being true forces a reload of the node types even if they&lt;br/&gt;have already been installed. You will notice that the node types are contained in a separate &quot;cnd&quot; file (see&lt;br/&gt;&lt;a href=&quot;http://jackrabbit.apache.org/node-type-notation.html&quot;&gt;Node Type Definition&lt;/a&gt;). The file I used for my&lt;br/&gt;test was as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;baggage = &amp;#39;http://baggage.sourceforge.net/baggage&amp;#39;&amp;gt;[baggage:Note] &amp;gt; nt:base - baggage:text (string) = &amp;#39;&amp;#39;
primary
mandatory autocreated
version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am not sure at this point whether or not this is a grammar that they created themselves or if it is some external&lt;br/&gt;standard. It seems a bit clunky, but it gets the job done. Basically I am creating a namespace called &quot;baggage&quot; and&lt;br/&gt;adding a new node type to it called &quot;baggage:Note&quot; which will have one auto-created required property called&lt;br/&gt;&quot;baggage:text&quot;. It seems from some other tests I have done that you really need your own node types if you are going to&lt;br/&gt;do any querying of your content. You can use the default types but it could get really cluttered and cause your searches&lt;br/&gt;to slow down (Note: it uses Lucene internally for indexing and searching). Once the new node types have been registered&lt;br/&gt;we can use them simply by creating nodes with them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final Node root = session.getRootNode();
final Node notesRoot = root.addNode(&amp;quot;notes-root&amp;quot;);

final Node node1 = notesRoot.addNode(&amp;quot;Something Interesting&amp;quot;,&amp;quot;baggage:Note&amp;quot;);
node1.setProperty(&amp;quot;baggage:text&amp;quot;,&amp;quot;This is some note that I would write.&amp;quot;);

final Node node2 = notesRoot.addNode(&amp;quot;Another Note&amp;quot;,&amp;quot;baggage:Note&amp;quot;);
node2.setProperty(&amp;quot;baggage:text&amp;quot;,&amp;quot;More really cool text content.&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which creates a &quot;notes-root&quot; node off of the main root node and then adds some &quot;baggage:Note&quot; nodes to it. Once you&lt;br/&gt;have a few nodes with content it might be nice to search through them. The JCR gives you a fairly straight-forward query&lt;br/&gt;functionality using either XPath or SQL. I chose SQL for my test. Let&apos;s find all the &quot;baggage:Note&quot; nodes that contain&lt;br/&gt;the text &apos;cool&apos;. The following code shows how this is done:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final QueryManager queryManager = session.getWorkspace().getQueryManager();

final String sql = &amp;quot;select * from baggage:Note where contains(baggage:text,&amp;#39;cool&amp;#39;)&amp;quot;;
final Query xq = queryManager.createQuery(sql, Query.SQL);
final QueryResult result = xq.execute();

final RowIterator rows = result.getRows();
log.info(&amp;quot;Found: &amp;quot; + rows.getSize());
while(rows.hasNext()){
    final Row row = rows.nextRow();
    for(final String col : result.getColumnNames()){
        log.info(col + &amp;quot; = &amp;quot; + row.getValue(col).getString());
    }
    log.info(&amp;quot;---&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using my sample nodes, it will find one matching node and send the following output to the log appender:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;556  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - Found: 1
560  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - baggage:text = More really cool text content.
560  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - jcr:primaryType = baggage:Note
563  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - jcr:path = /notes-root/Another Note
564  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - jcr:score = 5035
564  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - ---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code for the whole test class is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class JcrExp2 {
    private static final Logger log = LoggerFactory.getLogger(JcrExp2.class);

    public static void main(final String[] args) throws Exception {
        final Repository repository = new TransientRepository();
        final Session session = repository.login(new SimpleCredentials(&amp;quot;username&amp;quot;, &amp;quot;password&amp;quot;.toCharArray()));

        final String cndFile = &amp;quot;baggage.cnd&amp;quot;;

        final NodeTypeManagerImpl manager = (NodeTypeManagerImpl)session.getWorkspace().getNodeTypeManager();
        manager.registerNodeTypes(new FileInputStream(cndFile), NodeTypeManagerImpl.TEXT_X_JCR_CND, true);
        log.info(&amp;quot;Registered Node types&amp;quot;);

        try {
            final Node root = session.getRootNode();
            final Node notesRoot = root.addNode(&amp;quot;notes-root&amp;quot;);
            log.info(&amp;quot;Added NotesRoot: &amp;quot; + notesRoot);

            final Node node1 = notesRoot.addNode(&amp;quot;Something Interesting&amp;quot;,&amp;quot;baggage:Note&amp;quot;);
            node1.setProperty(&amp;quot;baggage:text&amp;quot;,&amp;quot;This is some note that I would write.&amp;quot;);

            final Node node2 = notesRoot.addNode(&amp;quot;Another Note&amp;quot;,&amp;quot;baggage:Note&amp;quot;);
            node2.setProperty(&amp;quot;baggage:text&amp;quot;,&amp;quot;More really cool text content.&amp;quot;);

            session.save();

            // query
            final QueryManager queryManager = session.getWorkspace().getQueryManager();

            //          final String sql = &amp;quot;select * from baggage:Note&amp;quot;;
            final String sql = &amp;quot;select * from baggage:Note where contains(baggage:text,&amp;#39;cool&amp;#39;)&amp;quot;;
            final Query xq = queryManager.createQuery(sql, Query.SQL);
            final QueryResult result = xq.execute();
            final RowIterator rows = result.getRows();
            log.info(&amp;quot;Found: &amp;quot; + rows.getSize());
            while(rows.hasNext()){
                final Row row = rows.nextRow();
                for(final String col : result.getColumnNames()){
                    log.info(col + &amp;quot; = &amp;quot; + row.getValue(col).getString());
                }

                log.info(&amp;quot;---&amp;quot;);
            }

            // cleanup

            notesRoot.remove();
            session.save();
        } catch(final Exception e){
            log.error(&amp;quot;Something bad has happened! &amp;quot; + e.getMessage(),e);
        } finally {
            session.logout();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will need the JCR 1.0 jar as well as the jackrabbit 1.6 jar, both of which can be downloaded from the Jackrabbit downloads&lt;br/&gt;page. The JCR seems pretty useful and flexible. I am surprised that it is not used more than it seems to be.&lt;/p&gt;&lt;h2&gt;Versioning&lt;/h2&gt;&lt;p&gt;I figured out the basics of how to use its versioning functionality and decided I should do a little post about it so that I don&apos;t lose the code somewhere in the shuffle that is my project-space.&lt;/p&gt;&lt;p&gt;I&apos;m going to start out by dumping out the code for my little test runner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class JcrVersioning {
    private static final Logger log = LoggerFactory.getLogger(JcrVersioning.class);
    public static void main(final String[] args) throws Exception {
        final Repository repository = new TransientRepository();
        final Session session = repository.login(new SimpleCredentials(&amp;quot;username&amp;quot;, &amp;quot;password&amp;quot;.toCharArray()));

        try {
            final Node root = session.getRootNode();
            // Store content
            final Node textNode = root.addNode(&amp;quot;mynode&amp;quot;);

            final Node noteNode = textNode.addNode(&amp;quot;alpha&amp;quot;);
            noteNode.addMixin(&amp;quot;mix:versionable&amp;quot;);
            noteNode.setProperty(&amp;quot;content&amp;quot;, &amp;quot;I like jackrabbit&amp;quot;);

            session.save();
            noteNode.checkin();

            // Retrieve content
            final Node node = root.getNode(&amp;quot;mynode/alpha&amp;quot;);
            log.info(&amp;quot;Path: &amp;quot; + node.getPath() + &amp;quot; --&amp;gt; &amp;quot; + node.getProperty(&amp;quot;content&amp;quot;).getString());

            noteNode.checkout();
            noteNode.setProperty(&amp;quot;content&amp;quot;,&amp;quot;Jackrabbit is cool&amp;quot;);

            session.save();
            noteNode.checkin();

            log.info(&amp;quot;After Modification: &amp;quot; + noteNode.getPath() + &amp;quot; --&amp;gt; &amp;quot; + noteNode.getProperty(&amp;quot;content&amp;quot;).getString());

            ////
            final VersionHistory vh = noteNode.getVersionHistory();
            final VersionIterator vi = vh.getAllVersions();

            vi.skip(1);
            while (vi.hasNext()) {
                final Version v = vi.nextVersion();
                final NodeIterator ni = v.getNodes();

                while (ni.hasNext()) {
                    final Node nv = ni.nextNode();
                    log.info(&amp;quot; - Found version: &amp;quot; + v.getCreated().getTime() + &amp;quot; --&amp;gt; &amp;quot; + nv.getProperty(&amp;quot;content&amp;quot;).getString());
                }
            }

            noteNode.checkout();

            final VersionHistory versionHistory = noteNode.getVersionHistory();
            final VersionIterator versionIterator = versionHistory.getAllVersions();

            versionIterator.skip(versionIterator.getSize()-2);

            noteNode.restore(versionIterator.nextVersion(), true);
            noteNode.checkin();

            log.info(&amp;quot;After Restore: &amp;quot; + noteNode.getPath() + &amp;quot; --&amp;gt; &amp;quot; + noteNode.getProperty(&amp;quot;content&amp;quot;).getString());

            // Remove content
            root.getNode(&amp;quot;mynode&amp;quot;).remove();
            session.save();
        } finally {
            session.logout();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which creates a couple nodes, one of which has content. The content is set, modified and then restored to it&apos;s&lt;br/&gt;initial revision using the JCR versioning functionality. The enabler for versioning the the &lt;code&gt;mix:versionable&lt;/code&gt;&lt;br/&gt;mixin set on the versionable node. Once that is set you need to be cautious of how your &lt;code&gt;save()&lt;/code&gt; and &lt;code&gt;checkout()&lt;/code&gt;&lt;br/&gt;and &lt;code&gt;checkin()&lt;/code&gt; calls interact. When you run this example you will get something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INFO  JcrVersioning  - Path: /mynode/alpha --&amp;gt; I like jackrabbit
INFO  JcrVersioning  - After Modification: /mynode/alpha --&amp;gt; Jackrabbit is cool
INFO  JcrVersioning  -  - Found version: Wed Oct 28 19:26:59 CDT 2009 --&amp;gt; I like jackrabbit
INFO  JcrVersioning  -  - Found version: Wed Oct 28 19:26:59 CDT 2009 --&amp;gt; Jackrabbit is cool
INFO  JcrVersioning  - After Restore: /mynode/alpha --&amp;gt; I like jackrabbit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Like I said this is really just a storage are for some sample code I came up with... it is what it is. Hopefully it can help if you are stuck with JCR versioning.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Highlighting Text with JavaScript and JQuery</title>
      <link>http://coffeaelectronica.com/blog/2009/highlighting-text-with-javascript-jquery.html</link>
      <pubDate>Thu, 24 Sep 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/highlighting-text-with-javascript-jquery.html</guid>
      <description>
      &lt;p&gt;In my recent post about &lt;a href=&quot;Highlighting-Text-with-JavaScript&quot;&gt;Highlighting Text With JavaScript&lt;/a&gt; I suggested that I should try doing the same functionality with &lt;a href=&quot;http://jquery.com/&quot;&gt;JQuery&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;So I did, and I am really starting to like JQuery. Below are the modifications to the HTML shown in the previous posting; basically you just swap out the two script elements in the &lt;a href=&quot;http://prototypejs.org/&quot;&gt;Prototype&lt;/a&gt; version with those shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    jQuery(function(){
        $(&amp;#39;#content&amp;#39;).bind(&amp;#39;click&amp;#39;,highlight);
    });

    function highlight(){
        var htm = $(&amp;#39;#content&amp;#39;).html();
        var str = &amp;#39;&amp;#39;;

        jQuery.each( htm.split(&amp;#39; &amp;#39;), function(){
            if(jQuery.trim(this) != &amp;#39;&amp;#39;){
                str += this.replace(&amp;#39;pick&amp;#39;,&amp;#39;&amp;lt;span&amp;gt;pick&amp;lt;/span&amp;gt;&amp;#39;);
            }

            str += &amp;#39; &amp;#39;;
        });

        $(&amp;#39;#content&amp;#39;).html(str);
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JQuery does on-load event handling and event-handling in general, from what I have seen, in a very similar way to&lt;br/&gt;how Prototype does it. The &lt;code&gt;highlight()&lt;/code&gt; function is a bit more complex in this version as JQuery does not seem&lt;br/&gt;to have the same level of String manipulation support out of the box; however, maybe I missed it in the documentation or&lt;br/&gt;perhaps there is a good plugin that adds better string handling. This post is not really meant to compare the two&lt;br/&gt;libraries overall; it was more to satisfy my curiousity and get some practice with JQuery when solving a problem I have&lt;br/&gt;already solved with Prototype.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Unix Y2038 Bug</title>
      <link>http://coffeaelectronica.com/blog/2009/unix-y2038-bug.html</link>
      <pubDate>Sat, 19 Sep 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/unix-y2038-bug.html</guid>
      <description>
      &lt;p&gt;Apparently there are still some short-sighted developer date-based issues out there, one of which is the&lt;br/&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Year_2038_problem&quot;&gt;Year 2038 Problem&lt;/a&gt;, which is a unix-based problem with how the milliseconds since 1970 value is stored... it&apos;s a 32-bit value which will wrap around into negative numbers in 2038.&lt;/p&gt;&lt;p&gt;I ran a quick sanity check in Linux:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Date expiration = new Date(Long.MAX_VALUE);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and found that a Mac and Linux running Sun&apos;s JVM seems to be fine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Sun Aug 17 01:12:55 CST 292278994
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;while GCJ on Linux produced:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.IllegalArgumentException: month out of range:-19461555
at gnu.java.util.ZoneInfo.getOffset(int, int, int, int, int, int) (/usr/lib/libgcj.so.5.0.0)
at java.util.GregorianCalendar.computeFields() (/usr/lib/libgcj.so.5.0.0)
at java.util.Calendar.setTimeInMillis(long) (/usr/lib/libgcj.so.5.0.0)
at java.util.Date.toString() (/usr/lib/libgcj.so.5.0.0)
at java.io.PrintStream.println(java.lang.Object) (/usr/lib/libgcj.so.5.0.0)
at Main.main(java.lang.String[]) (Unknown Source)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ouch! This is kind of a subtle issue since your JVM may be giving you the correct value; however, your database which may&lt;br/&gt;be running on Linux might give you the wrong value from a time-based operation (or an error). This is one to keep an eye one.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Highlighting Text with JavaScript</title>
      <link>http://coffeaelectronica.com/blog/2009/highlighting-text-with-javascript.html</link>
      <pubDate>Tue, 15 Sep 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/highlighting-text-with-javascript.html</guid>
      <description>
      &lt;p&gt;A question arose recently about how to highlight a word or words in the text of a &lt;code&gt;div&lt;/code&gt; element. It turns out that it&apos;s actually pretty easy using &lt;a href=&quot;http://prototypejs.org/&quot;&gt;Prototype&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The example below is the code needed to highlight each occurrence (up to ten of them) of the word &apos;pick&apos; in the div. The operation will be performed when the content div is clicked.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
            #content span { background-color: yellow; }
        &amp;lt;/style&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            Event.observe(window,&amp;#39;load&amp;#39;,function(){
                $(&amp;#39;content&amp;#39;).observe(&amp;#39;click&amp;#39;,highlight);
            });

            function highlight(){
                $(&amp;#39;content&amp;#39;).innerHTML = $(&amp;#39;content&amp;#39;).innerHTML.sub(&amp;#39;pick&amp;#39;,&amp;#39;&amp;lt;span&amp;gt;pick&amp;lt;/span&amp;gt;&amp;#39;,10);
            }
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;
            Peter Piper picked a peck of pickeled peppers. How many peppers did Peter Piper pick?
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I used to Google-hosted version of the prototype library which is handy. This could easily be refactored to do&lt;br/&gt;any sort of style operation to the selected text, or replace it altogether. I will have to give this a try with JQuery as a comparison.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Parsing Name Value Pairs</title>
      <link>http://coffeaelectronica.com/blog/2009/parsing-name-value-pairs.html</link>
      <pubDate>Sat, 15 Aug 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/parsing-name-value-pairs.html</guid>
      <description>
      &lt;p&gt;A coding problem I have run into numerous times has been the relatively simple parsing of a sequence of name/value&lt;br/&gt;pair data.&lt;/p&gt;&lt;p&gt;Say you have something like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;String data = &amp;quot;alpha=100,bravo=200,charlie=300&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which you need to parse into a &lt;code&gt;Map&amp;lt;string,Integer&amp;gt;&lt;/code&gt; for whatever reason. Generally I have taken the brute force (i.e. lazy solution)&lt;br/&gt;approach of splitting the string by the grouping token (comma in this case) and then looping through those results and&lt;br/&gt;splitting each by the separation token (equals in this case), something like the code shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final String[] nvps = StringUtils.split( data, &amp;#39;,&amp;#39; );
for( final String nvp : nvps ){
    final String[] nv = StringUtils.split( nvp, &amp;#39;=&amp;#39; );
    map.put(nv[0], Integer.valueOf(nv[1]) );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s not a bad solution to the problem, not very efficient, but not bad. Most of the time when I have run into the&lt;br/&gt;need for this, efficiency has not really been much of an issue. Sidenote: I used &lt;code&gt;org.apache.commons.lang.StringUtils.split(String,char)&lt;/code&gt;&lt;br/&gt;due to how it handles nulls and blanks safely. I recently thought about a more efficent approach to this problem. With a&lt;br/&gt;little help from regular expressions, you can refactor the above code to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final String[] parts = data.split(&amp;quot;=|,&amp;quot;);
for(int i=0; i&amp;lt;parts.length; i+=2){
    map.put( parts[i], Integer.valueOf(parts[i+1]) );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which does the same work in almost negligible time when compared to the original. I ran some simple benchmark tests&lt;br/&gt;with larger lists of name/value pairs and found that even as the first method took about 32ms, the second method still&lt;br/&gt;registered as taking 0ms. I would say that it&apos;s an improvement. Also, with the second approach you would not even really&lt;br/&gt;need to have different tokens for the group and the separator since it&apos;s really just taking two values at a time and&lt;br/&gt;then skipping to the next pair. Now, generally I am of the opinion that premature optimization is evil; however, I don&apos;t&lt;br/&gt;really count things like this as optimization, but rather as &quot;better coding&quot;.&lt;/p&gt;&lt;p&gt;As a followup, you can also write a version of the second method using an alternate form of the &lt;code&gt;StringUtils.split(...)&lt;/code&gt;&lt;br/&gt;method, with no noticeable loss of efficiency:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final String[] parts = StringUtils.split(data,&amp;quot;,=&amp;quot;);
for(int i=0; i&amp;lt;parts.length; i+=2){
    map.put( parts[i], Integer.valueOf(parts[i+1]) );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which kind of combines the best of both worlds. You get more efficient and simple code without the need for regular&lt;br/&gt;expressions and with the extra safety features provided by &lt;code&gt;StringUtils&lt;/code&gt;.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>IOTemplate API </title>
      <link>http://coffeaelectronica.com/blog/2009/io-template-api.html</link>
      <pubDate>Tue, 11 Aug 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/io-template-api.html</guid>
      <description>
      &lt;p&gt;I had an idea recently that I have coded up into my &lt;a href=&quot;http://github.com/cjstehno/codeperks&quot;&gt;CodePerks&lt;/a&gt; project. I was writing&lt;br/&gt;a Spring MVC Controller that had to write the response output directly rather than to a view, but the content written&lt;br/&gt;differed based on some other criteria.&lt;/p&gt;&lt;p&gt;That got me thinking about how often we write and rewrite the standard IO handling construct.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;OutputStream out = null;
try {
    out = // create your stream
    // use the stream
} catch(Exception e){
    // handle it
} finally {
    if(out != null){
        try { out.close(); } catch(Exception ex){}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s not rocket science code, but I have seen it done wrong more often than you would expect. If nothing else, it gets&lt;br/&gt;tedious to write when you have to do it or something like it more than once in a project. Inspired by the&lt;br/&gt;&lt;a href=&quot;http://springsource.org/&quot;&gt;SpringFramework&lt;/a&gt;&apos;s use of the template pattern and factory methods, I thought that there should&lt;br/&gt;be something along those same lines for handling IO streams such that you still maintain the current flexibility while&lt;br/&gt;also adding an additional layer of abstraction to remove the repetitive, potentially error-prone parts. Most of the code&lt;br/&gt;in the &lt;a href=&quot;http://github.com/cjstehno/codeperks/tree/master/src/main/java/com/stehno/codeperks/io&quot;&gt;CodePerks IO API&lt;/a&gt; is what&lt;br/&gt;I came up with to answer that need. Basically what it boils down to is that you have a factory and a callback interface.&lt;br/&gt;The Factory is used to create the specific stream or reader/writer you need, while the callback is provided so that operations&lt;br/&gt;can be performed on the stream without the need to manage resource cleanup yourself.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final OutputStreamFactory&amp;lt;ServletOutputStream&amp;gt; osf = new OutuputStreamFactory&amp;lt;ServletOutputStream&amp;gt;(){
    public ServletOutputStream outputStream() throws IOException {
        return response.getOutputStream();
    }
};

final OutputStreamCallback&amp;lt;ServletOutputStream&amp;gt; osc = new OutputStreamCallback&amp;lt;ServletOutputStream&amp;gt;(){
    public void output(ServletOutputStream out) throws IOException {
        out.println(&amp;quot;shun the&amp;quot;);
        out.println(&amp;quot;nonbeliever&amp;quot;);
        out.println(&amp;quot;charlie&amp;quot;);
    }
};

IoTemplate.output(osf,osc);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can even simplify this down for cases such as that shown above, when you already have a stream you are working with.&lt;br/&gt;The &lt;code&gt;IoTemplate&lt;/code&gt; class provides wrapper methods as a convenience for the standard IO types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final OutputStreamCallback&amp;lt;ServletOutputStream&amp;gt; osc = new OutputStreamCallback&amp;lt;ServletOutputStream&amp;gt;(){
    public void output(ServletOutputStream out) throws IOException {
        out.println(&amp;quot;shun the&amp;quot;);
        out.println(&amp;quot;nonbeliever&amp;quot;);
        out.println(&amp;quot;charlie&amp;quot;);
    }
};

IoTemplate.output(response.getOutputStream(), osc);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Leaving you to focus on writing your functionality, not all that boilerplate code. You could create a reusable factory for&lt;br/&gt;your application, or use one of the file-based or adapter implementations provided. Then each time you need to perform an&lt;br/&gt;IO operation you could use that factory and create a new callback, or even come up with a reusable set. I will admit that&lt;br/&gt;this does not really cut down on the code all that much and I think I see the reason why Spring has not implemented anything&lt;br/&gt;like this. It&apos;s hard to do it in an elegant manner without injecting a lot of assumptions and/or restrictions. I went for&lt;br/&gt;the shotgun approach of trying to cover everything.&lt;/p&gt;&lt;p&gt;Also, there are APIs such as the &lt;a href=&quot;http://commons.apache.org/io&quot;&gt;Jakarta Commons IO API&lt;/a&gt; which do a much more compact job of&lt;br/&gt;reading/writing data all at once; however, that is not really what this API is for. CodePerks IO is meant for those&lt;br/&gt;situations where you need a bit more fine-grained control over how things are handled but still want some re-usability and&lt;br/&gt;abstraction from boilerplate code. Perhaps someone else will find it useful too. I will be maintaining that project and&lt;br/&gt;will eventually produce a release. Drop me an email if you are using it or would like to use it... sometimes that can get&lt;br/&gt;me to move things along faster.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Java Preferences API</title>
      <link>http://coffeaelectronica.com/blog/2009/java-preferences-api.html</link>
      <pubDate>Sat, 25 Jul 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/java-preferences-api.html</guid>
      <description>
      &lt;p&gt;The Java Preferences API (java.util.preferences) appeared in the 1.4.x release of the JDK with little fanfare or&lt;br/&gt;ceremony; it was just one of the new features in the release and it is not one that you hear about very often.&lt;/p&gt;&lt;p&gt;I don&apos;t think I have ever seen it being used anywhere, but it is quite flexible and useful. Preferences are references&lt;br/&gt;hierarchical by package name, similar to the Java Logging API (or &lt;a href=&quot;http://logging.apache.org/&quot;&gt;Log4J&lt;/a&gt;). This allows for&lt;br/&gt;preferences to be stored a various levels (nodes) of the hierarchy. There are two node branches availabe, the &lt;code&gt;UserNode&lt;/code&gt;&lt;br/&gt;branch and the &lt;code&gt;SystemNode&lt;/code&gt; branch. The JavaDocs state that&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The precise description of &quot;user&quot; and &quot;system&quot; will vary from implementation to implementation.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;But, in general &quot;user&quot; preferences will be different for each user of an application, while system preferences are more&lt;br/&gt;global in scope such as application configuration details. You retrieve the preferences for the class you are working&lt;br/&gt;with with the following statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Preferences userPrefs = Preferences.userNodeForPackage(com.you.MyClass.class);
Preferences systemPrefs = Preferences.systemNodeForPackage(com.you.MyClass.class);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can really use any class in your application as a reference point, as long as it is a logical association. Once&lt;br/&gt;you have a Preferences object, you can get and set values with simple accessor methods:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;userPrefs.putInt(&amp;quot;historyCount&amp;quot;,10);
int histCnt = userPrefs.getInt(&amp;quot;historyCount&amp;quot;,5);

systemPrefs.putBoolean(&amp;quot;allowEdit&amp;quot;,true);
boolean allowEdit = systemPrefs.getBoolean(&amp;quot;allowEdit&amp;quot;,false);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice, that in the &lt;code&gt;getInt()&lt;/code&gt; method the second parameter is a default value of the preference so that if it has not been&lt;br/&gt;defined yet, you still have a value to fall back on. Also, the data is persisted automatically; you don&apos;t need to explicitly&lt;br/&gt;save it. If you want to export your preferences for backup or import into another system, the API provides two export&lt;br/&gt;methods, one for just the current node, and the other for the current node and its child nodes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;userPrefs.exportNode( outstream ); // for just the one node, no child nodes

userPrefs.exportSubtree( outstream ); // for the node and its child nodes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Importing preferences is done using the &lt;code&gt;importPreferences(InputStream)&lt;/code&gt; method, which will import all the given preferences&lt;br/&gt;into the local preference system.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Preferences.importPreferences( instream );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The import/export format for preferences is a defined XML format (see JavaDocs for DTD). The preferences I detailed earlier&lt;br/&gt;would look something like (results may vary):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;preferences&amp;gt;
    &amp;lt;root type=&amp;quot;user&amp;quot;&amp;gt;
        &amp;lt;node name=&amp;quot;com&amp;quot;&amp;gt;
            &amp;lt;node name=&amp;quot;you&amp;quot;&amp;gt;
                &amp;lt;node name=&amp;quot;MyClass&amp;quot;&amp;gt;
                    &amp;lt;map&amp;gt;
                        &amp;lt;entry key=&amp;quot;historyCount&amp;quot; value=&amp;quot;10&amp;quot; /&amp;gt;
                    &amp;lt;/map&amp;gt;
                &amp;lt;/node&amp;gt;
            &amp;lt;/node&amp;gt;
        &amp;lt;/node&amp;gt;
    &amp;lt;/root&amp;gt;
    &amp;lt;root type=&amp;quot;system&amp;quot;&amp;gt;
        &amp;lt;node name=&amp;quot;com&amp;quot;&amp;gt;
            &amp;lt;node name=&amp;quot;you&amp;quot;&amp;gt;
                &amp;lt;node name=&amp;quot;MyClass&amp;quot;&amp;gt;
                    &amp;lt;map&amp;gt;
                        &amp;lt;entry key=&amp;quot;allowEdit&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
                    &amp;lt;/map&amp;gt;
                &amp;lt;/node&amp;gt;
            &amp;lt;/node&amp;gt;
        &amp;lt;/node&amp;gt;
    &amp;lt;/root&amp;gt;
&amp;lt;/preferences&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One more point of interest is that you can register a listener for node and preference change events:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;userPrefs.addNodeChangeListener( listener );
userPrefs.addPreferenceChangeListener( listener );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Node change events occur when a node is modified by adding or removing a child node. Preference change events are&lt;br/&gt;fired when the data contained in a preference node is modified. These could be useful for cases when you have&lt;br/&gt;interrelated preferences such that when you delete or change one of them, you need to modify the others accordingly. So,&lt;br/&gt;the next time you think about using a &lt;code&gt;Properties&lt;/code&gt; object, reconsider and think about whether or not a &lt;code&gt;Preferences&lt;/code&gt;&lt;br/&gt;object might serve your needs better.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Tour de Mock 4 - Easymock</title>
      <link>http://coffeaelectronica.com/blog/2009/tour-de-mock-4.html</link>
      <pubDate>Thu, 23 Jul 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/tour-de-mock-4.html</guid>
      <description>
      &lt;p&gt;&lt;a href=&quot;http://easymock.org/&quot;&gt;EasyMock&lt;/a&gt; is a bit of a different breed. The latest version (2.5.x) seems more expressive than the previous version but it has an odd, and in my opinion cumbersome, need to call a replay method, while most of the other mocking APIs seemingly either negate the need for this or do it under the covers so you don&apos;t have to worry about it.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;@Before&lt;/code&gt; method is nothing very different from the other examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Before
public void before() throws ServletException {
    this.emailListService = createMock(EmailListService.class);

    final ServletConfig servletConfig = createMock(ServletConfig.class);
    final ServletContext servletContext = createMock(ServletContext.class);

    expect(servletConfig.getServletContext()).andReturn(servletContext);
    expect(servletContext.getAttribute(EmailListService.KEY)).andReturn(emailListService);

    replay(servletConfig,servletContext);

    this.servlet = new EmailListServlet();
    servlet.init(servletConfig);
    this.request = createMock(HttpServletRequest.class);
    this.response = createMock(HttpServletResponse.class);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, the code is reasonably expressive and gets the functional point across in a reasonable amount of code. The exception&lt;br/&gt;test is expressive; however, again as in the &lt;code&gt;before()&lt;/code&gt; method we see that clunky &lt;code&gt;replay()&lt;/code&gt; method that just feels like&lt;br/&gt;an out-of-place artifact of a poor design decision.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Test(expected=IOException.class)
public void doGet_without_list() throws Exception {
    expect(request.getParameter(&amp;quot;listName&amp;quot;)).andReturn(null);
    expect(emailListService.getListByName(null)).andThrow(new IOException());

    replay(request,emailListService);

    servlet.doGet(request, response);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The sequential handling, in the &quot;with list&quot; test is fairly straight-forward, probably the least invasive of all the APIs so&lt;br/&gt;far in handling method invocation sequences.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Test
public void doGet_with_list() throws Exception {
    expect(request.getParameter(&amp;quot;listName&amp;quot;)).andReturn(&amp;quot;foolist&amp;quot;);

    final List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;larry@stooge.com&amp;quot;,&amp;quot;moe@stooge.com&amp;quot;,&amp;quot;curley@stooge.com&amp;quot;);
    expect(emailListService.getListByName(&amp;quot;foolist&amp;quot;)).andReturn(list);

    final PrintWriter writer = createMock(PrintWriter.class);
    checkOrder(writer,true);
    expect(response.getWriter()).andReturn(writer);

    writer.println(&amp;quot;larry@stooge.com&amp;quot;);
    writer.println(&amp;quot;moe@stooge.com&amp;quot;);
    writer.println(&amp;quot;curley@stooge.com&amp;quot;);
    writer.close();

    replay(request,response,writer,emailListService);

    servlet.doGet(request, response);
    verify(writer);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code for the entire test case is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class EmailListServlet_EasyMockTest {

    private EmailListServlet servlet;
    private HttpServletRequest request;
    private HttpServletResponse response;
    private EmailListService emailListService;

    @Before
    public void before() throws ServletException {
        this.emailListService = createMock(EmailListService.class);
        final ServletConfig servletConfig = createMock(ServletConfig.class);
        final ServletContext servletContext = createMock(ServletContext.class);

        expect(servletConfig.getServletContext()).andReturn(servletContext);
        expect(servletContext.getAttribute(EmailListService.KEY)).andReturn(emailListService);

        replay(servletConfig,servletContext);

        this.servlet = new EmailListServlet();
        servlet.init(servletConfig);

        this.request = createMock(HttpServletRequest.class);
        this.response = createMock(HttpServletResponse.class);
    }

    @Test(expected=IOException.class)
    public void doGet_without_list() throws Exception {
        expect(request.getParameter(&amp;quot;listName&amp;quot;)).andReturn(null);
        expect(emailListService.getListByName(null)).andThrow(new IOException());

        replay(request,emailListService);

        servlet.doGet(request, response);
    }

    @Test
    public void doGet_with_list() throws Exception {
        expect(request.getParameter(&amp;quot;listName&amp;quot;)).andReturn(&amp;quot;foolist&amp;quot;);

        final List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;larry@stooge.com&amp;quot;,&amp;quot;moe@stooge.com&amp;quot;,&amp;quot;curley@stooge.com&amp;quot;);
        expect(emailListService.getListByName(&amp;quot;foolist&amp;quot;)).andReturn(list);

        final PrintWriter writer = createMock(PrintWriter.class);
        checkOrder(writer,true);
        expect(response.getWriter()).andReturn(writer);

        writer.println(&amp;quot;larry@stooge.com&amp;quot;);
        writer.println(&amp;quot;moe@stooge.com&amp;quot;);
        writer.println(&amp;quot;curley@stooge.com&amp;quot;);
        writer.close();

        replay(request,response,writer,emailListService);

        servlet.doGet(request, response);

        verify(writer);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Maybe it&apos;s because I am used to a different mocking strategy, or perhaps it&apos;s just an older API (I think EasyMock was one&lt;br/&gt;of the first), but I am not really fond of EasyMock. It&apos;s another tool in the toolbox and I know there are quite a few&lt;br/&gt;developers out there who swear by it. It&apos;s not one that I will use often.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can find the source code used in this posting in my &lt;a href=&quot;http://github.com/cjstehno/coffeaelectronica/tree/master/tourdemock&quot;&gt;TourDeMock&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Tour de Mock 3 - Mockito</title>
      <link>http://coffeaelectronica.com/blog/2009/tour-de-mock-3.html</link>
      <pubDate>Wed, 22 Jul 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/tour-de-mock-3.html</guid>
      <description>
      &lt;p&gt;&lt;a href=&quot;http://mockito.org/&quot;&gt;Mockito&lt;/a&gt; is a fairly new player in the mocking arena, but one that I have found particularly interesting. It&apos;s as expressive and flexible as &lt;a href=&quot;http://jmock.org/&quot;&gt;JMock&lt;/a&gt; (from what I have seen so far) but it&apos;s a bit more compact and concise, which is something I really like.&lt;/p&gt;&lt;p&gt;It&apos;s also got some nice annotation support that really helps cleans up the code. If you look at the&lt;br/&gt;&lt;code&gt;EmailListServlet_MockitoTest&lt;/code&gt; class you will see that again (as with JMock) the &lt;code&gt;@RunWith&lt;/code&gt; annotation is used to provide&lt;br/&gt;a special test runner for Mockito. In this case it is used to evaluate the Mockito annotations. Another thing that you&lt;br/&gt;will notice is that instance variable mocks can be done with annotations in Mockito, using the &lt;code&gt;@Mock&lt;/code&gt; annotation, very&lt;br/&gt;useful.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@RunWith(MockitoJUnit44Runner.class)
public class EmailListServlet_MockitoTest {
    private EmailListServlet servlet;

    @Mock
    private HttpServletRequest request;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;@Before&lt;/code&gt; method is somewhere between the Spring-mock and JMock complexity level:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Before
public void before() throws ServletException {
    final ServletConfig servletConfig = mock(ServletConfig.class);
    final ServletContext servletContext = mock(ServletContext.class);

    when(servletConfig.getServletContext()).thenReturn(servletContext);
    when(servletContext.getAttribute(EmailListService.KEY)).thenReturn(emailListService);

    this.servlet = new EmailListServlet();
    servlet.init(servletConfig);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Its as expressive as JMock but with less of the distracting overhead (no instance initialization block expectations) so&lt;br/&gt;it&apos;s a bit easier to read, and to maintain. The &quot;without list name&quot; test is almost as simple as it was in the spring-mock&lt;br/&gt;version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Test(expected=IOException.class)
public void doGet_without_list() throws Exception {
    when(request.getParameter(&amp;quot;listName&amp;quot;)).thenReturn(null);
    when(emailListService.getListByName(null)).thenThrow(new IOException());
    servlet.doGet(request, response);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice, too, that it reads fairly clear as to what is going on. &quot;When you get this method call, return this&quot;. Again&lt;br/&gt;with the &quot;with list name&quot; test we see that Mockito also has good sequential call support:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Test
public void doGet_with_list() throws Exception {
    final PrintWriter writer = mock(PrintWriter.class);
    when(request.getParameter(&amp;quot;listName&amp;quot;)).thenReturn(&amp;quot;foolist&amp;quot;);

    final List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;larry@stooge.com&amp;quot;,&amp;quot;moe@stooge.com&amp;quot;,&amp;quot;curley@stooge.com&amp;quot;);
    when(emailListService.getListByName(&amp;quot;foolist&amp;quot;)).thenReturn(list);
    when(response.getWriter()).thenReturn(writer);

    servlet.doGet(request, response);

    final InOrder order = inOrder(writer);
    order.verify(writer).println(&amp;quot;larry@stooge.com&amp;quot;);
    order.verify(writer).println(&amp;quot;moe@stooge.com&amp;quot;);
    order.verify(writer).println(&amp;quot;curley@stooge.com&amp;quot;);
    order.verify(writer).close();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another thing to point out here is that with Mockito, there is nothing special you need to to in order to mock out&lt;br/&gt;concrete classes, it just works. The whole test case using Mockito is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@RunWith(MockitoJUnit44Runner.class)
public class EmailListServlet_MockitoTest {
    private EmailListServlet servlet;

    @Mock private HttpServletRequest request;
    @Mock private HttpServletResponse response;
    @Mock private EmailListService emailListService;

    @Before
    public void before() throws ServletException {
        final ServletConfig servletConfig = mock(ServletConfig.class);
        final ServletContext servletContext = mock(ServletContext.class);

        when(servletConfig.getServletContext()).thenReturn(servletContext);
        when(servletContext.getAttribute(EmailListService.KEY)).thenReturn(emailListService);

        this.servlet = new EmailListServlet();
        servlet.init(servletConfig);
    }

    @Test(expected=IOException.class)
    public void doGet_without_list() throws Exception {
        when(request.getParameter(&amp;quot;listName&amp;quot;)).thenReturn(null);
        when(emailListService.getListByName(null)).thenThrow(new IOException());

        servlet.doGet(request, response);
    }

    @Test
    public void doGet_with_list() throws Exception {
        final PrintWriter writer = mock(PrintWriter.class);
        when(request.getParameter(&amp;quot;listName&amp;quot;)).thenReturn(&amp;quot;foolist&amp;quot;);

        final List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;larry@stooge.com&amp;quot;,&amp;quot;moe@stooge.com&amp;quot;,&amp;quot;curley@stooge.com&amp;quot;);
        when(emailListService.getListByName(&amp;quot;foolist&amp;quot;)).thenReturn(list);
        when(response.getWriter()).thenReturn(writer);

        servlet.doGet(request, response);

        final InOrder order = inOrder(writer);
        order.verify(writer).println(&amp;quot;larry@stooge.com&amp;quot;);
        order.verify(writer).println(&amp;quot;moe@stooge.com&amp;quot;);
        order.verify(writer).println(&amp;quot;curley@stooge.com&amp;quot;);
        order.verify(writer).close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I plan on spending some more time with Mockito as I could see it becoming my favourite mocking API.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can find the source code used in this posting in my &lt;a href=&quot;http://github.com/cjstehno/coffeaelectronica/tree/master/tourdemock&quot;&gt;TourDeMock&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Tour de Mock 2 - JMock</title>
      <link>http://coffeaelectronica.com/blog/2009/tour-de-mock-2.html</link>
      <pubDate>Tue, 21 Jul 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/tour-de-mock-2.html</guid>
      <description>
      &lt;p&gt;The next mocking API to consider is one that I have used for years, &lt;a href=&quot;http://jmock.org/&quot;&gt;JMock&lt;/a&gt;, specifically JMock 2 (for a discussion of JMock 1 usage, please see my older posting &quot;&lt;a href=&quot;Are-You-Mocking-Me%3F&quot;&gt;Are You Mocking Me?&lt;/a&gt;&quot;).&lt;/p&gt;&lt;p&gt;JMock uses a more Domain Specific Language approach to mocking that is very flexible and very expressive, though it can be a bit daunting to someone who&apos;s never used it before. One of the first things you will notice about the test in the &lt;code&gt;EmailListServlet_JMockTest&lt;/code&gt; is that it uses the &lt;code&gt;@RunWith&lt;/code&gt; annotation provided by &lt;a href=&quot;http://junit.org/&quot;&gt;JUnit&lt;/a&gt;. This annotation tells JUnit to use a test runner other than the default. In this case, JMock provides a test runner to simplify use of its Mockery construct (you will see it as one of the instance variables). The Mockery is used to create and manage the mocking system. Using the JMock runner allows JUnit to handle the mockery verification step after each test so that you don&apos;t have to do it yourself. You may also notice that I have defined a constructor for this test to set the &quot;imposteriser&quot; (mock creator) used. Since we have both interfaces and classes to mock, the &quot;legacy&quot; imposteriser must be used.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@RunWith(JMock.class)
public class EmailListServlet_JMockTest {
    private Mockery mockery = new JUnit4Mockery();

    public EmailListServlet_JMockTest(){
        mockery.setImposteriser(ClassImposteriser.INSTANCE);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;@Before&lt;/code&gt; method in this example is a bit more complex than that of the Spring mocking example, since you have to do a bit more of the binding work yourself:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Before
public void before() throws ServletException {
    this.emailListService = mockery.mock(EmailListService.class);
    final ServletConfig servletConfig = mockery.mock(ServletConfig.class);
    mockery.checking(new Expectations(){
        {
            final ServletContext servletContext = mockery.mock(ServletContext.class);
            one(servletConfig).getServletContext(); will(returnValue(servletContext));
            one(servletContext).getAttribute(EmailListService.KEY); will(returnValue(emailListService));
        }
    });

    this.servlet = new EmailListServlet();
    servlet.init(servletConfig);

    this.request = mockery.mock(HttpServletRequest.class);
    this.response = mockery.mock(HttpServletResponse.class);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;mockery.checking()&lt;/code&gt; method is one of the most used constructs in mocking with JMock. It allows you to provide your test expectations. In this case you can see that we are expecting one call to &lt;code&gt;servletConfig.getServletContext()&lt;/code&gt;, which will return the mock &lt;code&gt;ServletContext&lt;/code&gt; we have created. We are also expecting one call to the &lt;code&gt;getAttribute()&lt;/code&gt; method of the mocked servlet context with the email service key, which will return our mocked &lt;code&gt;EmailListService&lt;/code&gt; (note, in this test we don&apos;t actually implement the service interface, we just mock it like everything else). The &quot;no list name&quot; exception-checking test is also a bit more complicated than the previous example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Test(expected=IOException.class)
public void doGet_without_list() throws Exception {
    mockery.checking(new Expectations(){
        {
            one(request).getParameter(&amp;quot;listName&amp;quot;); will(returnValue(null));
            one(emailListService).getListByName(null); will(throwException(new IOException()));
        }
    });

    servlet.doGet(request, response);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We actually need to code the behavior for a null return of the &quot;listName&quot; parameter and cause the exception to be thrown by the service. The other test, the &quot;with list name&quot; test is the more interesting of the two now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Test
public void doGet_with_list() throws Exception {
    final PrintWriter writer = mockery.mock(PrintWriter.class);
    final Sequence printSequence = mockery.sequence(&amp;quot;printSequence&amp;quot;);
    mockery.checking(new Expectations(){
        {
            one(request).getParameter(&amp;quot;listName&amp;quot;); will(returnValue(&amp;quot;foolist&amp;quot;));
            final List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;larry@stooge.com&amp;quot;,&amp;quot;moe@stooge.com&amp;quot;,&amp;quot;curley@stooge.com&amp;quot;);
            one(emailListService).getListByName(&amp;quot;foolist&amp;quot;); will(returnValue( list ));
            one(response).getWriter(); will(returnValue(writer));
            one(writer).println(&amp;quot;larry@stooge.com&amp;quot;); inSequence(printSequence);
            one(writer).println(&amp;quot;moe@stooge.com&amp;quot;); inSequence(printSequence);
            one(writer).println(&amp;quot;curley@stooge.com&amp;quot;); inSequence(printSequence);
            one(writer).close(); inSequence(printSequence);
        }
    });

    servlet.doGet(request, response);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will see again, that the basic call behavior is specified as is the service return value, but here, also we actually see some of the benefit of all this extra code. Notice the sequence behavior. You can define a sequence of calls which must be performed in the order specified or the test will fail. This is useful in cases like this where, if nothing else, you want to ensure that the &lt;code&gt;close()&lt;/code&gt; method is called after all of the &lt;code&gt;println()&lt;/code&gt; calls on the writer. The whole test case is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@RunWith(JMock.class)
public class EmailListServlet_JMockTest {
    private Mockery mockery = new JUnit4Mockery();
    private EmailListServlet servlet;
    private HttpServletRequest request;
    private HttpServletResponse response;
    private EmailListService emailListService;

    public EmailListServlet_JMockTest(){
        mockery.setImposteriser(ClassImposteriser.INSTANCE);
    }

    @Before
    public void before() throws ServletException {
        this.emailListService = mockery.mock(EmailListService.class);
        final ServletConfig servletConfig = mockery.mock(ServletConfig.class);
        mockery.checking(new Expectations(){
            {
                final ServletContext servletContext = mockery.mock(ServletContext.class);
                one(servletConfig).getServletContext(); will(returnValue(servletContext));
                one(servletContext).getAttribute(EmailListService.KEY); will(returnValue(emailListService));
            }
        });

        this.servlet = new EmailListServlet();
        servlet.init(servletConfig);

        this.request = mockery.mock(HttpServletRequest.class);
        this.response = mockery.mock(HttpServletResponse.class);
    }

    @Test(expected=IOException.class)
    public void doGet_without_list() throws Exception {
        mockery.checking(new Expectations(){
            {
                one(request).getParameter(&amp;quot;listName&amp;quot;); will(returnValue(null));
                one(emailListService).getListByName(null); will(throwException(new IOException()));
            }
        });

        servlet.doGet(request, response);
    }

    @Test
    public void doGet_with_list() throws Exception {
        final PrintWriter writer = mockery.mock(PrintWriter.class);
        final Sequence printSequence = mockery.sequence(&amp;quot;printSequence&amp;quot;);
        mockery.checking(new Expectations(){
            {
                one(request).getParameter(&amp;quot;listName&amp;quot;); will(returnValue(&amp;quot;foolist&amp;quot;));
                final List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;larry@stooge.com&amp;quot;,&amp;quot;moe@stooge.com&amp;quot;,&amp;quot;curley@stooge.com&amp;quot;);
                one(emailListService).getListByName(&amp;quot;foolist&amp;quot;); will(returnValue( list ));
                one(response).getWriter(); will(returnValue(writer));
                one(writer).println(&amp;quot;larry@stooge.com&amp;quot;); inSequence(printSequence);
                one(writer).println(&amp;quot;moe@stooge.com&amp;quot;); inSequence(printSequence);
                one(writer).println(&amp;quot;curley@stooge.com&amp;quot;); inSequence(printSequence);
                one(writer).close(); inSequence(printSequence);
            }
        });

        servlet.doGet(request, response);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JMock has a good amount of development time under its belt so it is pretty well documented and tested itself. It&apos;s got a great API for writing your own parameter matchers, method matchers and expectations. It can be a bit cumbersome at times when the test cases get large and full of a lot of mock plumbing. I tend to try and treat test code with the same refactoring attention that I do normal code... pulling out shared expectations, and creating useful shared assertions, etc, then it&apos;s not so bad. There is definitely more code involved with this approach than with something like spring mock; however, you do have quite a wide range of mock-ability that you don&apos;t really get with predefined mock implementations.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can find the source code used in this posting in my &lt;a href=&quot;http://github.com/cjstehno/coffeaelectronica/tree/master/tourdemock&quot;&gt;TourDeMock&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Tour de Mock 1 - Spring Mock</title>
      <link>http://coffeaelectronica.com/blog/2009/tour-de-mock-1.html</link>
      <pubDate>Mon, 20 Jul 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/tour-de-mock-1.html</guid>
      <description>
      &lt;p&gt;A common practice used in unit testing is the use of &quot;&lt;a href=&quot;http://en.wikipedia.org/wiki/Mock_object&quot;&gt;Mock Objects&lt;/a&gt;&quot;, usually called &quot;mocking&quot;. There are a handful of robust, mature mocking APIs available and it can be difficult to determine which approach works best for you and your project. With this series of posts I intend to compare some (if not all, over time) of the more well-known and seasoned mocking APIs to showcase their usage, benefits, and drawbacks. To accomplish this comparison I will be writing tests using each API to exercise a simple, yet not-too-trivial test case,&lt;br/&gt;requiring the mocking of both interfaces and concrete classes.&lt;/p&gt;&lt;p&gt;I will be writing the test cases using &lt;a href=&quot;http://junit.org/&quot;&gt;JUnit 4&lt;/a&gt; with annotations. For example purposes, let&apos;s suppose we have a servlet which is used to retrieve a list of email addresses when given a list name, &lt;code&gt;listName&lt;/code&gt; request parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class EmailListServlet extends HttpServlet {

    private EmailListService emailListService;

    public void init() throws ServletException {
        final ServletContext servletContext = getServletContext();
        this.emailListService = (EmailListService)servletContext.getAttribute(EmailListService.KEY);

        if(emailListService == null) throw new ServletException(&amp;quot;No ListService available!&amp;quot;);
    }

    protected void doGet(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException {
        final String listName = req.getParameter(&amp;quot;listName&amp;quot;);
        final List&amp;lt;String&amp;gt; list = emailListService.getListByName(listName);
        PrintWriter writer = null;
        try {
            writer = res.getWriter();
            for(final String email : list){
                writer.println(email);
            }
        } finally {
            if(writer != null) writer.close();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will notice that the servlet pulls the list from an &lt;code&gt;EmailListService&lt;/code&gt; service interface:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public interface EmailListService {
    public static final String KEY = &amp;quot;com.stehno.mockery.service.EmailListService&amp;quot;;

    /**
     * Retrieves the list of email addresses with the specified name. If no list
     * exists with that name an IOException is thrown.
     */
    List&amp;lt;String&amp;gt; getListByName(String listName) throws IOException;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Okay, so it&apos;s not great design, but this is what you get sometimes... if it makes you feel better you can say that you started working on a project and this is one of the servlets you are supposed to write a test for. Feel better now?&lt;/p&gt;&lt;p&gt;To start off with, let&apos;s just say we are going to write a unit test for the servlet without any help from&lt;br/&gt;a mocking API. You create the test case (just a plain old class with &lt;code&gt;@Test&lt;/code&gt; annotations in it with JUnit 4 and realize that the first thing you need to do is mock out the &lt;code&gt;EmailListService&lt;/code&gt; interface. That&apos;s not too hard; it&apos;s an interface so you can simply implement it with your own &lt;code&gt;MockEmailListService&lt;/code&gt; class. Not bad at all.&lt;/p&gt;&lt;p&gt;Next you realize that you need to get this service class into the &lt;code&gt;ServletContext&lt;/code&gt; by way of a &lt;code&gt;ServletConfig&lt;/code&gt; instance. Both of these are interfaces with no server-independent implementations... and they have quite a few methods to implement. What&apos;s worse is that you will eventually need to implement &lt;code&gt;HttpServletRequest&lt;/code&gt; and &lt;code&gt;HttpServletResponse&lt;/code&gt;. Go look at their JavaDocs. You will end up writing more code for your mock implementations than there are lines of code in the rest of the project and you won&apos;t be using more than about 25% of it for this test. Now, you could figure it&apos;s just the price you pay for testing and trudge onward, but wait, &lt;a href=&quot;http://http//springsource.org&quot;&gt;SpringFramework&lt;/a&gt; to the rescue.&lt;/p&gt;&lt;p&gt;The spring-mock (called spring-test in later releases) module provides a good set of web-related mock implementations, and this is the first stop on our mocking tour. The &lt;code&gt;org.springframework.mock.web&lt;/code&gt; package provides &lt;code&gt;ServletConfig&lt;/code&gt;, &lt;code&gt;ServletContext&lt;/code&gt;, &lt;code&gt;MockHttpServletRequest&lt;/code&gt; and a &lt;code&gt;MockHttpServletResponse&lt;/code&gt; mock implementations so that we don&apos;t have to implement them ourselves. Let&apos;s create our first example test, called &lt;code&gt;EmailListServlet_SpringMockTest&lt;/code&gt;. In the &lt;code&gt;@Before public void before()&lt;/code&gt; method you will see the instantiation of our &lt;code&gt;MockEmailListService&lt;/code&gt; (yes, we still have to create that one) and it&apos;s injection into&lt;br/&gt;the &lt;code&gt;ServletContext&lt;/code&gt; by way of the &lt;code&gt;ServletConfig&lt;/code&gt;. The request and response mocks are also instantiated for use in the test methods. (If you are unfamiliar with JUnit 4 testing, you may want to check out the documentation, or just understand that the &lt;code&gt;@Before&lt;/code&gt; annotation means that the method will be called before each test method, annotated with &lt;code&gt;@Test&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Before
public void before() throws ServletException {
    final MockEmailListService emailListService = new MockEmailListService();
    final MockServletConfig servletConfig = new MockServletConfig();

    servletConfig.getServletContext().setAttribute(EmailListService.KEY, emailListService);
    this.servlet = new EmailListServlet();
    servlet.init(servletConfig);
    this.request = new MockHttpServletRequest();
    this.response = new MockHttpServletResponse();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our implementation of the &lt;code&gt;EmailListService&lt;/code&gt; simply returns a list of emails when a non-null list name is used, and throws an exception if a null list name is passed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private static class MockEmailListService implements EmailListService {

    @Override
    public List&amp;lt;String&amp;gt; getListByName(final String listName) throws IOException {
        if(listName == null){
            throw new IOException();
        } else {
            return Arrays.asList(&amp;quot;larry@stooge.com&amp;quot;,&amp;quot;moe@stooge.com&amp;quot;,&amp;quot;curley@stooge.com&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first test to write is a simple test of the exception thrown when no list name is specified:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Test(expected=IOException.class)
public void doGet_without_list() throws Exception {
    servlet.doGet(request, response);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&apos;s pretty simple. Now, let&apos;s test the case when a list name is actually passed in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;@Test
public void doGet_with_list() throws Exception {
    request.setParameter(&amp;quot;listName&amp;quot;, &amp;quot;foolist&amp;quot;);
    servlet.doGet(request, response);
    assertEquals(
        &amp;quot;larry@stooge.com&amp;quot; + sep + &amp;quot;moe@stooge.com&amp;quot; + sep + &amp;quot;curley@stooge.com&amp;quot; + sep,
        response.getContentAsString()
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, it&apos;s pretty straight-forward. The whole test class is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class EmailListServlet_SpringMockTest {
    private static final String sep = System.getProperty(&amp;quot;line.separator&amp;quot;);
    private EmailListServlet servlet;
    private MockHttpServletRequest request;
    private MockHttpServletResponse response;

    @Before
    public void before() throws ServletException {
        final MockEmailListService emailListService = new MockEmailListService();
        final MockServletConfig servletConfig = new MockServletConfig();
        servletConfig.getServletContext().setAttribute(EmailListService.KEY, emailListService);
        this.servlet = new EmailListServlet();
        servlet.init(servletConfig);
        this.request = new MockHttpServletRequest();
        this.response = new MockHttpServletResponse();
    }

    @Test(expected=IOException.class)
    public void doGet_without_list() throws Exception {
        servlet.doGet(request, response);
    }

    @Test
    public void doGet_with_list() throws Exception {
        request.setParameter(&amp;quot;listName&amp;quot;, &amp;quot;foolist&amp;quot;);
        servlet.doGet(request, response);
        assertEquals(&amp;quot;larry@stooge.com&amp;quot; + sep + &amp;quot;moe@stooge.com&amp;quot; + sep + &amp;quot;curley@stooge.com&amp;quot; + sep,response.getContentAsString());
    }

    private static class MockEmailListService implements EmailListService {

        @Override
        public List&amp;lt;String&amp;gt; getListByName(final String listName) throws IOException {
            if(listName == null){
                throw new IOException();
            } else {
                return Arrays.asList(&amp;quot;larry@stooge.com&amp;quot;,&amp;quot;moe@stooge.com&amp;quot;,&amp;quot;curley@stooge.com&amp;quot;);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The spring mocking API is great, when you can use it, but it only has mocks for common (known) APIs; for anything beyond that you will have to do the mocking yourself. I try to use it whenever I can since it provides the implementation plumbing that you would need for some of the other mocking techniques.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can find the source code used in this posting in my &lt;a href=&quot;http://github.com/cjstehno/coffeaelectronica/tree/master/tourdemock&quot;&gt;TourDeMock&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>JavaScript Link Decoration</title>
      <link>http://coffeaelectronica.com/blog/2009/javascript-link-decoration.html</link>
      <pubDate>Sat, 20 Jun 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/javascript-link-decoration.html</guid>
      <description>
      &lt;p&gt;No, not decorating with pretty colors, decorating with additional functionality... specifically click-tracking and&lt;br/&gt;confirmation. With a little bit of JavaScript and a little help from &lt;a href=&quot;http://prototypejs.org/&quot;&gt;Prototype&lt;/a&gt; you&lt;br/&gt;can add functionality to link clicks.&lt;/p&gt;&lt;p&gt;If you have the following links&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://dzone.com&amp;quot; class=&amp;quot;track&amp;quot;&amp;gt;DZone&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://cnn.com&amp;quot;&amp;gt;CNN&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://thinkgeek.com&amp;quot; class=&amp;quot;confirm track&amp;quot;&amp;gt;Geek Porn&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;noting that they are annotated with CSS classes. These classes are the key. You can use the following JavaScript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;Event.observe(window,&amp;#39;load&amp;#39;,function(evt){
    $$(&amp;#39;a&amp;#39;).each(function(it){
        it.observe(&amp;#39;click&amp;#39;,handleLinkClick);
    });
});

function handleLinkClick(evt){
    var elt = evt.element();
    var cont = true;
    if(elt.hasClassName(&amp;#39;confirm&amp;#39;)){
        cont = confirm(&amp;quot;Are you sure?&amp;quot;);
        if(!cont){
            Event.stop(evt);
        }
    }

    if(cont &amp;amp;&amp;amp; elt.hasClassName(&amp;#39;track&amp;#39;)){
        var url = elt.readAttribute(&amp;#39;href&amp;#39;);
        new Ajax.Request(&amp;#39;recorder.jsp?url=&amp;#39; + url,{method:&amp;#39;get&amp;#39;});
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The script will catch clicks on the appropriate link and add functionality to it. In the case of a links with the&lt;br/&gt;&quot;track&quot; class it will fire off an Ajax request to a request tracking service, while the &quot;confirm&quot; class adds a&lt;br/&gt;confirmation dialog which will stop the click event if confirmation is canceled. You can put a simple dummy link tracker&lt;br/&gt;at &quot;recorder.jsp&quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;% System.out.println( request.getParameter(&amp;quot;url&amp;quot;) ); %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This decorating works in IE 6+ and in FireFox; however, it will not catch link following events generated by a&lt;br/&gt;right-click and &quot;Open in New Tab&quot; selection from the pop-up menu. This seems to be a browser issue that I was unable to&lt;br/&gt;find a work-around for. Personally, I tend to open external links that way to preserve the original page... meaning that&lt;br/&gt;this procedure will not track clicks from someone like me. Since external links are most likely the ones you want to&lt;br/&gt;track, this procedure is mostly useless. I will have to play around with it and see if there is another way. If you do&lt;br/&gt;want to use it you could refactor this a bit and make it use a more object-oriented decorator pattern approach, but this&lt;br/&gt;is just to get the general idea out there as an alternative to the old link-modification way of click tracking.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Property Backed Configuration</title>
      <link>http://coffeaelectronica.com/blog/2009/property-backed-configuration.html</link>
      <pubDate>Sat, 23 May 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/property-backed-configuration.html</guid>
      <description>
      &lt;p&gt;A useful trick I started doing for property-backed configuration files is to provide something a little more rich&lt;br/&gt;than a simple &lt;code&gt;Properties&lt;/code&gt; object as a provider.&lt;/p&gt;&lt;p&gt;Use a &lt;code&gt;Properties&lt;/code&gt; instance as a delegate to pull out the properties, but provide a more useful interface for the values themselves. Say you have a&lt;br/&gt;properties file such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path.storage = /some/path
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could simply access these via a &lt;code&gt;Properties&lt;/code&gt; instance, and use it directly as in:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;String path = props.getProperty(&amp;quot;path.storage&amp;quot;);
File file = new File(path,&amp;quot;archive.zip&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but consider a potentially more useful approach&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;File file = config.getStorageFile(&amp;quot;archive.zip&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public File getStorageFile(String name){
    return new File( props.getProperty(&amp;quot;path.storage&amp;quot;), name );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could even pull the file extension into the method if it made sense to do so... say, if all files in that path&lt;br/&gt;were .zip files you could then enforce more control on how it was used such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public File getStorageFile(String name){
    return new File(props.getProperty(&amp;quot;path.storage&amp;quot;),name + &amp;quot;.zip&amp;quot;);
}

File file = config.getStorageFile(&amp;quot;archive&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These helper methods would be part of a class called Config or something similar that delegates to an internal &lt;code&gt;Properties&lt;/code&gt; object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Config {
    private final Properties props;

    public Config(Properties p){
        this.props = p;
    }

    public File getStorageFile(String name){
        return new File(props.getProperty(&amp;quot;path.storage&amp;quot;),name);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could also do the loading of the properties file inside this class. Some property validation could also be helpful.&lt;br/&gt;This strategy really helped to clean up a project that originally had a lot of properties that were used all over the&lt;br/&gt;place with very little order. Converting to this approach actually made the code more understandable and less error prone as well.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Adding Ivy to Ant Boilerplate</title>
      <link>http://coffeaelectronica.com/blog/2009/adding-ivy-to-ant-boilerplate.html</link>
      <pubDate>Thu, 16 Apr 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/adding-ivy-to-ant-boilerplate.html</guid>
      <description>
      &lt;p&gt;I have wanted to delve deeper into &lt;a href=&quot;http://ant.apache.org/ivy&quot;&gt;Ivy&lt;/a&gt; for a while now, but something always pulled me away&lt;br/&gt;before I got very far into it. Well today I had some time, so I did a little digging.&lt;/p&gt;&lt;p&gt;Ivy is a dependency management system along similar lines to that provided by &lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; but without&lt;br/&gt;all of Maven&apos;s other features. Ivy &lt;em&gt;just&lt;/em&gt; does dependency management. Ivy uses a project (module) description file for&lt;br/&gt;project configuration, generally named &lt;code&gt;ivy.xml&lt;/code&gt; and put in the root of your project. Then you can add additional ant&lt;br/&gt;tasks to manage the dependencies.&lt;/p&gt;&lt;p&gt;Dependency management puts the common jars you (and everyone else) use in a common repository so that you can have quick&lt;br/&gt;standardized access to the jar and version that you need for each project. Ivy knows how to find these based on the&lt;br/&gt;configuration of your dependencies in the &lt;code&gt;ivy.xml&lt;/code&gt; file. The dependencies are then cached locally for your use&lt;br/&gt;and added to projects as required.&lt;/p&gt;&lt;p&gt;A simple &lt;code&gt;ivy.xml&lt;/code&gt; file is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;ivy-module version=&amp;quot;2.0&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xsi:noNamespaceSchemaLocation=&amp;quot;http://ant.apache.org/ivy/schemas/ivy.xsd&amp;quot;&amp;gt;
    &amp;lt;info organisation=&amp;quot;com.stehno&amp;quot; module=&amp;quot;foobar&amp;quot; /&amp;gt;
    &amp;lt;configurations&amp;gt;
        &amp;lt;conf name=&amp;quot;prod&amp;quot; description=&amp;quot;Production environment conf.&amp;quot;/&amp;gt;
        &amp;lt;conf name=&amp;quot;dev&amp;quot; transitive=&amp;quot;false&amp;quot; description=&amp;quot;Testing environment conf.&amp;quot;/&amp;gt;
    &amp;lt;/configurations&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;!-- For Production --&amp;gt;
        &amp;lt;dependency org=&amp;quot;org.springframework&amp;quot; name=&amp;quot;spring-webmvc&amp;quot; rev=&amp;quot;2.5.6&amp;quot; conf=&amp;quot;prod-&amp;gt;default&amp;quot;&amp;gt;
            &amp;lt;exclude org=&amp;quot;commons-attributes&amp;quot;/&amp;gt;
            &amp;lt;exclude org=&amp;quot;commons-digester&amp;quot; /&amp;gt;
            &amp;lt;exclude org=&amp;quot;jexcelapi&amp;quot; module=&amp;quot;jxl&amp;quot;/&amp;gt;
            &amp;lt;exclude org=&amp;quot;velocity&amp;quot; /&amp;gt;
            &amp;lt;exclude org=&amp;quot;org.apache.poi&amp;quot; /&amp;gt;
            &amp;lt;exclude org=&amp;quot;struts&amp;quot; /&amp;gt;
            &amp;lt;exclude org=&amp;quot;org.apache.tiles&amp;quot; /&amp;gt;
            &amp;lt;exclude module=&amp;quot;freemarker&amp;quot; /&amp;gt;
            &amp;lt;exclude module=&amp;quot;xml-apis&amp;quot; /&amp;gt;
            &amp;lt;exclude module=&amp;quot;jasperreports&amp;quot; /&amp;gt;
            &amp;lt;exclude module=&amp;quot;velocity-tools-generic&amp;quot; /&amp;gt;
            &amp;lt;exclude module=&amp;quot;velocity-tools-view&amp;quot; /&amp;gt;
            &amp;lt;exclude module=&amp;quot;itext&amp;quot; /&amp;gt;
            &amp;lt;exclude module=&amp;quot;jfreechart&amp;quot; /&amp;gt;
            &amp;lt;exclude module=&amp;quot;jcommon&amp;quot; /&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency org=&amp;quot;commons-lang&amp;quot; name=&amp;quot;commons-lang&amp;quot; rev=&amp;quot;2.4&amp;quot; conf=&amp;quot;prod-&amp;gt;default&amp;quot;/&amp;gt;
            &amp;lt;!-- For Development --&amp;gt;
            &amp;lt;dependency org=&amp;quot;junit&amp;quot; name=&amp;quot;junit&amp;quot; rev=&amp;quot;4.4&amp;quot; conf=&amp;quot;dev-&amp;gt;default&amp;quot;/&amp;gt;
            &amp;lt;dependency org=&amp;quot;org.springframework&amp;quot; name=&amp;quot;spring-test&amp;quot; rev=&amp;quot;2.5.6&amp;quot; conf=&amp;quot;dev-&amp;gt;default&amp;quot; /&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/ivy-module&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You see basic module information (info element) which is used to identify your project. The configurations define&lt;br/&gt;various configurations available. In this case I have one &lt;code&gt;prod&lt;/code&gt; and one &lt;code&gt;dev&lt;/code&gt; configuration so that I can&lt;br/&gt;define one set of dependencies that will be pushed out with the production artifact and one that is only used locally&lt;br/&gt;for testing and development. The dependencies are defined in dependency elements using the standard Maven repository&lt;br/&gt;conventions, the conf attribute being a reference to which configuration the dependency belongs to. The&lt;br/&gt;&lt;code&gt;-&amp;gt;default&lt;/code&gt; is something I am not totally clear on, but I think it means that the dependency will also be&lt;br/&gt;associated with the &lt;code&gt;default&lt;/code&gt; configuration.&lt;/p&gt;&lt;p&gt;One downside I have noticed about Ivy is that when it pulls down dependencies, it pulls them all down without prejudice.&lt;br/&gt;So when you have something like &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring&lt;/a&gt; which has a lot of non-required dependencies, you get them all and&lt;br/&gt;have to exclude those you don&apos;t want (as I did in the sample with the exclude elements). It&apos;s not horrible but you have&lt;br/&gt;to do it by hand. If you don&apos;t really care about the size of your application you can just forget about it and let it&lt;br/&gt;pull down everything. Something missing along these lines is a general exclusion that would exclude a dependent jar from&lt;br/&gt;any module. The way it stands, if module A and module B both depend on the module C, which is not required, you will&lt;br/&gt;have to exclude it from both dependency definitions.&lt;/p&gt;&lt;p&gt;The dependency management strategy that I am going with here is one that I hope will &quot;stay out of my way&quot;. I was thinking about when dependency resolution is really needed.&lt;br/&gt;Maven checks for dependency changes whenever you do anything (at least pre-2.0 did, I am not sure about 2.0) so that&lt;br/&gt;even running &lt;code&gt;clean&lt;/code&gt; caused a dependency check... how wasteful is that? In my opinion, dependency management&lt;br/&gt;should be done when you want it done. When is it relevant?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;when you add or remove a dependency&lt;/li&gt;
  &lt;li&gt;when you change a dependency version&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;How often do these events really happen? In a structured working environment these events often require buy-in from&lt;br/&gt;other developers and/or managers. Even at home on your own projects, they only happen when you feel the need to change&lt;br/&gt;one... not every time you run your build script. On a related note, IDEs tend to get cranky when you keep&lt;br/&gt;adding/removing jars out from under them too.&lt;/p&gt;&lt;p&gt;This leads me to add three new targets to my &lt;a href=&quot;http://www.coffeaelectronica.com/2009/01/boilerplate-ant-build.html&quot;&gt;Boilerplate Ant File&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;The &lt;code&gt;depends&lt;/code&gt; target to update the local dependencies in your project.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;target name=&amp;quot;depends&amp;quot; description=&amp;quot;Update the dependencies for the project.&amp;quot;&amp;gt;
    &amp;lt;ivy:retrieve sync=&amp;quot;true&amp;quot; conf=&amp;quot;prod&amp;quot; pattern=&amp;quot;${web.src.dir}/WEB-INF/lib/[artifact].[ext]&amp;quot; /&amp;gt;
    &amp;lt;ivy:retrieve sync=&amp;quot;true&amp;quot; conf=&amp;quot;dev&amp;quot; pattern=&amp;quot;${lib.dir}/[artifact].[ext]&amp;quot; /&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;clean-depends&lt;/code&gt; target to clean out the dependency directories.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;target name=&amp;quot;clean-depends&amp;quot; description=&amp;quot;Clean out the managed dependencies.&amp;quot;&amp;gt;
    &amp;lt;delete&amp;gt;
        &amp;lt;fileset dir=&amp;quot;${web.src.dir}/WEB-INF/lib&amp;quot; includes=&amp;quot;*.jar&amp;quot; /&amp;gt;
        &amp;lt;fileset dir=&amp;quot;${lib.dir}&amp;quot; includes=&amp;quot;*.jar&amp;quot; /&amp;gt;
    &amp;lt;/delete&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, the &lt;code&gt;depends-report&lt;/code&gt; target to generate a nice report of all the project dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;target name=&amp;quot;depends-report&amp;quot; depends=&amp;quot;depends&amp;quot; description=&amp;quot;Generates dependency report for the project.&amp;quot;&amp;gt;
    &amp;lt;ivy:report todir=&amp;quot;${depends.report.dir}&amp;quot; conf=&amp;quot;dev,prod&amp;quot; /&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; At this point you will have to add these to the boilerplate file if you are using it - I will be creating a&lt;br/&gt;project for this build management stuff and sharing it out soon in a more official manner so stay tuned.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;With these new targets you can refresh your dependencies and be ready to code with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ant clean-all clean-depends depends test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Do this whenever you add/update/remove dependencies or when you pull the project out of source control... you don&apos;t&lt;br/&gt;want to put your jars in source control any more if you are currently doing that. You can usually write rules/configurations&lt;br/&gt;in your source control to keep out the jar files. This keeps the storage space down and the transfer time down since you&lt;br/&gt;will have the jars stored in your local cache when you need them.&lt;/p&gt;&lt;p&gt;If you have never done automated dependency management you may not really see the value of it. You get the most benefit when you are&lt;br/&gt;working in a multi-project environment, which I will be supporting and blogging about soon.&lt;/p&gt;&lt;p&gt;Be warned that this post really only scratches the surface of what ivy can do. I recommend visiting their web site and checking out the&lt;br/&gt;documentation. They have decent documentation of all the config elements; however, their examples are a little on the weak side.&lt;br/&gt;You have to get into their sample code to get a real helpful guide.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can find an updated version of this build script in my &lt;a href=&quot;http://github.com/cjstehno/AntBoilerplate&quot;&gt;AntBoilerplate&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Puzzle of the Jars and Pebbles</title>
      <link>http://coffeaelectronica.com/blog/2009/puzzle-of-the-Jars-and-pebbles.html</link>
      <pubDate>Wed, 8 Apr 2009 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2009/puzzle-of-the-Jars-and-pebbles.html</guid>
      <description>
      &lt;p&gt;I had an interesting puzzle during a recent interview. I am paraphrasing this from memory so forgive me if&lt;br/&gt;you know this one and I am misquoting it somehow:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You have two types of pebbles, white and black, and three jars labeled white, black and black &amp;amp; white, respectively.&lt;br/&gt;One jar contains all white pebbles, one contains all black pebbles and one contains a mixture of black and white pebbles.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;The three jars a all mislabelled so that they will not contain the pebbles noted on the label. How many pebbles would you have to draw and from which jars in order to determine the true distribution?&lt;/p&gt;&lt;p&gt;Don&apos;t read any farther if you are going to try and solve this one for yourself. The next paragraph contains the&lt;br/&gt;answer.&lt;/p&gt;&lt;p&gt;The answer is one, from the jar labelled &quot;black &amp;amp; white&quot;. If you got it on your first try through, congratulations, I did not.&lt;br/&gt;I figured it out on my second run through it.&lt;/p&gt;&lt;p&gt;Basically, you draw one pebble from the &quot;black &amp;amp; white&quot; jar. Say you draw a white one, you then know that the jar labelled &quot;black &amp;amp; white&quot; is the jar containing the white pebbles. This leaves you with two unknown jars, one labelled &quot;white&quot; and one labelled &quot;black&quot;. Since you know that both of these are incorrect and you have a white pebble, you know that the jar labelled &quot;white&quot; contains the black pebbles and the one labelled &quot;black&quot; contains the black and white pebble mixture.&lt;/p&gt;&lt;p&gt;It&apos;s an interesting problem, but honestly I have never felt that these sorts of problems are useful in a technical interview. We would&lt;br/&gt;usually have one question of this nature in our interviews more to see how they would go about solving it than looking&lt;br/&gt;for an actual answer. Google apparently loves this type of question in an interview, but asks very little of a technical&lt;br/&gt;nature.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Layered Build Scripting</title>
      <link>http://coffeaelectronica.com/blog/2009/layered-build-scripting.html</link>
      <pubDate>Tue, 17 Feb 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/layered-build-scripting.html</guid>
      <description>
      &lt;p&gt;In a recent posting, &lt;a href=&quot;boilerplate-ant-build.html&quot;&gt;Boilerplate Ant Build&lt;/a&gt;, I&lt;br/&gt;presented my basic Ant build starting point. This post takes that one step farther and presents suggestions for using&lt;br/&gt;an &lt;a href=&quot;http://ant.apache.org/&quot;&gt;Ant&lt;/a&gt; build file as a tool box for building more &quot;smart&quot; build tools.&lt;/p&gt;&lt;p&gt;As a developer you should strive to keep your project buildable and accessible to all the bells and whistles of your&lt;br/&gt;IDE while also maintaining a simple straight-forward command line interface for use in other tools or at those times&lt;br/&gt;when you don&apos;t need/want to fire up your IDE for a simple task. Ant is a great build automation tool that is supported&lt;br/&gt;on the command line and by all the major IDEs.&lt;br/&gt;&lt;br/&gt;With your Ant Build Script you can compile, test, and deploy&lt;br/&gt;the project with simple command line entries or IDE actions. As I started to use this approach more and more I found&lt;br/&gt;that I ended up using the same commands over and over and some of them were on the long-ish side especially when&lt;br/&gt;typed in the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ant clean-all test deploy-remote -Ddeploy.remote.conn=myuname:mypword@server:/home/myuname/artifacts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not hard to pull from memory after you do it a few times, but when you are in a hurry you are more apt to make a&lt;br/&gt;mistake. What I like to do, and I recommend, is to create simple shortcut helper scripts for running these common&lt;br/&gt;commands. Your first thought might be to just add them to the build.xml file, and this is not a horrible idea, but I&lt;br/&gt;prefer keeping them separate from the &quot;official&quot; builder since in some cases these scripts may only work for my&lt;br/&gt;environment or under special circumstances. They are secondary tools that make use of your build tool kit.&lt;/p&gt;&lt;p&gt;So how should you write them? You could create a second Ant build file for your tasks and just call ant with that file,&lt;br/&gt;which could make ant calls into the main build script.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ant -f yourfile.xml clean-dev-deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nothing wrong with that, but I recommend learning a multi-platform scripting language such as &lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt;&lt;br/&gt;or &lt;a href=&quot;http://ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt; and doing your secondary script using that language. Apart from keeping your skills&lt;br/&gt;fresh and learning a new language, it also provides a very rich scripting environment that can be used on any platform&lt;br/&gt;supported by the language (Groovy and Ruby are supported on Windows, Linux and Mac). You may wonder why I am not&lt;br/&gt;promoting bash shell scripting here and one reason is that I have never been very fond of it, but also it is more tied&lt;br/&gt;to the operating system and less functional when compared with the other two I mentioned.&lt;/p&gt;&lt;p&gt;These scripts should reside in the root of the project directory right along side your build.xml file for ease of&lt;br/&gt;management and use. They should be checked into your source control, though you may want to XXX-out passwords&lt;br/&gt;(meaning you will need to checkout a copy and customize it for your use - and not check it back in) or parametrize it to&lt;br/&gt;add those in at run time.&lt;/p&gt;&lt;p&gt;The deployment command line I mentioned previously becomes simple and repeatable with a little Ruby foo...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;puts `ant clean-all test deploy-remote -Ddeploy.remote.conn=myuname:mypword@server:/home/myuname/artifacts`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I end up with a simple script that will run the same set of tasks every time without a chance of me flubbing the&lt;br/&gt;directory or username. I tend to give them short concise names that distinguish what they are used for, such as &lt;code&gt;devpush.rb&lt;/code&gt;&lt;br/&gt;in this case. You can point your IDE to this script and have it run it with the click of a button (at least in &lt;a href=&quot;http://eclipse.org/&quot;&gt;Eclipse&lt;/a&gt;&lt;br/&gt;you can, not sure of others). You can also run it on the command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ruby devpush.rb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which is the most portable way, or if you make the script executable (&lt;code&gt;chmod +x&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./devpush.rb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have these scripts for every server that I deploy code to. Once you get the hang of your chosen scripting language you&lt;br/&gt;can also find a lot of other build/deployment related tasks to script such as the script I have for doing a tomcat deployment&lt;br/&gt;of a war file. It stops the server, archives the existing context, copies out the new war, cleans the log files and starts&lt;br/&gt;the server... all using a ruby script.&lt;/p&gt;&lt;p&gt;There are also some other interesting alternatives to Ant that I have taken an interest in lately, &lt;a href=&quot;http://gant.codehaus.org/&quot;&gt;Gant&lt;/a&gt;&lt;br/&gt;and &lt;a href=&quot;http://www.gradle.org/&quot;&gt;Gradle&lt;/a&gt;, both of which are build scripting DSLs based on Groovy; Gant is ant-like, while&lt;br/&gt;Gradle is more maven-esque. They both seem quite promising.&lt;/p&gt;&lt;p&gt;Keep your builds simple, fast and unambiguous so that you can focus on the real work of developing software &lt;em&gt;of&lt;/em&gt; your&lt;br/&gt;project not &lt;em&gt;for&lt;/em&gt; your project.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Side note on choosing between Groovy and Ruby&lt;/em&gt; I love both Ruby and Groovy as scripting languages so it&apos;s hard to really&lt;br/&gt;push one over the other. They each have their strengths and weaknesses. Ruby is great for build scripting and general&lt;br/&gt;command line task scripting. It has a rich library of built in functionality, it&apos;s fast and you can get a lot of function&lt;br/&gt;for very little code. Groovy is best when you really need Java integration or Database integration, which is much&lt;br/&gt;simpler using JDBC... or when you need to do something more advanced that, as a Java developer you know how to do in Java,&lt;br/&gt;but not in Ruby. Groovy is just an extension of Java, though a very powerful one.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Boilerplate Ant Build</title>
      <link>http://coffeaelectronica.com/blog/2009/boilerplate-ant-build.html</link>
      <pubDate>Wed, 28 Jan 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/boilerplate-ant-build.html</guid>
      <description>
      &lt;p&gt;I have found it very useful to create a reusable boiler plate &lt;a href=&quot;http://ant.apache.org/&quot;&gt;Ant&lt;/a&gt; &lt;code&gt;build.xml&lt;/code&gt; file that I use&lt;br/&gt;as a starting point for all my projects. With a little bit of configuration property tweaking and perhaps a task&lt;br/&gt;modification here or there you have a standardized build environment which can be used by your IDE or on the command line.&lt;/p&gt;&lt;p&gt;I have provided a copy of my boilerplate build file at the bottom of this posting. It is provided for use under a&lt;br/&gt;creative commons license (&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/us/&quot;&gt;Creative Commons Attribution 3.0 United States License&lt;/a&gt;),&lt;br/&gt;so please maintain the copyright header if you use or extend it.&lt;/p&gt;&lt;p&gt;If you look at the file you will see that the first section has all the properties you need. I used in-file properties rather&lt;br/&gt;than a separate properties file because I don&apos;t really change them often for any given project and it keeps everything&lt;br/&gt;all in one neat little file. Technically you could get more re-usability by using properties files, but that assumes&lt;br/&gt;that you wont be modifying the build file itself for your project, which is something I do from time to time if&lt;br/&gt;something is not quite right for the project.&lt;/p&gt;&lt;p&gt;The first thing you will want to do is update the project name attribute to reflect the name of your project. Then you&lt;br/&gt;will want to update the configuration properties so that everything is correct for your build environment. I tried to&lt;br/&gt;keep everything pretty standard so that they don&apos;t need to change much between projects.&lt;/p&gt;&lt;p&gt;The first property is the &lt;code&gt;war.name&lt;/code&gt; which is the name you want the generated war file to have. I usually leave it set to&lt;br/&gt;the default, which is the project name.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;property name=&amp;quot;war.name&amp;quot; value=&amp;quot;${ant.project.name}&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The next set of properties are the locations of your source directories, which default to the same values that I have set in my IDE&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;property name=&amp;quot;src.dir&amp;quot; value=&amp;quot;src&amp;quot; /&amp;gt;
&amp;lt;property name=&amp;quot;test.src.dir&amp;quot; value=&amp;quot;test&amp;quot; /&amp;gt;
&amp;lt;property name=&amp;quot;web.src.dir&amp;quot; value=&amp;quot;web&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then your external library directory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;property name=&amp;quot;lib.dir&amp;quot; value=&amp;quot;lib&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There has been some confusion around the external library directory property when I have shown this to others. This&lt;br/&gt;is not where all your libraries go, but where you put the libraries you &lt;em&gt;don&apos;t&lt;/em&gt; want in the war file. Things like&lt;br/&gt;JUnit and JMock jars go in there so that they are usable for testing and compiling but you don&apos;t really want them to go&lt;br/&gt;into your deployed artifact. I the jars in this directory mapped on my classpath in my IDE too while those in the&lt;br/&gt;WEB-INF/lib are picked up by default.&lt;/p&gt;&lt;p&gt;The next group of properties define the artifact build locations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;property name=&amp;quot;build.dir&amp;quot; value=&amp;quot;build&amp;quot; /&amp;gt;
&amp;lt;property name=&amp;quot;src.build.dir&amp;quot; value=&amp;quot;${build.dir}/classes&amp;quot; /&amp;gt;
&amp;lt;property name=&amp;quot;test.build.dir&amp;quot; value=&amp;quot;${build.dir}/test-classes&amp;quot; /&amp;gt;
&amp;lt;property name=&amp;quot;test.report.dir&amp;quot; value=&amp;quot;${build.dir}/test-reports&amp;quot; /&amp;gt;
&amp;lt;property name=&amp;quot;webapp.build.dir&amp;quot; value=&amp;quot;${build.dir}/webapp&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, even if your &lt;code&gt;build&lt;/code&gt; directory is called something else, like &lt;code&gt;bin&lt;/code&gt; you can change everything else by updating&lt;br/&gt;that one property, &lt;code&gt;build.dir&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The next property is the location of your local web server, where the war file would be deployed locally. The default is&lt;br/&gt;my symlink to the &lt;code&gt;webapps&lt;/code&gt; directory for my local &lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt; server installation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;property name=&amp;quot;deploy.local.dir&amp;quot; value=&amp;quot;/usr/local/tomcat/webapps&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The final two properties are more environmental. You want to specifiy the JVM version you are targetting and whether or&lt;br/&gt;not you want debugging information to be compiled with your classes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;property name=&amp;quot;jvm.version&amp;quot; value=&amp;quot;1.6&amp;quot; /&amp;gt;
&amp;lt;property name=&amp;quot;debug.enabled&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You probably wont change these all that often, though it might be a good idea to disable debugging on production&lt;br/&gt;builds; I will have to look into supporting that. The &lt;code&gt;jvm.version&lt;/code&gt; setting is nice because I think Ant still&lt;br/&gt;defaults to 1.3 or something like that.&lt;/p&gt;&lt;p&gt;The next section of the file contains all the task definitions. You&lt;br/&gt;will want to tweak these every now and then if you have special needs. You can run the Ant project help command (&lt;code&gt;ant -p&lt;/code&gt;)&lt;br/&gt;to see the descriptions for all the tasks. Yes, I actually added descriptions for all of them.&lt;/p&gt;&lt;p&gt;Some common tasks I use a lot are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ant clean-all test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run all the tests on a clean build.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ant clean-all redeploy-local
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Clean the build content and do a full local server redeployment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ant clean-all test war
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run all the tests on a clean build and produce the war file.&lt;/p&gt;&lt;p&gt;I have used this in about five different projects now and it comes in really handy to have a standardized base point, especially&lt;br/&gt;when you are in a hurry and trying to do a quick command line build of the project; your commands are the same across your projects.&lt;/p&gt;&lt;p&gt;The follow-up article to this one will delve more into using the Ant build as a tool set and about adding scripting layers&lt;br/&gt;on top of the build to make repeated tasks bulletproof and quick.&lt;/p&gt;&lt;p&gt;Let me know if you have any suggestions for modifications or additions to this basic build script. It is a work in progress as&lt;br/&gt;I try to bring more simplicity into my development processes.&lt;/p&gt;&lt;p&gt;You can find an updated version of this build script in my &lt;a href=&quot;http://github.com/cjstehno/AntBoilerplate&quot;&gt;AntBoilerplate&lt;/a&gt; project.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Simple Image Rotation</title>
      <link>http://coffeaelectronica.com/blog/2009/simple-image-rotation.html</link>
      <pubDate>Thu, 8 Jan 2009 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2009/simple-image-rotation.html</guid>
      <description>
      &lt;p&gt;I did a little image rotation today so I figured I&apos;d save my prototype code for future use.&lt;/p&gt;&lt;p&gt;I am using &lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt; to demo the code for this but the Java is exactly the same, just with a&lt;br/&gt;little more formality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;import java.awt.image.*
import java.awt.geom.*
import javax.imageio.*

def image = ImageIO.read(new File(&amp;#39;trees.jpg&amp;#39;))
def w = image.width
def h = image.height

def degrees = Integer.parseInt(args[0])

def sin = Math.abs(Math.sin(Math.toRadians(degrees)))
def cos = Math.abs(Math.cos(Math.toRadians(degrees)))
def neww = (int)Math.floor(w*cos+h*sin)
def newh = (int)Math.floor(h*cos+w*sin)

def dst = new BufferedImage(neww,newh,image.getType())
def g = dst.createGraphics()
g.translate((neww-w)/2, (newh-h)/2)
g.rotate(Math.toRadians(degrees), w/2, h/2)
g.drawRenderedImage(image, null)

if(ImageIO.write(dst,&amp;#39;jpg&amp;#39;,new File(&amp;#39;trees_rotated.jpg&amp;#39;))){
    println &amp;quot;Success!&amp;quot;
} else {
    println &amp;quot;Oh no!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This reads in the original image file, rotates it by the specified number of degrees and corrects the translation&lt;br/&gt;and new image size so that image does not have any odd artifacts from the rotation. This should work for any positive&lt;br/&gt;and negative rotation value.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Floating and Following Div</title>
      <link>http://coffeaelectronica.com/blog/2008/floating-following-div.html</link>
      <pubDate>Tue, 28 Oct 2008 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2008/floating-following-div.html</guid>
      <description>
      &lt;p&gt;I needed one of those &lt;code&gt;DIV&lt;/code&gt;s that appears on call and then stays in view even when you scroll, until you&lt;br/&gt;close it. For lack of a better name, I call it the floating following div, and it&apos;s pretty easy to make. With a little&lt;br/&gt;help from &lt;a href=&quot;http://prototypejs.org/&quot;&gt;Prototype&lt;/a&gt; we can even make it work across the major browsers.&lt;/p&gt;&lt;p&gt;First you need to put the div to be floated somewhere on your page. The page itself can be anything you want.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;div id=&amp;quot;movable&amp;quot;&amp;gt;This is my floating area&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then you need to give it some initial style:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;#movable {
    position: absolute;
    left: 100px;
    width: 200px;
    height: 200px;
    background-color: red;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once all that is on the page, you will need some JavaScript to do the fancy stuff:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;prototype.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    Event.observe(window,&amp;#39;load&amp;#39;,function(evt){
        $(&amp;#39;movable&amp;#39;).hide();
        Event.observe(&amp;#39;showme&amp;#39;,&amp;#39;click&amp;#39;,showDiv);
        Event.observe(window,&amp;#39;scroll&amp;#39;, function(evt){
            $(&amp;#39;movable&amp;#39;).setStyle({ top: 8 + document.viewport.getScrollOffsets().top + &amp;#39;px&amp;#39; });
        });
    });

    function showDiv(evt){
        $(&amp;#39;movable&amp;#39;).show();
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This causes the &quot;movable&quot; element to be hidden. Once the button with an id of &quot;showme&quot; is clicked, the element will&lt;br/&gt;be shown and will then follow along with vertical scrolling, staying up near the top of the view port. The key to this&lt;br/&gt;following motion is the function mapped to the &lt;tt&gt;window&lt;/tt&gt; scrolling event:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$(&amp;#39;movable&amp;#39;).setStyle({ top: 8 + document.viewport.getScrollOffsets().top + &amp;#39;px&amp;#39; });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;a href=&quot;http://prototypejs.org/api/document/viewport/getscrolloffsets&quot;&gt;document.viewport.getScrollOffsets()&lt;/a&gt; function is provided by&lt;br/&gt;Prototype. It&apos;s nothing exciting, but it works... just another thing posted here for future reference.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Ant Input Prompting and Private Targets</title>
      <link>http://coffeaelectronica.com/blog/2008/ant-input-and-private-tasks.html</link>
      <pubDate>Tue, 21 Oct 2008 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2008/ant-input-and-private-tasks.html</guid>
      <description>
      &lt;p&gt;I have found the &lt;a href=&quot;http://ant.apache.org/&quot;&gt;Ant&lt;/a&gt; &lt;code&gt;input&lt;/code&gt; tag useful lately for setting up runtime parameters of an Ant build.&lt;/p&gt;&lt;p&gt;We have a few different server configuration settings that vary based on which server the artifact is being built for&lt;br/&gt;and the &lt;code&gt;input&lt;/code&gt; tag makes this really easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;input message=&amp;quot;Enter configuration name: &amp;quot; addproperty=&amp;quot;config.name&amp;quot; defaultvalue=&amp;quot;${config.name.default}&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The downside of this is that it will prompt you to enter this every time you run the build, which can become&lt;br/&gt;annoying and really prohibits automated building. This is where the &lt;tt&gt;unless&lt;/tt&gt; attribute of the &lt;code&gt;target&lt;/code&gt; tag&lt;br/&gt;comes into play. First create a private target (one whose name starts with &quot;-&quot;) that will prompt for the config name:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;target name=&amp;quot;-prompt-for-config&amp;quot;&amp;gt;
    &amp;lt;input message=&amp;quot;Enter configuration name: &amp;quot; addproperty=&amp;quot;config.name&amp;quot; defaultvalue=&amp;quot;${config.name.default}&amp;quot; /&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then add the &lt;code&gt;unless&lt;/code&gt; attribute to check for the presence of the &lt;code&gt;config.name&lt;/code&gt; property:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;target name=&amp;quot;-prompt-for-config&amp;quot; unless=&amp;quot;config.name&amp;quot;&amp;gt;
    &amp;lt;input message=&amp;quot;Enter configuration name: &amp;quot; addproperty=&amp;quot;config.name&amp;quot; defaultvalue=&amp;quot;${config.name.default}&amp;quot; /&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will cause this task to be run only if the specified property is not set. The you can have other tasks depend&lt;br/&gt;on this private task, which will only run if you have not specified the &lt;code&gt;config.name&lt;/code&gt; property on the ant command&lt;br/&gt;line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;target name=&amp;quot;compile&amp;quot; depends=&amp;quot;-prompt-for-config&amp;quot; description=&amp;quot;Compiles the java sources.&amp;quot;&amp;gt;
    &amp;lt;!-- do stuff --&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Calling ant with the following will not prompt the user for the &lt;code&gt;config.name&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ant compile -Dconfig.name=foo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have used this in a few places now to make the build a bit more flexible, such as for doing server deployments,&lt;br/&gt;artifact installations, etc. It is a handy ant trick to keep in mind.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Calling Parent Code from an IFrame</title>
      <link>http://coffeaelectronica.com/blog/2008/calling-parent-code-from-iframe.html</link>
      <pubDate>Wed, 15 Oct 2008 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2008/calling-parent-code-from-iframe.html</guid>
      <description>
      &lt;p&gt;Every now and then I have needed to access the parent page enclosing an &lt;code&gt;IFrame&lt;/code&gt; and I have never really found a good&lt;br/&gt;straight-forward example of how to do it, so I end up having to work it out each time I need it.&lt;/p&gt;&lt;p&gt;So, for a parent (enclosing page) with an &lt;code&gt;IFrame&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;IFrame test&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        function closeIFrame(){
            if(confirm(&amp;quot;Are you sure you want to close the iframe?&amp;quot;)){
                document.getElementById(&amp;quot;frame&amp;quot;).style.display = &amp;#39;none&amp;#39;;
            }
        }
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;iframe id=&amp;quot;frame&amp;quot; src=&amp;quot;visitor.html&amp;quot; width=&amp;quot;200&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where the &quot;visitor.html&quot; page called by the &lt;code&gt;IFrame&lt;/code&gt; is given as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Visitor&amp;lt;/title&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            function closeMe(){
                parent.closeIFrame();
            }
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;p&amp;gt;Hello, just visiting.&amp;lt;/p&amp;gt;&amp;lt;button onclick=&amp;quot;closeMe()&amp;quot;&amp;gt;Close Me&amp;lt;/button&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the &quot;Close Me&quot; button is clicked, the parent page will dispose of the &lt;code&gt;IFrame&lt;/code&gt;, but the JavaScript&lt;br/&gt;function to do this actually resides in the parent page. One thing to note, is that both pages must reside on the same&lt;br/&gt;domain (or sub-domain) or else the script will not work, due to security restrictions.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Java Regex Search and Replace</title>
      <link>http://coffeaelectronica.com/blog/2008/java-regex-search-and-replace.html</link>
      <pubDate>Tue, 12 Aug 2008 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2008/java-regex-search-and-replace.html</guid>
      <description>
      &lt;p&gt;For many years, I felt that there was nothing &quot;regular&quot; about Regular Expressions, but lately I have been warming&lt;br/&gt;up to them a bit. The &lt;a href=&quot;http://www.bastian-bergerhoff.com/eclipse/features/web/QuickREx/toc.html&quot;&gt;QuickRex&lt;/a&gt; Eclipse plug-in&lt;br/&gt;has really helped make them easier to manage, but that&apos;s not what this post is about.&lt;/p&gt;&lt;p&gt;I recently needed to do a regex-based search and replace operation to convert all the html entities in a string to their&lt;br/&gt;actual character equivalents, basically unescape all the entities in an html string (don&apos;t ask why). With a little regex&lt;br/&gt;and a little searching documentation browsing I found that it is very easy to do. Start out with the pattern, which should&lt;br/&gt;be a static class member (it is thread-safe once created):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private static final Pattern entityPattern = Pattern.compile(&amp;quot;(&amp;amp;amp;[a-z]*;)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The pattern will match any html entity, which have the form &lt;code&gt;&amp;amp;name;&lt;/code&gt;. Next we need the search and replace code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private String unescapeEntities(final String html){
    final StringBuffer buffer = new StringBuffer();
    final Matcher matcher = entityPattern.matcher(html);
    while (matcher.find()) {
        matcher.appendReplacement(
            buffer,
            StringEscapeUtils.unescapeHtml(matcher.group())
        );
    }
    matcher.appendTail(buffer);
    return buffer.toString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your &lt;code&gt;StringBuffer&lt;/code&gt; will end up with the replaced content of your string. The &lt;code&gt;StringEscapeUtils&lt;/code&gt; class is from the&lt;br/&gt;&lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Jakarta Commons - Lang&lt;/a&gt; API. Sorry, this isn&apos;t much of a tutorial... it&apos;s more of a&lt;br/&gt;code snippet for future use.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Embedding Jetty 6 in Spring</title>
      <link>http://coffeaelectronica.com/blog/2008/embedding-jetty-6-in-spring.html</link>
      <pubDate>Tue, 5 Aug 2008 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2008/embedding-jetty-6-in-spring.html</guid>
      <description>
      &lt;p&gt;A few years ago, I wrote a blog entry about &lt;a href=&quot;Embedding-Jetty-in-Spring&quot;&gt;Embedding Jetty in Spring&lt;/a&gt;.&lt;br/&gt;It became quite popular, at least in relation to other pages on my site. Unfortunately, as I noted in the header of that posting, it has&lt;br/&gt;become a bit out-dated as newer versions of Jetty have been released. Well, with a little prodding via emails and a handful of free time,&lt;br/&gt;I have come up with an updated version for &lt;a href=&quot;http://jetty.mortbay.com/&quot;&gt;Jetty 6.1.11&lt;/a&gt; and &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring 2.5.5&lt;/a&gt; that&lt;br/&gt;requires no additional helper-classes.&lt;/p&gt;&lt;p&gt;For simplicity I came up with a spring context for embedding Jetty based on the example included with Jetty which replicates the default&lt;br/&gt;full configuration, &lt;a href=&quot;http://jetty.mortbay.org/jetty-6/xref/org/mortbay/jetty/example/LikeJettyXml.html&quot;&gt;LikeJettyXml.java&lt;/a&gt;. This seemed a&lt;br/&gt;good place to start since you will either need all of that, or slightly less... and removing stuff is simple.&lt;/p&gt;&lt;p&gt;For the most part the spring context configuration mirrors the java source from the example; the only real deviation comes form the life-cycle&lt;br/&gt;addition method calls &lt;code&gt;addLifeCycle()&lt;/code&gt;, which spring does not directly support. To perform that one missing dependency injection, you&lt;br/&gt;can use the spring &lt;code&gt;MethodInvokingFactoryBean&lt;/code&gt; to create a bean and then call a method to inject it into the target bean.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean class=&amp;quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;targetObject&amp;quot; ref=&amp;quot;server.Server&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;targetMethod&amp;quot; value=&amp;quot;addLifeCycle&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;arguments&amp;quot;&amp;gt;
        &amp;lt;list&amp;gt;&amp;lt;ref local=&amp;quot;server.ContextDeployer&amp;quot; /&amp;gt;&amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which simply calls the &lt;code&gt;addLifeCycle()&lt;/code&gt; method on the server instance to add the two deployer instances. The whole context file reads as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
    xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
    xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;

    &amp;lt;bean id=&amp;quot;server.Server&amp;quot; class=&amp;quot;org.mortbay.jetty.Server&amp;quot; destroy-method=&amp;quot;stop&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;threadPool&amp;quot;&amp;gt;
            &amp;lt;bean class=&amp;quot;org.mortbay.thread.QueuedThreadPool&amp;quot;&amp;gt;
                &amp;lt;property name=&amp;quot;maxThreads&amp;quot; value=&amp;quot;100&amp;quot; /&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;connectors&amp;quot;&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;bean class=&amp;quot;org.mortbay.jetty.nio.SelectChannelConnector&amp;quot;&amp;gt;
                    &amp;lt;property name=&amp;quot;port&amp;quot; value=&amp;quot;8080&amp;quot; /&amp;gt;
                    &amp;lt;property name=&amp;quot;maxIdleTime&amp;quot; value=&amp;quot;30000&amp;quot; /&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;handler&amp;quot;&amp;gt;
            &amp;lt;bean class=&amp;quot;org.mortbay.jetty.handler.HandlerCollection&amp;quot;&amp;gt;
                &amp;lt;property name=&amp;quot;handlers&amp;quot;&amp;gt;
                    &amp;lt;list&amp;gt;
                        &amp;lt;ref local=&amp;quot;server.ContextHandlerCollection&amp;quot; /&amp;gt;
                        &amp;lt;bean class=&amp;quot;org.mortbay.jetty.handler.DefaultHandler&amp;quot; /&amp;gt;
                        &amp;lt;bean class=&amp;quot;org.mortbay.jetty.handler.RequestLogHandler&amp;quot;&amp;gt;
                            &amp;lt;property name=&amp;quot;requestLog&amp;quot;&amp;gt;
                                &amp;lt;bean class=&amp;quot;org.mortbay.jetty.NCSARequestLog&amp;quot;&amp;gt;
                                    &amp;lt;constructor-arg value=&amp;quot;cfg/logs/jetty-yyyy_mm_dd.log&amp;quot; /&amp;gt;
                                    &amp;lt;property name=&amp;quot;extended&amp;quot; value=&amp;quot;false&amp;quot;/&amp;gt;
                                &amp;lt;/bean&amp;gt;
                            &amp;lt;/property&amp;gt;
                        &amp;lt;/bean&amp;gt;
                    &amp;lt;/list&amp;gt;
                &amp;lt;/property&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;userRealms&amp;quot;&amp;gt;
            &amp;lt;list&amp;gt;
                &amp;lt;bean class=&amp;quot;org.mortbay.jetty.security.HashUserRealm&amp;quot;&amp;gt;
                    &amp;lt;property name=&amp;quot;name&amp;quot; value=&amp;quot;Test Realm&amp;quot; /&amp;gt;
                    &amp;lt;property name=&amp;quot;config&amp;quot; value=&amp;quot;cfg/etc/realm.properties&amp;quot; /&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;stopAtShutdown&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;sendServerVersion&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean class=&amp;quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;targetObject&amp;quot; ref=&amp;quot;server.Server&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;targetMethod&amp;quot; value=&amp;quot;addLifeCycle&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;arguments&amp;quot;&amp;gt;
            &amp;lt;list&amp;gt;&amp;lt;ref local=&amp;quot;server.ContextDeployer&amp;quot; /&amp;gt;&amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean class=&amp;quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;targetObject&amp;quot; ref=&amp;quot;server.Server&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;targetMethod&amp;quot; value=&amp;quot;addLifeCycle&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;arguments&amp;quot;&amp;gt;
            &amp;lt;list&amp;gt;&amp;lt;ref local=&amp;quot;server.WebAppDeployer&amp;quot; /&amp;gt;&amp;lt;/list&amp;gt;
        &amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean id=&amp;quot;server.ContextHandlerCollection&amp;quot; class=&amp;quot;org.mortbay.jetty.handler.ContextHandlerCollection&amp;quot; /&amp;gt;

    &amp;lt;bean id=&amp;quot;server.ContextDeployer&amp;quot; class=&amp;quot;org.mortbay.jetty.deployer.ContextDeployer&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;contexts&amp;quot; ref=&amp;quot;server.ContextHandlerCollection&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;configurationDir&amp;quot;&amp;gt;
            &amp;lt;bean class=&amp;quot;org.mortbay.resource.FileResource&amp;quot;&amp;gt;
                &amp;lt;constructor-arg value=&amp;quot;file://./cfg/contexts&amp;quot; /&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;scanInterval&amp;quot; value=&amp;quot;1&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;

    &amp;lt;bean id=&amp;quot;server.WebAppDeployer&amp;quot; class=&amp;quot;org.mortbay.jetty.deployer.WebAppDeployer&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;contexts&amp;quot; ref=&amp;quot;server.ContextHandlerCollection&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;webAppDir&amp;quot; value=&amp;quot;cfg/webapps&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;parentLoaderPriority&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;extract&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;allowDuplicates&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
        &amp;lt;property name=&amp;quot;defaultsDescriptor&amp;quot; value=&amp;quot;cfg/etc/webdefault.xml&amp;quot; /&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order to start the server you need to be sure that the &lt;code&gt;MethodInvokingFactoryBeans&lt;/code&gt; have been fired before the server has been started;&lt;br/&gt;the easiest way is to start the server with an external class once the context has loaded.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Main {
    public static void main(String[] args) throws Exception {&amp;lt;
        ApplicationContext context = new FileSystemXmlApplicationContext(&amp;quot;cfg/server-context.xml&amp;quot;);

        Server server = (Server)context.getBean(&amp;quot;server.Server&amp;quot;);
        server.start();
        server.join();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This should be a good starting point and general template for anything you need... just inject or modify whatever configuration setup you&lt;br/&gt;need for your application. I have attached the zipped up Eclipse project I used to create and run this test. You will need the following&lt;br/&gt;jars somewhere on your classpath: ant-1.6.5.jar, commons-el-1.0.jar, commons-logging.jar, jasper-compiler-5.5.15.jar,&lt;br/&gt;jasper-runtime-5.5.1.5.jar, jetty-6.1.11.jar, jetty-util-6.1.11.jar, jsp-api-2.0.jar, servlet-api-2.5-6.1.11.jar, and spring.jar...&lt;br/&gt;all of which can be found in the lib directories of the Spring and Jetty distributions uses.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Rendering Calendars</title>
      <link>http://coffeaelectronica.com/blog/2008/rendering-calendard.html</link>
      <pubDate>Sat, 31 May 2008 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2008/rendering-calendard.html</guid>
      <description>
      &lt;p&gt;I am poking around with an idea I had to generate desktop background images with little calendars embedded in them and I&lt;br/&gt;realized that there is no really easy method of rendering your standard square text calendar display. I decided to play&lt;br/&gt;around with it a bit. The basic algorithm to generate the weeks and their associated days is nothing too complicated:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Figure out what day of the week the first day of the month falls on.&lt;/li&gt;
  &lt;li&gt;Subtract from that the value for Sunday (the start of the week), which assumes that the day of the week field values are sequential (which they are).&lt;/li&gt;
  &lt;li&gt;Iterate through the day of the month keeping track of the week breaks.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I created a factory class, &lt;code&gt;MonthFactory&lt;/code&gt; and a couple helper model objects, &lt;code&gt;Month&lt;/code&gt; and &lt;code&gt;Week&lt;/code&gt; to make things a little&lt;br/&gt;easier. &lt;code&gt;Month&lt;/code&gt; and &lt;code&gt;Week&lt;/code&gt; are pretty simple data objects used to store the month and week data in a meaningful structure.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Week {

    private final String[] days = new String[7];
    private int index = 0;

    public Iterable&amp;lt;string&amp;gt; days(){
        return Arrays.asList(days);
    }

    boolean append(final String day){
        days[index++] = day;
        return index != 7;
    }

    void padding(final int size){
        index = size;
    }

    @Override
    public String toString(){
        return Arrays.toString(days);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I used strings to store the day values, you could also use ints.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Month {

    private final List&amp;lt;Week&amp;gt;; weeks = new LinkedList&amp;lt;Week&amp;gt;();
    private final String name;
    private final int year;

    Month(final String name, final int year){
        this.name = name;
        this.year = year;
    }

    public Iterable&amp;lt;Week&amp;gt; weeks(){
        return weeks;
    }

    public String getName(){return name;}

    public int getYear(){return year;}

    void append(final Week week){
        weeks.add(week);
    }

    @Override
    public String toString() {
        return &amp;quot;{&amp;quot; + name + &amp;quot; &amp;quot; + year + &amp;quot;: weeks=&amp;quot; + weeks.toString();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both of these classes have very limited public interfaces. They exist in the same package as the &lt;code&gt;MonthFactory&lt;/code&gt; class which&lt;br/&gt;is used to build them. External client classes should really only be accessing them as read-only. The &lt;code&gt;MonthFactory&lt;/code&gt; is also&lt;br/&gt;pretty simple, but it does contain the algorithm I mentioned earlier so it is the meat of the whole example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class MonthFactory {

    public static Month create(final int calendarMonth, final int year) throws Exception {
        validate(calendarMonth,year);

        final Calendar cal = Calendar.getInstance();
        cal.set(Calendar.MONTH, calendarMonth);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.set(Calendar.YEAR, year);

        final int daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
        final String name = cal.getDisplayName(Calendar.MONTH,Calendar.LONG,Locale.getDefault());
        final Month month = new Month(name,year);

        Week week = new Week();
        week.padding(cal.get(Calendar.DAY_OF_WEEK) - Calendar.SUNDAY);

        for(int i=1; i&amp;lt;=daysInMonth; i++){
            if(!week.append(String.valueOf(i))){
                month.append(week);
                week = new Week();
            }
        }

        month.append(week);

        return month;
    }

    private static void validate(final int calMon,final int year){
        if(calMon &amp;lt; Calendar.JANUARY || calMon &amp;gt; Calendar.DECEMBER){
            throw new IllegalArgumentException(&amp;quot;Invalid Calendar Month specified: &amp;quot; + calMon);
        }

        if(year &amp;lt; 0){
            throw new IllegalArgumentException(&amp;quot;Year must be non-negative: &amp;quot; + year);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I even threw in some simple input validation for free. Now for a simple use of this code I created a &lt;code&gt;TextCalendar&lt;/code&gt; class&lt;br/&gt;that simply generates a text calendar which will look right if it&apos;s rendered in a fixed-width font.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class TextCalendar {
    public static void main(final String[] args) throws Exception {
        final Month month = MonthFactory.create(Calendar.JULY,2008);
        final StringBuilder str = new StringBuilder();
        final String header = month.getName() + &amp;quot; &amp;quot; + String.valueOf(month.getYear());
        str.append(padding(10 - header.length()/2,&amp;#39; &amp;#39;)).append(header).append(&amp;#39;\n&amp;#39;);

        for(final Week week : month.weeks()){
            for(final String day : week.days()){
                if(day == null){
                    str.append(&amp;quot;  &amp;quot;);
                } else {
                    str.append(day.length() == 2 ? day : &amp;quot; &amp;quot; + day);
                }
                str.append(&amp;quot; &amp;quot;);
            }
            str.append(&amp;#39;\n&amp;#39;);
        }

        System.out.println(str.toString());
    }

    private static String padding(final int size, final char val){
        final char[] pad = new char[size];
        Arrays.fill(pad, val);
        return new String(pad);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This just serves to show how easy this makes calendar rendering. Upon running this little application you will get the&lt;br/&gt;following nicely formatted calendar (I even centered the header):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     July 2008
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If there are existing libraries to do this, I would love to hear about them. I could not find anything. Obviously this&lt;br/&gt;example corresponds to the standard US display of the Gregorian Calendar. I would think that it could be made to work&lt;br/&gt;for other calendars as well, but I have never actually seen any other calendars displayed... I guess I need to travel&lt;br/&gt;the world more. I provide these as examples only; there may be better ways to accomplish this and there are definitely&lt;br/&gt;code modifications and improvements that could be made. I am not currently using this code anywhere... it was just an&lt;br/&gt;experiment. Use at your own risk.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Spring Deserialized Object Factory</title>
      <link>http://coffeaelectronica.com/blog/2008/spring-deserialized-objectfactory.html</link>
      <pubDate>Mon, 28 Apr 2008 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2008/spring-deserialized-objectfactory.html</guid>
      <description>
      &lt;p&gt;I recently had the idea that it would be interesting to have a &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring&lt;/a&gt; factory bean that&lt;br/&gt;would load a serialized object as its object contribution. I have no idea at this point what it would be useful for; it&lt;br/&gt;was just something that popped into my head. My example below describes a license key system that is not based on&lt;br/&gt;anything real so please don&apos;t expect this to be a good license key implementation... it&apos;s just an example of the&lt;br/&gt;deserialized bean factory idea.&lt;/p&gt;&lt;p&gt;First, we need something to serialize. As I mentioned earlier, I am doing a quick and dirty license key system so the&lt;br/&gt;key itself would be a good candidate for the serializable object. Let&apos;s create a license key object as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class LicenseKey implements Serializable {
    private static final long serialVersionUID = -3151020875557193150L;
    private long created;
    private String key;

    public LicenseKey(){
        super();
    }

    public LicenseKey(final long created, final String key){
        this.created = created;
        this.key = key;
    }

    public long getCreated() {return created;}

    public String getKey() {return key;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that it implements the Serializable interface and has a couple of fields that we can later use to prove that&lt;br/&gt;the bean is deserialized and loaded properly. Next, we need to serialize this object into a license key file, which will&lt;br/&gt;later be used by the factory bean. I threw together a simple serializer which also utilizes the&lt;br/&gt;&lt;a href=&quot;http://commons.apache.org/lang&quot;&gt;Jakarta Commons - Lang API&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Serializer {
    public static void main(final String[] args) throws FileNotFoundException {
        final LicenseKey key = new LicenseKey(System.currentTimeMillis(),UUID.randomUUID().toString());
        SerializationUtils.serialize(key, new FileOutputStream(new File(&amp;quot;license.key&amp;quot;)));
        System.out.println(&amp;quot;Done&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This just creates a simple key object and serializes it to the current directory as the &quot;license.key&quot; file, which&lt;br/&gt;we will use later. Now that we have a serialized license key, we need a Spring factory bean to load and instantiate the&lt;br/&gt;&lt;code&gt;LicenseKey&lt;/code&gt; object it represents. The &lt;code&gt;DeserializedObjectFactory&lt;/code&gt; is simply an extension of Spring&apos;s &lt;code&gt;AbstractFactoryBean&lt;/code&gt;&lt;br/&gt;that deserializes the given file resource and verifies that it is an instance of the specified class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class DeserializedObjectFactory extends AbstractFactoryBean {
    private final Class&amp;lt;? extends Serializable&amp;gt; objectType;
    private final Resource resource;

    public DeserializedObjectFactory(final Class&amp;lt;? extends Serializable&amp;gt; objectType, final Resource resource){
        this.objectType = objectType;
        this.resource = resource;
    }

    @Override
    protected Object createInstance() throws Exception {
        final Object obj = SerializationUtils.deserialize(resource.getInputStream());
        Assert.isInstanceOf(objectType, obj, &amp;quot;Serialized object must be of type: &amp;quot; + objectType);
        return obj;
    }

    @Override
    public Class&amp;lt;? extends Serializable&amp;gt; getObjectType() {
        return objectType;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The generic parameter restrictions and the instance checking add a bit of safety to the factory such that it keeps&lt;br/&gt;you from loading something completely unexpected. In order to make use of these beans, we will need some client class to&lt;br/&gt;actually use the deserialized object, and that&apos;s where the &lt;code&gt;LicenseVerifier&lt;/code&gt; class comes in. The license verifier&lt;br/&gt;is a simple class that takes a license key as a parameter and has a verification method that will be used to ensure that&lt;br/&gt;a proper license key is configured.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class LicenseVerifier {
    private static final Log log = LogFactory.getLog(LicenseVerifier.class);
    private LicenseKey licenseKey;

    public void setLicenseKey(final LicenseKey licenseKey) {
        this.licenseKey = licenseKey;
    }

    public void verify(){
        // do some license verification
        Assert.notNull(licenseKey, &amp;quot;No license key exists!&amp;quot;);
        Assert.notNull(licenseKey.getKey(), &amp;quot;Invalid key!&amp;quot;);
        log.info(&amp;quot;License verified: created: &amp;quot; + licenseKey.getCreated() + &amp;quot;, key: &amp;quot; + licenseKey.getKey());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally we need the glue that brings all of this together, the Spring context file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;quot;license.key&amp;quot; class=&amp;quot;spring.DeserializedObjectFactory&amp;quot;&amp;gt;
    &amp;lt;constructor-arg value=&amp;quot;spring.LicenseKey&amp;quot; /&amp;gt;
    &amp;lt;constructor-arg value=&amp;quot;license.key&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;license.verifier&amp;quot; class=&amp;quot;spring.LicenseVerifier&amp;quot; init-method=&amp;quot;verify&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;licenseKey&amp;quot; ref=&amp;quot;license.key&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice the &lt;code&gt;init-method&lt;/code&gt; on the license verifier bean; it is used to ensure that the license is verified&lt;br/&gt;when the context starts up. With that, you can startup the context and watch the magic happen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;new FileSystemXmlApplicationContext(&amp;quot;context.xml&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should get some miscellaneous logging and then the license verification log entry with populated data, which will&lt;br/&gt;look something like this (of course your values will be different):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;INFO: License verified: created: 1209321756486, key: 5ed38eba-799a-4b8c-9bfc-dd539c20bafe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&apos;s all there is to it. Like I said, I am not sure what it would really be useful for but it was an interesting&lt;br/&gt;little experiment. I found it interesting because it would be simple to swap out serialized object files as needed to&lt;br/&gt;provide different instances, in this case different licenses. This concept could also be used with other &quot;serialization&quot;&lt;br/&gt;methods, such as XML or some other custom serializer. I chose the default Java serialization just for ease of&lt;br/&gt;demonstration.&lt;/p&gt;&lt;p&gt;Again I must mention that this simply a demo and is NOT intended to be a legitimate licensing strategy and it&lt;br/&gt;contains MANY security holes. If you use it, you are on your own and I take no responsibility for the results.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Fun With Robot Screen Wrapping</title>
      <link>http://coffeaelectronica.com/blog/2008/fun-with-robot.html</link>
      <pubDate>Fri, 4 Apr 2008 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2008/fun-with-robot.html</guid>
      <description>
      &lt;p&gt;I was poking through the JavaDocs last night and came across a few classes that I had never played with before,&lt;br/&gt;&lt;code&gt;java.awt.Robot&lt;/code&gt; and &lt;code&gt;java.awt.MouseInfo&lt;/code&gt; so I decided to have a little fun. Have you ever wanted your&lt;br/&gt;mouse to be able to wrap around the edge of the screen?&lt;/p&gt;&lt;p&gt;No, well me neither, but I thought it would be fun to implement anyway:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class WrapIt {
    public static void main(String[] args){
        final Robot robot = new Robot();
        final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        final Rectangle screen = new Rectangle(new Point(0,0),screenSize);
        while(true){
            final Point point = MouseInfo.getPointerInfo().getLocation();
            if(point.x &amp;lt;= screen.width-1){
                robot.mouseMove(0,point.y);
            } else if(point.x &amp;lt;= 1){
                robot.mouseMove(screen.width,point.y);
            } else if(point.y &amp;lt;= screen.height-1){
                robot.mouseMove(point.x,0);
            } else if(point.y &amp;lt;= 1){
                robot.mouseMove(point.x,screen.height);
            }
            Thread.sleep(100);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you hit an edge of the screen, this app will cause your mouse cursor to jump to the opposite side of the&lt;br/&gt;screen; it works on all four sides of the screen. I have no idea if this will work on multi-monitor setups; if not, I know it could be made to.&lt;/p&gt;&lt;p&gt;It is interesting that you can control and read the mouse position, even when you are&lt;br/&gt;not &quot;over&quot; java territory (e.g. not over a JFrame or Window). I did not find any way to catch mouse events when not in a java context; you can catch mouse move events over a Java component (e.g. JFrame, etc) but not over others, like the desktop; so the position polling loop was necessary and there seems to be no way to get other events like mouse clicks or drags, which is kind of a bummer.&lt;/p&gt;&lt;p&gt;You could very easily throw a &lt;code&gt;SystemTray&lt;/code&gt; icon around this and turn it into a little app for people who do like this kind of mouse wrapping. If there is anyone who would like something like that I would be happy to code it up and make it available, just let me know (we are talking about an hour of coding so if you want it just ask).&lt;/p&gt;&lt;p&gt;On a final, semi-related note, there is a screen capture method in the Robot class that also sounds like a good&lt;br/&gt;candidate for some play time, but I will save that for another post.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Scaling Images with Groovy</title>
      <link>http://coffeaelectronica.com/blog/2008/scaling-images-with-groovy.html</link>
      <pubDate>Mon, 3 Mar 2008 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2008/scaling-images-with-groovy.html</guid>
      <description>
      &lt;p&gt;I had the need to scale some large JPG images from my camera so I whipped up a quick little&lt;br/&gt;&lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt; script to do the trick.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;// groovy ScaleImages.groovy DIRNAME SCALE%
import javax.imageio.ImageIO
import java.io.File
import java.awt.Image
import java.awt.Color
import java.awt.image.BufferedImage

class ScaleImages {

    static void main(String[] args){
        def directory = new File(args[0])
        if(!directory.isDirectory()){
            println &amp;#39;You must specify a valid directory!&amp;#39;
            System.exit(0)
        }

        def scale = Integer.valueOf(args[1])

        directory.eachFile {
            def image = ImageIO.read(it)
            int w = image.getWidth() * scale / 100
            int h = image.getHeight() * scale / 100

            def scaled = image.getScaledInstance(w,h,Image.SCALE_SMOOTH)

            def newImage = new BufferedImage(w,h,image.getType())
            def graphics = newImage.createGraphics()
            graphics.drawImage(scaled,0,0,w,h,Color.white,null)

            if(ImageIO.write(newImage,&amp;quot;jpg&amp;quot;,new File(it.getParent(),&amp;quot;scaled_${it.name}&amp;quot;))){
                println &amp;quot;scaled: $it&amp;quot;
            } else {
                println &amp;quot;failed: $it&amp;quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s pretty simple. You load the image file to create a &lt;code&gt;BufferedImage&lt;/code&gt;. You then create a scaled&lt;br/&gt;&lt;code&gt;Image&lt;/code&gt; and draw it onto the new empty &lt;code&gt;BufferedImage&lt;/code&gt; and save it off. I would recommend some performance&lt;br/&gt;enhancements if you are doing huge batches of images but for a directory containing a handful of images it works great&lt;br/&gt;and pretty fast. Also, note that this does not handle sub-directories of images, only the directory that you give it.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Cruise Control Project Operations</title>
      <link>http://coffeaelectronica.com/blog/2008/cruise-control-operations.html</link>
      <pubDate>Fri, 8 Feb 2008 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2008/cruise-control-operations.html</guid>
      <description>
      &lt;p&gt;One of the developers I work with figured out the URL for firing the various&lt;br/&gt;&lt;a href=&quot;http://cruisecontrol.sourceforge.net/&quot;&gt;CruiseControl&lt;/a&gt; build operations (resume,&lt;br/&gt;pause, build, etc) and it was jokingly noted that now all we need is a &lt;a href=&quot;http://ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt; script to fire them.&lt;/p&gt;&lt;p&gt;And so, viola! Here is a simple ruby script that will do just that. It will run the specified operation command on one&lt;br/&gt;project (or all if no project is specified). You do have to configure the script with your CruiseControl url and your&lt;br/&gt;project names, but it&apos;s well worth it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;#
# exec_in_cc.rb
#
# Used to perform actions on the projects managed by CruiseControl.
# If no project is specified, the given operation will be run on all projects (internal array of them).
#
# ruby exec_in_cc.rb operation [project]
#
# Christopher J. Stehno (2/7/2008)
#
require &amp;#39;net/http&amp;#39;
require &amp;#39;uri&amp;#39;

# customize these to fit your pojects
cruise_url = &amp;#39;http://builder:8000&amp;#39;
projects = [&amp;#39;nightly-build&amp;#39;,&amp;#39;releases&amp;#39;,&amp;#39;site-build&amp;#39;]

# require the operation param
if ARGV[0] == nil
    puts &amp;quot;You must specify an operation!&amp;quot;
    exit
else
    operation = ARGV[0]
end

# check for specified project, if none use all of them
unless ARGV[1] == nil then projects = [ARGV[1]] end

projects.each {|project|
    url = URI.parse(cruise_url)
    res = Net::HTTP.start(url.host, url.port) {|http|
        http.get(&amp;quot;/invoke?operation=#{operation}&amp;amp;amp;objectname=CruiseControl+Project%3Aname%3D#{project}&amp;quot;)
    }
    success = res.body.index(&amp;#39;Invocation successful&amp;#39;) != nil ? &amp;#39;Success&amp;#39; : &amp;#39;Failed&amp;#39;&amp;lt;
    puts &amp;quot;#{project}.#{operation}: #{success}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This took about 30 minutes to write and will save at least that much time over the life of its use. Ruby is&lt;br/&gt;excellent for this kind of scripting. Something I have tried to do more often is to script tasks like this. You may feel&lt;br/&gt;that you are wasting time when you should be doing other things, but usually with a repetitive task like this you really&lt;br/&gt;notice the value. If you find it useful or come up with some good improvements to it, I would love to hear about them.&lt;/p&gt;&lt;p&gt;After some additional thought, I figured a Groovy implementation would be interesting and easy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package cc

class CruiseExec {
    private static cruiseUrl = &amp;#39;http://builder:8000&amp;#39;
    private static projects = [&amp;#39;nightly-build&amp;#39;,&amp;#39;releases&amp;#39;,&amp;#39;site-build&amp;#39;]

    static void main(args) {
        def operation = null
        if(args.length == 0 || args[0] == null){
            println &amp;#39;No operation specified!&amp;#39;
            System.exit(0)
        } else {
            operation = args[0]
        }

        if(args.length == 2 &amp;amp;&amp;amp; args[1] != null) projects = [args[1]]

        projects.each { project -&amp;gt;
            def url = new URL(&amp;quot;${cruiseUrl}/invoke?operation=${operation}&amp;amp;objectname=CruiseControl+Project%3Aname%3D${project}&amp;quot;)
            def success = url.text.contains(&amp;#39;Invocation successful&amp;#39;)
            println &amp;quot;${project}.${operation}: ${success}&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It was very easy, easier than Ruby in fact since I work primarily in Java so I did not have to go looking up odd&lt;br/&gt;syntax questions as I did when writing the Ruby version. It is interesting to note that in this version I took the more&lt;br/&gt;Object oriented approach and wrote a class rather than a naked script. You could pull the meat out of the main method&lt;br/&gt;and make an even shorter script version if you are so inclined. It&apos;s always interesting to compare the same&lt;br/&gt;functionality across different languages, so I thought I&apos;d share.&lt;/p&gt;&lt;p&gt;Also, it does perform the exact same functionality, so you are welcome to use this version as a replacement for the Ruby version.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Spring Deserialized Object Factory</title>
      <link>http://coffeaelectronica.com/blog/2008/finding-matching-ints.html</link>
      <pubDate>Sat, 2 Feb 2008 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2008/finding-matching-ints.html</guid>
      <description>
      &lt;p&gt;Okay, here is a little question I have taken to asking in the interviews we have been giving lately.&lt;/p&gt;&lt;p&gt;The questions is as follows:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Assume that you have an array of &lt;code&gt;int&lt;/code&gt;s with exactly two of them being equivalent. Write a method to return the &lt;code&gt;int&lt;/code&gt; that is duplicated.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Since most candidates have been failing this one for the most part, I have started compiling a catalog of all the possible and sensible&lt;br/&gt;solutions to the problem. It&apos;s kind of a fun little project. Below are some of the implementations I have come up with. When I came&lt;br/&gt;across this question, it did not have an answer provided. My first shot at it was the following, but without the array sorting. Oops,&lt;br/&gt;without the sorting it works as long as they are next to each other, hence the need for sorting:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public int findMatching(final int[] array){
    Arrays.sort(array);
    for(int i=0; i&amp;lt;array.length-1; i++){
        if(array[i] == array[i+1]) return array[i];
    }
    throw new IllegalArgumentException(&amp;quot;Array contains no matches!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second implementation was something I had as a first thought but could not remember the exact functionality of the &lt;code&gt;Set&lt;/code&gt; &lt;code&gt;add(Object)&lt;/code&gt;&lt;br/&gt;method, which is kind of important in this case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public int findMatching(final int[] array){
    final Set&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;Integer&amp;gt;(array.length);
    for(int i : array){
        if(!set.add(i)) return i;
    }
    throw new IllegalArgumentException(&amp;quot;Array contains no matches!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The third implementation is the one most of our candidates seem to jump for, brute force, comparing every element with every other element&lt;br/&gt;(we still give credit for it though):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public int findMatching(final int[] array){
    for(int i=0; i&amp;lt;array.length; i++){
        for(int j=0; j&amp;lt;array.length; j++){
            if(i != j &amp;amp;&amp;amp; array[i] == array[j]) return array[i];
        }
    }
    throw new IllegalArgumentException(&amp;quot;Array contains no matches!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will notice that I used an &lt;code&gt;IllegalArgumentException&lt;/code&gt; to denote the lack of matches. You can&apos;t really return a -1 or something like&lt;br/&gt;that since your &lt;code&gt;int&lt;/code&gt;s could be of any value.&lt;/p&gt;&lt;p&gt;I am sure that there are one or two more interesting solutions for this problem, but thought I would share what I have found. These are always fun&lt;br/&gt;little code problems to play with. Yes, we are still using this in our interview process, but I am not afraid that a potential candidate will&lt;br/&gt;find this since they generally don&apos;t know my name, and likewise I don&apos;t advertise what company I work for. Actually, I would probably give a&lt;br/&gt;&quot;golf clap&quot; to the candidate that walks into our interview with a print out of this entry.&lt;/p&gt;&lt;h2&gt;Recursive Solution to Finding Ints Question&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally a separate posting on 5/28/2008&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Earlier I showed a few different solutions to the problem. A candidate we had recently suggested solving it via recursion; I decided to whip up a&lt;br/&gt;little recursive solution for my collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static int find(int[] array){
    return scan(new HashSet&amp;lt;Integer&amp;gt;(),array,0);
}

private static int scan(Set&amp;lt;Integer&amp;gt; values, int[] array, int idx){
    if(idx == array.length){
        throw new IllegalArgumentException(&amp;quot;No match exists&amp;quot;);
    } else if(!values.add(array[idx])){
        return array[idx];
    }
    return scan(values,array,++idx);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that this solution requires an additional method to perform the recursion but there are no loops. An alternate&lt;br/&gt;version removes the &lt;code&gt;Set&lt;/code&gt; and uses pre-sorting of the array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static int find(int[] array){
    Arrays.sort(array);
    return scan(array,0);
}

public static int scan(int[] array, int idx){
    if(idx == array.length){
        throw new IllegalArgumentException(&amp;quot;No match exists&amp;quot;);
    } else if(array[idx] == array[idx+1]){
        return array[idx];
    }
    return scan(array,++idx);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This problem has really become an interesting study; as I use it as one of our tests for interview candidates I&lt;br/&gt;really find it an interesting ruler to compare how various developers think.&lt;/p&gt;&lt;p&gt;Two interesting common threads are that most developers find the brute-force approach (double for loop) which is good but very telling, the other is that&lt;br/&gt;when faced with the idea that it is possible an array may be passed in without a match, they struggle on what to do at&lt;br/&gt;that point. The first solution people look at is some signal like a -1 or &lt;code&gt;null&lt;/code&gt;, neither of which works. After&lt;br/&gt;hinting they will come across the idea of the exception but usually want to create their own unique exception for this&lt;br/&gt;method.&lt;/p&gt;&lt;p&gt;I think it would also be an interesting exercise to implement this problem in other languages such as Groovy, Ruby or Scala.&lt;/p&gt;&lt;h2&gt;Finding Matching Ints Using Regex&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally a separate post on 6/42008&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;If you are following along you may have noticed that I have been compiling a long list of solutions to this problem; I was talking&lt;br/&gt;to one of my co-workers, who is not a developer but used to do some Perl hacking, and he suggested that it could be done with&lt;br/&gt;regular expressions.&lt;/p&gt;&lt;p&gt;Lo and behold, with the help of another of my more regular-expression-ized co-workers we found this to be true:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public int findDuplicate(final int[] array){
    final Pattern p = Pattern.compile(&amp;quot;.*?(\\d+. ).*?\\1.*&amp;quot;);
    final Matcher m = p.matcher(join(array));
    if(m.find()){
        return Integer.valueOf(m.group(1).trim());
    }

    throw new IllegalArgumentException(&amp;quot;No match found!&amp;quot;);
}

private String join(final int[] array){
    final StringBuilder str = new StringBuilder();
    for(final int i : array){
        str.append(i).append(&amp;quot; &amp;quot;);
    }
    return str.toString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Granted, it&apos;s not quite as straight-forward as the other solutions, but it is a very novel approach to solving the&lt;br/&gt;problem... leave it to a Perl guy. :-) I wonder what the runtime of this would be?&lt;/p&gt;&lt;h2&gt;Finding Duplicate Ints: PHP&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally a separate post on 8/13/2008&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I have have come across another solution from a php developer that I recently interviewed... in php.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;function findInts($array){
    $out = Array();
    foreach($array as $num){
        if(array_exist($out,$num){
            return $num;
        }
        array_push($num);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;He also mentioned the pre-sorting approach as well in order to speed things up. I still need to fully validate the&lt;br/&gt;php functions that he mentions, but it seems correct. I also didn&apos;t go into the error-case much with him, not really being a php expert myself.&lt;/p&gt;&lt;h2&gt;Find Matching Ints with JavaScript&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally separate post on 10/30/2009&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I realized that I had yet to come up with a JavaScript solution so I decide a quick implementation would be fun.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            function findDup(items){
                items.sort();
                for( var i=0; i&amp;lt;items.length-1; i++){
                    if( items[i] == items[i+1] ) return items[i];
                }
                throw &amp;quot;No duplicate values!&amp;quot;;
            }
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body onload=&amp;quot;alert( findDup( new Array( 6, 9, 2, 5, 1, 6) ) )&amp;quot;&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is not much to it, and nothing really exciting. I also worked up quick versions using &lt;a href=&quot;http://prototypejs.org&quot;&gt;Prototype&lt;/a&gt; and &lt;a href=&quot;http://jquery.com&quot;&gt;JQuery&lt;/a&gt;; however, neither one really provided any useful deviation from the standard JavaScript approach.&lt;/p&gt;&lt;h2&gt;Finding Duplicate Ints: Clojure&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally separate post on 10/23/2009&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Here&apos;s a solution based on &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt;. I worked on the solution to this problem in a few steps, which I will share. First, I assumed that the list of numbers has been sorted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;(defn find-dupint [intseq]
    (loop [result nil its intseq]
        (if (= result (peek its))
            result
            (recur (peek its) (pop its))
        )
    )
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This function simmply iterates over the list of numbers and returns the first number whose value matches the next&lt;br/&gt;number in the sequence. This code will fail if the numers are not in order and the problem definition says that they can&lt;br/&gt;be in any order, so I worked up the following code to sort the numbers before looping through them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;(defn find-dupint [intseq]
    (let [sorint (sort intseq)]
        (loop [result nil its sorint]
            (if (= result (first its))
                result
                (recur (first its) (rest its))
            )
        )
    )
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that I changed &lt;code&gt;(peek coll)&lt;/code&gt; and &lt;code&gt;(pop coll)&lt;/code&gt; to &lt;code&gt;(first coll)&lt;/code&gt; and &lt;code&gt;(rest coll)&lt;/code&gt;, which work on sequences rather&lt;br/&gt;than stacks. I kept getting a &lt;code&gt;ClassCastException&lt;/code&gt; the other way. Now all that&apos;s left is to have an exception thrown&lt;br/&gt;when no duplicated number is found. The function as written returns a &lt;code&gt;nil&lt;/code&gt;, which is ok for Clojure I guess but not&lt;br/&gt;really the same behavior as the other versions of this code as it is defined, so I dipped into the Java&lt;br/&gt;interoperability features to add some exception throwing for the finished product:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;(defn find-dupint [intseq]
    (let [sorint (sort intseq)]
        (loop [result nil its sorint]
            (if (= result (first its))
                (if (nil? result)
                    (throw (new IllegalArgumentException &amp;quot;No duplicate found!&amp;quot;))
                        result
                    )
                (recur (first its) (rest its))
            )
        )
    )
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: the &lt;code&gt;IllegalArgumentException&lt;/code&gt; does not need to be fully qualified because the &lt;code&gt;java.lang&lt;/code&gt; package is imported by&lt;br/&gt;default, just as it is in Java. The output from using this function is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1:1 user=&amp;gt; (find-dupint [1 2 3])
java.lang.IllegalArgumentException: No duplicate found! (repl-1:1)

1:2 user=&amp;gt; (find-dupint [1 2 3 2])
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An intesting side-effect of this version is that you are not constrained to use ints, or even numbers for that&lt;br/&gt;matter. You could actually use any &lt;code&gt;Comparable&lt;/code&gt; object. (It would not be that difficult to add the ability to&lt;br/&gt;really generalize the function by passing in a comparator) A few other comparable objects are tested below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1:1 user=&amp;gt; (find-dupint [&amp;quot;a&amp;quot; &amp;quot;c&amp;quot; &amp;quot;b&amp;quot; &amp;quot;a&amp;quot;])
&amp;quot;a&amp;quot;

1:2 user=&amp;gt; (find-dupint [1.1 1.4 1.3 1.22 1.1])
1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I guess I should rename the function &quot;find-dup&quot; to reflect the broader scope than just integers. At this point,&lt;br/&gt;reviewing the code, it&apos;s not all that less verbose than the Java version, but it gets the job done. I will have to come&lt;br/&gt;back to this problem again as I get more experience with Clojure... I am willing to bet there is a more concise way to&lt;br/&gt;achieve the same results.&lt;/p&gt;&lt;h2&gt;Finding Duplicate Ints: Python&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally separate posting on 11/19/2009&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Here&apos;s a version with Python. It&apos;s actually a very interesting language and I am surprised that I have not really looked into it sooner. It has a rich set of built-in libraries and tons of extension modules. The code I came up with is pretty straight-forward:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;def find_dup_int(items):
    items.sort()
    for i in range(len(items)-1):
        if items[i] == items[i+1]:
            return items[i]
    raise RuntimeError(&amp;#39;No duplicate values found!&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I need to find a handful of other more interesting problems to try when playing with other languages, since this one seems to look basically the same in each language I have tried. I will have to spend a little more time with Python, it feels very useful, and as you can see, not very verbose (though not to a fault).&lt;/p&gt;&lt;h2&gt;Finding Duplicate Ints: Ruby and Groovy&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;Originally separate posting on 2/22010&lt;/p&gt;
&lt;/blockquote&gt;&lt;h3&gt;Groovy Version&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def findDups( n ){
    n.sort()
    for( i in (1..n.size())){
        if(n[i] == n[i-1]) return n[i]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, I am allowing null to be the value returned when no duplicate is found. It does seem to be a more&lt;br/&gt;realistic value for Groovy. It&apos;s a pretty straight forward function, along the same lines as the other languages. I&lt;br/&gt;thought maybe I could find some really cool feature of Groovy that would make this radically different from the Java&lt;br/&gt;version... nope. It does collapse nicely down to a single line though:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def findDups( n ){ n.sort(); for( i in (1..n.size()) ) if(n[i] == n[i-1]) return n[i] }
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Ruby Version&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def findDups( n )
    n.sort!()
    for i in (1..n.size())
        if(n[i] == n[i-1]) then return n[i] end
    end
    return nil
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nothing exciting in either case, but worth doing for completeness.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Circular Arrays</title>
      <link>http://coffeaelectronica.com/blog/2008/circular-arrays.html</link>
      <pubDate>Fri, 25 Jan 2008 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2008/circular-arrays.html</guid>
      <description>
      &lt;p&gt;Another one of those, &quot;well, duh&quot; moments... a very easy way to do wrap-around or circular array indexing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;i = (i + 1) % N
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where i is your current index and N is the length of the array. Say you have an array of five elements. When you&lt;br/&gt;are currently on element of index 2, your next index will be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;i = (2 + 1) % 5 = 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, once you get to the last element, index 4:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;i = (4 + 1) % 5 = 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Viola, you are back at 0 again. I don&apos;t know why but I really neglect the mod operator (%). It has some interesting&lt;br/&gt;uses.&lt;/p&gt;&lt;p&gt;As an example, below is a simple Groovy &lt;code&gt;CircularArray&lt;/code&gt; implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class CircularArray {

    def items = []
    int index = -1

    def next(){
        items[( (index++) + 1) % items.size()]
    }
}

def circ = new CircularArray( items:[&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;] )

10.times {
    def k = circ.next()
    println &amp;quot;$it: $k&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which, when run, will yield:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0: a
1: b
2: c
3: d
4: a
5: b
6: c
7: d
8: a
9: b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A good one to keep handy.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Playlist Randomization</title>
      <link>http://coffeaelectronica.com/blog/2007/playlist-randomization.html</link>
      <pubDate>Fri, 21 Dec 2007 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2007/playlist-randomization.html</guid>
      <description>
      &lt;p&gt;I love &lt;a href=&quot;http://winamp.com/&quot;&gt;WinAmp&lt;/a&gt;; however, I have always felt that it&apos;s playlist randomization was a little on the&lt;br/&gt;weak side. Not really wanting to dive into writing a C++ winamp plugin, I took the alternate approach of writing a&lt;br/&gt;&lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt; script to randomize playlist files.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;// PlaylistRandomizer.groovy
import java.io.File
import java.util.ArrayList
import java.util.Collections
import java.security.SecureRandom

def songs = new ArrayList()
new File(args[0]).eachLine {
    if(!it.startsWith(&amp;#39;#&amp;#39;)){
        songs &amp;lt;&amp;lt; it
    }
}

Collections.shuffle(songs,new SecureRandom())

new File(&amp;quot;random_${args[0]}&amp;quot;).withWriter { writer-&amp;gt;
    songs.each { line-&amp;gt;
        writer.writeLine(line)
    }
}
println &amp;#39;Done.&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You execute it with the file name of the playlist you want to shuffle.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;groovy PlaylistRandomizer rock_n_roll.m3u
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and it will generate a new, shuffled file, &lt;code&gt;random_rock_n_roll.m3u&lt;/code&gt;. It&apos;s pretty simple and straight-forward. I am sure&lt;br/&gt;that I could spend a bit more time with it and pare it down a bit, but isn&apos;t quick simplistic functionality one of the&lt;br/&gt;benefits of scripting languages?&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I used &lt;code&gt;SecureRandom&lt;/code&gt; instead of just the standard &lt;code&gt;Random&lt;/code&gt; because it provides better shuffling, though the&lt;br/&gt;difference is not all that significant.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;For some fun and practice, I figured I should implement the same script in &lt;a href=&quot;http://ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;. I was able to do it in&lt;br/&gt;about ten minutes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# rand_playlist.rb
lines = []
File.open(&amp;quot;#{ARGV[0]}&amp;quot;,&amp;quot;r&amp;quot;) do |file|
    while(line = file.gets)
        unless line[0..0] == &amp;#39;#&amp;#39;
            lines &amp;lt;&amp;lt; line
        end
    end
end

lines.sort! { rand(3) - 1 }

out_file = File.new(&amp;quot;random_#{ARGV[0]}&amp;quot;,&amp;quot;w&amp;quot;);
lines.each do |line|
    out_file.puts line
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You run this one the same as the last, except using ruby:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ruby rand_playlist.rb rock_n_roll.m3u
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I wonder if there are other languages I should try implementing this in.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Export Eclipse Working Sets</title>
      <link>http://coffeaelectronica.com/blog/2007/export-eclipse-working-sets.html</link>
      <pubDate>Fri, 7 Dec 2007 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2007/export-eclipse-working-sets.html</guid>
      <description>
      &lt;p&gt;I came across a question related to this on &lt;a href=&quot;http://eclipsezone.com/&quot;&gt;EclipseZone&lt;/a&gt; where I posted a&lt;br/&gt;&lt;a href=&quot;http://eclipsezone.com/eclipse/forums/t104065.html&quot;&gt;response&lt;/a&gt; (and a follow-up). It seemed like&lt;br/&gt;something that I should blog about for future reference.&lt;/p&gt;&lt;h2&gt;Export Working Set Definition&lt;/h2&gt;&lt;p&gt;If you just want to share your working set definition with other members on your team, it&apos;s very easy.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Via the menu bar: File &amp;gt; &quot;Export...&quot;&lt;/li&gt;
  &lt;li&gt;Select &quot;General&quot; / &quot;Working Sets&quot;&lt;/li&gt;
  &lt;li&gt;Click &quot;Next &amp;gt;&quot;&lt;/li&gt;
  &lt;li&gt;Select the working set(s) you want to export and where you want to export the file.&lt;/li&gt;
  &lt;li&gt;Click &quot;Finish&quot; to perform the export.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You will have a file containing the project-based definition of your working set. This can be imported by your team so&lt;br/&gt;that they can have the same working set, as long as they have the files that it represents with the same paths.&lt;br/&gt;Generally, this is probably a safe assumption for people on the same team using the same IDE.&lt;/p&gt;&lt;h2&gt;Export Working Set Files&lt;/h2&gt;&lt;p&gt;If you want to export the actual files contained in your working set, the steps are a little different, but they make&lt;br/&gt;sense once you think about it.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I generally have the &quot;Top Level Emements&quot; of my views set to &quot;Working Sets&quot;, so this is based on that&lt;br/&gt;assumption. It is easy to toggle (View arrow menu).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
  &lt;li&gt;Right-click on the working set you want to export&lt;/li&gt;
  &lt;li&gt;Select &quot;Export...&quot;&lt;/li&gt;
  &lt;li&gt;Select &quot;File System&quot; (jar and archive will probably work with this too)&lt;/li&gt;
  &lt;li&gt;You will then have the File system export dialog with your working set pre-populated.&lt;/li&gt;
  &lt;li&gt;Select the directory you want to export to&lt;/li&gt;
  &lt;li&gt;You can either export only the directories explicitly defined in your working set using &quot;Create only selected directories&quot; or you can create any missing parent directories using &quot;Create directory structure for files&quot;.&lt;/li&gt;
  &lt;li&gt;Click Finish and you have your exported files.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This method does not export the working set definition, just the files themselves. Using both methods you could export&lt;br/&gt;the working set and the files so that your team can have everything they need. These techniques are useful when sharing&lt;br/&gt;files or when you want to extract a component and create a new project from it.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Mocking those Stubborn Loggers</title>
      <link>http://coffeaelectronica.com/blog/2007/mocking-those-stubborn-loggers.html</link>
      <pubDate>Sat, 24 Nov 2007 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2007/mocking-those-stubborn-loggers.html</guid>
      <description>
      &lt;p&gt;I have run into a couple instances where I would benefit from being able to mock logging, such as when the result&lt;br/&gt;of an operation is only some output to a log file. Reflection comes in very handy for this.&lt;/p&gt;&lt;p&gt;I created a utility method called &lt;code&gt;injectFieldValue&lt;/code&gt; which allows a specified value to be injected into a non-final&lt;br/&gt;field of an object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public static void injectFieldValue(Object target, String fieldName, Object fieldValue) throws Exception {
    final Field logField = target.getClass().getDeclaredField(fieldName);
    logField.setAccessible(true);
    logField.set(target, fieldValue);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It allows you to inject a value into any non-final field of the target class. With this method you can now create a&lt;br/&gt;mock Log object and inject it into your target object under test which then allows you to put expectations on the&lt;br/&gt;logging so that you are sure that it is called correctly. Your mock test code could look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public void testLog() throws Exception {
    final Log log = mock(Log.class);
    checking(new Expectations(){
        {
            one(log).info(&amp;quot;something&amp;quot;);
        }
    });
    MockUtils.injectFieldValue(target,&amp;quot;log&amp;quot;,log);

    target.doSomething();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I don&apos;t recommend this approach for normal coding, but for testing the gloves can come off. Also, I don&apos;t recommend&lt;br/&gt;this for everywhere you have logging, just for those cases when logging is an expected result that needs to be&lt;br/&gt;validated... in other words, not very often. This technique will work for &lt;code&gt;static&lt;/code&gt; loggers but not &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If the field you are mocking is in a parent of your target object, you will need to rewrite this method to&lt;br/&gt;walk up the hierarchy to find the target field. Not hard to do, just not done here.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Creating Spring Contexts Programmatically</title>
      <link>http://coffeaelectronica.com/blog/2007/creating-spring-contexts-programmatically.html</link>
      <pubDate>Thu, 1 Nov 2007 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2007/creating-spring-contexts-programmatically.html</guid>
      <description>
      &lt;p&gt;If you are familiar with the &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring Framework&lt;/a&gt; I am sure that you know how to create a&lt;br/&gt;context and fill it with beans using XML (DTD or Schema) or maybe even using properties files (have to try that one&lt;br/&gt;sometime), but have you ever tried creating a context programmatically... purely in Java? It&apos;s actually not all that&lt;br/&gt;difficult, just a little verbose.&lt;/p&gt;&lt;p&gt;The context itself is created as the &lt;code&gt;GenericWebApplicationContext&lt;/code&gt;. Let&apos;s consider a scenario in which you have two&lt;br/&gt;beans, a Spring MVC &lt;code&gt;Controller&lt;/code&gt; implementation called &lt;code&gt;AddressController&lt;/code&gt;, and a service bean, called &lt;code&gt;AddressService&lt;/code&gt;,&lt;br/&gt;such that the service bean must be injected into the controller bean. First we create the context:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;GenericWebApplicationContext context = new GenericWebApplicationContext();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we create the service bean and add it to the context:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;RootBeanDefinition addressSvcBean = new RootBeanDefinition(AddressService.class);
context.registerBeanDefinition(&amp;quot;addressService&amp;quot;,addressSvcBean);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not too bad. Now the interesting one, the controller will also need a reference to the service bean.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;RootBeanDefinition addressCtrBean = new RootBeanDefinition(AddressController.class);
MutablePropertyValues props = new MutablePropertyValues();
props.addPropertyValue(&amp;quot;addressService&amp;quot;,addressSvcBean);
addressCtrBean.setPropertyValues(props);
context.registerBeanDefinition(&amp;quot;addressController&amp;quot;,addressCtrBean);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that you pass in the &lt;code&gt;addressSvcBean&lt;/code&gt; object to the &lt;code&gt;addressService&lt;/code&gt; property; this is the dependency injection&lt;br/&gt;in action. You now have a context with two beans, one of which depends on the other.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; that an actual controller implementation would probably require more properties to be specified but this is just to show you how it&apos;s done.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Finally you will need to startup the context:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;context.refresh();
context.start();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Why would you ever want to do this over one of the less tedious methods? Maybe you just like doing things in code&lt;br/&gt;or you need a simple context with a few beans, some of which are mocked, and its just easier to handle in code. If&lt;br/&gt;nothing else it&apos;s nice to know that it can be done. I guess that it would also be useful if you had some other&lt;br/&gt;configuration format that you wanted to support... your &quot;parser&quot; would call/generate this code underneath.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Custom Spring Editors</title>
      <link>http://coffeaelectronica.com/blog/2007/custom-spring-editors.html</link>
      <pubDate>Thu, 1 Nov 2007 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2007/custom-spring-editors.html</guid>
      <description>
      &lt;p&gt;I had the need recently to inject an array of strings into a bean property and I was curious about whether or not I could&lt;br/&gt;inject the strings as comma-separated values (CSV). With a little poking around in the &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring API&lt;/a&gt;&lt;br/&gt;I found that the supporting &lt;code&gt;PropertyEditor&lt;/code&gt; is already there, but not configured by default. My next question was about&lt;br/&gt;how you go about configuring custom property editors. Configuring custom property editors is quite easy, you add a&lt;br/&gt;&lt;code&gt;CustomEditorConfigurer&lt;/code&gt; bean to your context which will register itself with the bean factory at load-time. By mapping&lt;br/&gt;your custom editors to the &lt;code&gt;CustomEditorConfigurer&lt;/code&gt;, you register them with the enclosing bean factory... pretty simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;quot;customEditorConfigurer&amp;quot; class=&amp;quot;org.springframework.beans.factory.config.CustomEditorConfigurer&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;customEditors&amp;quot;&amp;gt;
        &amp;lt;map&amp;gt;
            &amp;lt;entry key=&amp;quot;java.lang.String[]&amp;quot;&amp;gt;
                &amp;lt;bean class=&amp;quot;org.springframework.beans.propertyeditors.StringArrayPropertyEditor&amp;quot;&amp;gt;
                    &amp;lt;constructor-arg value=&amp;quot;:&amp;quot; /&amp;gt;
                &amp;lt;/bean&amp;gt;
            &amp;lt;/entry&amp;gt;
        &amp;lt;/map&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the value of the entry key attribute is the full class name of the property type to be handled by the editor.&lt;br/&gt;Only one editor can be registered for a given type. The &lt;code&gt;StringArrayPropertyEditor&lt;/code&gt; is available with the core&lt;br/&gt;Spring API and it will convert a delimited string into a string array. The delimiter is configurable as a constructor&lt;br/&gt;argument; it defaults to comma, but I have overridden it here to use a colon in this case as an example. Once you have&lt;br/&gt;this in place, the added configuration work is done. Let&apos;s create a simple test bean to ensure that the editor is&lt;br/&gt;registered properly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class SomeBean {
    private String[] array;

    public void setArray(String[] array) {this.array = array;}

    public String[] getArray() {return array;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add it to the spring context:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;quot;someBean&amp;quot; class=&amp;quot;SomeBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;array&amp;quot; value=&amp;quot;one:two:three:four&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now if you load the context and pull the bean out you will find that the array property contains four elements, with&lt;br/&gt;values of &quot;one&quot;, &quot;two&quot;, &quot;three&quot;, and &quot;four&quot; respectively. It&apos;s just that easy! Just to verify that we have not lost any&lt;br/&gt;pre-existing functionality, you can add another bean that loads the array using the spring list tag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;quot;someBean2&amp;quot; class=&amp;quot;SomeBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;array&amp;quot;&amp;gt;
        &amp;lt;list&amp;gt;
            &amp;lt;value&amp;gt;alpha&amp;lt;/value&amp;gt;
            &amp;lt;value&amp;gt;bravo&amp;lt;/value&amp;gt;
            &amp;lt;value&amp;gt;charlie&amp;lt;/value&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will notice that this method still works fine as well. There are a few other custom editors that spring provides in&lt;br/&gt;the &lt;code&gt;org.springframework.bean.propertyeditors&lt;/code&gt; package, and it is also quite easy to implement your own, but I&lt;br/&gt;will save that for another day.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Single-line Collection Creation</title>
      <link>http://coffeaelectronica.com/blog/2007/single-line-collection-creation.html</link>
      <pubDate>Tue, 9 Oct 2007 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2007/single-line-collection-creation.html</guid>
      <description>
      &lt;p&gt;I like having nice compact code. No, I am not one of those &quot;write the whole app on one line&quot; developers, but I do&lt;br/&gt;like code collapsed and out of the way. One of the things that has always annoyed me was that while you can create and&lt;br/&gt;populate an array on one line, you cannot do the same with &lt;code&gt;Map&lt;/code&gt;s, &lt;code&gt;List&lt;/code&gt;s, and &lt;code&gt;Set&lt;/code&gt;s: but, I finally realized that&lt;br/&gt;there is a very simple way to do it using instance initializers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Map&amp;lt;String,String&amp;gt; map = new HashMap&amp;lt;String, String&amp;gt;(){{ put(&amp;quot;akey&amp;quot;,&amp;quot;avalue&amp;quot;); }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Basically you are anonymously extending the &lt;code&gt;HashMap&lt;/code&gt; and calling the &lt;code&gt;put()&lt;/code&gt; method to populate the data. Notice the&lt;br/&gt;double curley braces, which signify instance initialization.&lt;/p&gt;&lt;p&gt;I am not suggesting that all of your collection populating should be done this way; however, it is nice when you simply&lt;br/&gt;want a single value put in a map for some reason.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Recursion vs Iteration</title>
      <link>http://coffeaelectronica.com/blog/2007/recursion-vs-iteration.html</link>
      <pubDate>Fri, 28 Sep 2007 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2007/recursion-vs-iteration.html</guid>
      <description>
      &lt;p&gt;Say you have a directory under which there can be multiple sub-directories of infinite depth each with any number&lt;br/&gt;of files. If you wanted to walk down the directory tree and do some sort of processing of the files the first thing that&lt;br/&gt;always came to my mind was recursion. Write a little recursive method to iterate over the files and call the method&lt;br/&gt;again on directories, performing the processing as you go. Something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;void walk(File dir){
    for(File item : dir.listFiles()){
        if(item.isDirectory()){
            walk(item);
        } else {
            // process file
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, this works fine and I have never run into problems with the approach; however, the iterative approach can be a&lt;br/&gt;useful and often more efficient alternative. Rather than recursively calling the &lt;code&gt;walk()&lt;/code&gt; method, perform the&lt;br/&gt;looping and use a &lt;code&gt;Stack&lt;/code&gt; object to maintain the set of directories to be searched. Here is what I mean:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;void walk(File dir){
    Stack&amp;lt;File&amp;gt; stack = new Stack&amp;lt;File&amp;gt;();
    stack.push(dir);

    while(!stack.isEmpty()){
        for(File item : stack.pop().listFiles()){
            if(item.isDirectory()){
                stack.push(item);
            } else {
                // process file
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This method does the same thing but without recursion. I would like to do some profiling of the two approaches to see&lt;br/&gt;how each performs for various directory structures.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Map Iteration Tip</title>
      <link>http://coffeaelectronica.com/blog/2007/map-iteration-tip.html</link>
      <pubDate>Thu, 27 Sep 2007 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2007/map-iteration-tip.html</guid>
      <description>
      &lt;p&gt;Say you have a &lt;code&gt;Map&lt;/code&gt; and that you need to iterate over its contents and do something with both the key and&lt;br/&gt;the value for each mapping. I have often seen the following code used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Iterator i = map.keySet().iterator();
    while(i.hasNext()){
    Object key = i.next();
    Object val = map.get(key);
    // do something with them
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While this is correct and generally there is nothing wrong with it, you are doing an extra &lt;code&gt;get()&lt;/code&gt; call into the&lt;br/&gt;map; however, if you iterate over the entry Set you can remove that extra call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Iterator i = map.entrySet().iterator();
while(i.hasNext()){
    Entry entry = (Entry)i.next();
    Object key = entry.getKey();
    Object val = entry.getValue();
    // do something with them
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also, as a side note, with Java 5 and above you can use the new foreach loop to simplify things even more:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;for(Entry&amp;amp;lt;object,object&amp;amp;gt; entry : map.entrySet()){
    Object key = entry.getKey();
    Object val = entry.getValue();
    // do something
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s not going to double your processing speed or anything, but it is a little more efficient, especially when you are&lt;br/&gt;iterating over a large map of items.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Are Still You Mocking Me?</title>
      <link>http://coffeaelectronica.com/blog/2007/are-you-still-mocking-me.html</link>
      <pubDate>Thu, 20 Sep 2007 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2007/are-you-still-mocking-me.html</guid>
      <description>
      &lt;p&gt;&lt;a href=&quot;http://jmock.org/&quot;&gt;JMock 2&lt;/a&gt; came out not too long ago and after some initial worry about backwards compatibility I decided to&lt;br/&gt;give it a try. It plays very nicely with version one, but you will want to run out and convert all of your tests once you&lt;br/&gt;see how truly beautiful version two is. A few years ago, I wrote a brief article on unit testing with JMock called&lt;br/&gt;&quot;&lt;a href=&quot;Are-You-Mocking-Me%3F&quot;&gt;Are You Mocking Me?&lt;/a&gt;&quot;. I would like to showcase some of the new goodies in version two by&lt;br/&gt;revisiting that article and converting the examples to the newer version.&lt;/p&gt;&lt;p&gt;You should at least skim the other article to get a feel for the example at hand as I will be covering mocking&lt;br/&gt;differences, not the original issue of mock testing. In the example, our test was written as an extension of&lt;br/&gt;&lt;code&gt;MockObjectTestCase&lt;/code&gt;, this is still the case (pardon the pun), except that the package is different, we are&lt;br/&gt;now using the &lt;code&gt;org.jmock.integration.junit3.MockObjectTestCase&lt;/code&gt; class from version two. It serves basically&lt;br/&gt;the same purpose, to provide some helper methods. Our our original test case was:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        Mock mockPageCtx = new Mock(PageContext.class);
        HelloTag helloTag = new HelloTag();
        helloTag.setPageContext((PageContext)mockPageCtx.proxy());
        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;,helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which, when updated will become:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        final PageContext pageCtx = mock(PageContext.class);
        final HelloTag helloTag = new HelloTag();
        helloTag.setPageContext(pageCtx);
        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;),helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The difference is subtle but very interesting. Now instead of a &lt;code&gt;Mock&lt;/code&gt; object, we have an instance of the&lt;br/&gt;object that was mocked and we no longer need to call the &lt;code&gt;proxy()&lt;/code&gt; method and do the casting. The second example&lt;br/&gt;adds a stubbed method, which after using JMock for a while I realized was not such a great thing, since it does not&lt;br/&gt;really verify that it was called, just that it can be called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        Mock mockPageCtx = new Mock(PageContext.class);
        mockPageCtx.stubs().method(&amp;quot;findAttribute&amp;quot;).with(eq(&amp;quot;foo&amp;quot;)).will(returnValue(&amp;quot;Mr. Anderson&amp;quot;));
        HelloTag helloTag = new HelloTag();
        helloTag.setPageContext((PageContext)mockPageCtx.proxy());
        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;,helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The new version both takes care of that omission and updates the code to use the new expectation definition method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        final PageContext pageCtx = mock(PageContext.class);
        checking(new Expectations(){
            {
                one(pageCtx).findAttribute(&amp;quot;foo&amp;quot;); will(returnValue(&amp;quot;Mr. Anderson&amp;quot;));
            }
        });

        final HelloTag helloTag = new HelloTag();
        helloTag.setPageContext(pageCtx);
        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;),helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, the first time I saw the code in the checking method, I had to double check that I was looking at a Java&lt;br/&gt;example. Basically you are creating an anonymous extension of the &lt;code&gt;Expectations&lt;/code&gt; class and then adding an&lt;br/&gt;instance initializer to it (the inner curly braces) to provide the expectations themselves. Notice that the method is&lt;br/&gt;actually being called on the mocked object; it&apos;s not a string, which means that refactoring will not break your mock&lt;br/&gt;tests. If you have never run into that problem with version one, count yourself lucky. Okay, I am going to jump down to&lt;br/&gt;the final code to finish up:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        Mock mockJspWriter = new Mock(JspWriterMockAdapter.class);
        mockJspWriter.expects(once()).method(&amp;quot;print&amp;quot;)
            .with(eq(&amp;quot;Hello, Mr. Anderson!&amp;quot;));
        Mock mockPageCtx = new Mock(PageContext.class);
        mockPageCtx.stubs().method(&amp;quot;findAttribute&amp;quot;).with(eq(&amp;quot;matrix&amp;quot;))
            .will(returnValue(&amp;quot;Mr. Anderson&amp;quot;));
        mockPageCtx.stubs().method(&amp;quot;getOut&amp;quot;).withNoParameters()
            .will(returnValue((JspWriter)mockJspWriter.proxy()));

        HelloTag helloTag = new HelloTag();
        helloTag.setPageContext((PageContext)mockPageCtx.proxy());
        helloTag.setId(&amp;quot;matrix&amp;quot;);
        helloTag.doStartTag();
        helloTag.doEndTag();

        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;,helloTag.buildOutput());

        mockJspWriter.verify();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With version two you can mock objects that do not have an empty constructor, though you have to set a non-default&lt;br/&gt;&quot;Imposterizer&quot;. This negates the need for the adapter class defined in the old article.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public HelloTagTest(){
        setImposterizer(ClassImposterizer.INSTANCE);
    }

    public void testHello() throws Exception {
        final JspWriter jspWriter = mock(JspWriter.class);
        checking(new Expectations(){
            {
                one(jspWriter).print(&amp;quot;Hello, Mr. Anderson!&amp;quot;);
            }
        });

        final PageContext pageCtx = mock(PageContext.class);
        checking(new Expectations(){
            {
                one(pageCtx).findAttribute(&amp;quot;martix&amp;quot;); will(returnValue(&amp;quot;Mr. Anderson&amp;quot;));
                one(pageCtx).getOut(); will(returnValue(jspWriter));
            }
        });

        final HelloTag helloTag = new HelloTag();
        helloTag.setPageContext(pageCtx);
        helloTag.setId(&amp;quot;matrix&amp;quot;);
        helloTag.doStartTag();
        helloTag.doEndTag();

        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;),helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can&apos;t tell me that is not cleaner and more straight-forward. You could actually collapse the&lt;br/&gt;&lt;code&gt;checking()&lt;/code&gt; methods into one if you wanted to. I tend to group them like the example above since it can often&lt;br/&gt;reveal common blocks of code that can be extracted into separate shared methods. The is a lot more to discuss with JMock&lt;br/&gt;but this gives you a good overview based on old version one code.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Mocking Objects with Non-empty Constructors</title>
      <link>http://coffeaelectronica.com/blog/2007/mocking-objects-with-non-empty-constructors.html</link>
      <pubDate>Thu, 20 Sep 2007 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2007/mocking-objects-with-non-empty-constructors.html</guid>
      <description>
      &lt;p&gt;While writing mock objects with &lt;a href=&quot;http://jmock.org/&quot;&gt;JMock&lt;/a&gt;, I have run into a reoccurring issue, you&lt;br/&gt;cannot mock concrete classes that do not have an empty constructor (this has been addressed by the JMock development&lt;br/&gt;team; however, the specific code line has not yet been released). Sometimes, for one reason or another, you have neither&lt;br/&gt;an interface nor empty constructor to mock an object with.&lt;/p&gt;&lt;p&gt;The way JMock creates its proxied mock objects is &quot;on creation&quot;, meaning that when you create the mock, the proxy&lt;br/&gt;object is created and stored, thereby not allowing you any way to specify constructor arguments. With a little extension&lt;br/&gt;to the mocking API you can still mock those classes. The solution is a simple extension of the&lt;br/&gt;&lt;a href=&quot;http://cglib.sourceforge.net/&quot;&gt;CGLIB&lt;/a&gt;-based functionality that is already there such that the proxy is&lt;br/&gt;created only when the &lt;code&gt;proxy()&lt;/code&gt; method is called. The code of the two classes needed is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class CGLIBCoreLazyMock extends AbstractDynamicMock implements MethodInterceptor {
    private Enhancer enhancer;
    private Class[] argTypes;
    private Object[] args;
    private Object proxy;

    public CGLIBCoreLazyMock(Class mockedType,Class[] argTypes,Object[] args){
        super(
            mockedType,
            mockNameFromClass(mockedType),
            new LIFOInvocationDispatcher()
        );
        this.argTypes = argTypes;
        this.args = args;
        this.enhancer = new Enhancer();
        enhancer.setSuperclass(mockedType);
        enhancer.setCallback(this);
    }

    public Object proxy() {
        if(proxy == null){
            this.proxy = enhancer.create(argTypes,args);
        }
        return(proxy);
    }

    public Object intercept(Object thisProxy, Method method, Object[] args, MethodProxy superProxy ) throws Throwable {
        return mockInvocation(new Invocation(proxy,method,args));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then a Mock extension.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class LazyMock extends org.jmock.Mock {
    public LazyMock(Class mockedType,Class[] argTypes,Object[] args){
        super(new CGLIBCoreLazyMock(mockedType,argTypes,args));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By adding this functionality to JMock, you can mock these classes and still use all of the stub and expectation&lt;br/&gt;features that JMock provides. My first resolution to this problem was a quick custom hack using CGLIB. As it threatened&lt;br/&gt;to get more complex, I took a peek at the JMock source and found that it would not be hard to implement. I guess I could&lt;br/&gt;have gotten the source and added it directly to their code base, and I even looked at doing that right off, but their&lt;br/&gt;project was Ant-based and seemed to be missing some of the pieces required for the build. I just made a little extension&lt;br/&gt;jar and it seems to work well enough.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; &lt;a href=&quot;http://jmock.org/&quot;&gt;JMock 2&lt;/a&gt; fixes this issue internally and has a lot of other improvements. See&lt;br/&gt;&lt;a href=&quot;Are-You-Still-Mocking-Me%3F&quot;&gt;Are You Still Mocking Me?&lt;/a&gt; for updated information.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Velociscript</title>
      <link>http://coffeaelectronica.com/blog/2007/velociscript.html</link>
      <pubDate>Fri, 6 Jul 2007 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2007/velociscript.html</guid>
      <description>
      &lt;p&gt;I was toying with the idea of &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;velocity&lt;/a&gt;-like expression evaluation and replacement on the&lt;br/&gt;client-side and I came up with this handy little JavaScript function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function ev(str,model){
    var buf = &amp;quot;&amp;quot;;
    for(var t=0; t&amp;lt;str.length; t++){
        var tok = str.charAt(t);
        if(tok == &amp;quot;$&amp;quot; &amp;amp;&amp;amp; str.charAt(t+1) == &amp;quot;{&amp;quot;){
            t += 2;
            tok = str.charAt(t);
            var expr = &amp;quot;&amp;quot;;
            while(tok != &amp;quot;}&amp;quot;){
                expr += tok;
                t++;
                tok = str.charAt(t);
            }
            buf += eval(expr);
        } else {
            buf += tok;
        }
    }
    return(buf);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will evaluate the given string using the specified model object (or null). The template string may also access&lt;br/&gt;global JavaScript functions or any other valid JavaScript. An example of its usage is shown below. First the helper&lt;br/&gt;function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function onGo(){
    var resultElt = document.getElementById(&amp;quot;result&amp;quot;);
    resultElt.innerHTML = ev(resultElt.innerHTML,new Date());
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then the HTML that calls the helper function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;Name: &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;name&amp;quot; /&amp;gt; &amp;lt;button onclick=&amp;quot;doGo()&amp;quot;&amp;gt;Go&amp;lt;/button&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;span id=&amp;quot;result&amp;quot;&amp;gt;
Your name is: ${document.getElementById(&amp;quot;name&amp;quot;).value} and 
today is: ${model.getMonth()+1}/${model.getDate()}/${model.getFullYear()}
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you enter a name and click &quot;Go&quot;, the template string will be replaced by the evaluated string which contains the&lt;br/&gt;name value from the form field and the formatted date. The model object passed in was a JavaScript &lt;code&gt;Date&lt;/code&gt; object,&lt;br/&gt;but it could have been any object. This still needs a little work and could use some regex love from a regex guru, but&lt;br/&gt;it works on both IE and FireFox. It might be interesting to expand this a bit more to create a Velociscript object&lt;br/&gt;engine similar to Velocity itself so that templates can be managed and cached... we&apos;ll see what happens when I start&lt;br/&gt;using this code.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>When Ajax was just a Cleanser</title>
      <link>http://coffeaelectronica.com/blog/2006/when-ajax-was-just-a-cleanser.html</link>
      <pubDate>Tue, 14 Nov 2006 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2006/when-ajax-was-just-a-cleanser.html</guid>
      <description>
      &lt;blockquote&gt;&lt;p&gt;Original Posting: 11/14/2006&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;A few years ago the company I was working for did the &lt;a href=&quot;http://simcityscape.com/&quot;&gt;SimCityScape&lt;/a&gt; (now long gone, but you&lt;br/&gt;can view an &lt;a href=&quot;http://web.archive.org/web/20041204013218/http://simcity.ea.com/scape/&quot;&gt;Archived version&lt;/a&gt;) web interface,&lt;br/&gt;which was the online component to the SimCity 2 game (EA Games/Maxis). I was the developer assigned to do the high-end&lt;br/&gt;JavaScript and any other programming for the site, while the CSS and design work was done by one of our graphic designers.&lt;br/&gt;One of the requirements was that the game interface should not have to reload when an action is performed... it was a very&lt;br/&gt;heavy interface with a pile of images that all had to be placed with some complex JavaScript -- to reload this page with&lt;br/&gt;each action would have made the game unplayable.&lt;/p&gt;&lt;p&gt;These days I am sure the first thing that pops into your head is &quot;AJAX, baby!&quot;... well maybe without the &quot;baby&quot; part;&lt;br/&gt;however, back a couple years ago Ajax was still just a cleanser and there was no well-supported means of accomplishing&lt;br/&gt;&quot;behind the scenes&quot; data transfer without a page reload.&lt;/p&gt;&lt;p&gt;So what did I do? Well, I&apos;ll tell you but you have to promise you won&apos;t run away screaming... I am going to say a&lt;br/&gt;word that has a lot of undue negativity associated with it... applet.&lt;/p&gt;&lt;p&gt;Yes, I said it; I used an applet embedded in the page to allow the interaction on the front end to communicate with the&lt;br/&gt;backend, sans reload. It worked great, though I am not saying there weren&apos;t some issues with it, especially since we had&lt;br/&gt;a &quot;no plugin&quot; requirement put on us, meaning that I only had the MS IE JVM (which is still lost somewhere around Java&lt;br/&gt;1.1) available to me. I was able to use JavaScript to interface with the applet on the page which would fire off a&lt;br/&gt;request to the server. The server response was formatted text that was parsed into a data structure and returned to the&lt;br/&gt;JavaScript on the page (no &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt; back then either). The nice thing about using an applet&lt;br/&gt;was that you could pass Java objects back to JavaScript and &quot;just use them&quot;. No fuss. No conversion.&lt;/p&gt;&lt;p&gt;Today I had the thought that even with all of this Ajax goodness, there still may be an interest in using an applet... so I will&lt;br/&gt;work a simple little example that does everything I mentioned above.&lt;/p&gt;&lt;p&gt;Let&apos;s just make a simple data retrieval applet to demonstrate my point. You can take it from there if you are interested.&lt;br/&gt;The applet itself is quite simple. You just want to extend &lt;code&gt;JApplet&lt;/code&gt; and override the &lt;code&gt;init()&lt;/code&gt; method.&lt;br/&gt;All we are doing in our &lt;code&gt;init()&lt;/code&gt; is getting the server url (there are other ways of getting this, but this is&lt;br/&gt;nice and easy). The applet code is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class ControllerApplet extends JApplet {
    private String baseUrl;

    public void init() {
        this.baseUrl = getParameter(&amp;quot;base.url&amp;quot;);
        super.init();
    }

    public Map retrieveData(int id) throws Exception {
        Map map = new HashMap();
        URL url = new URL(baseUrl + &amp;quot;?pid=&amp;quot; + id);
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = reader.readLine();
            if(line != null){
                String[] nvps = line.split(&amp;quot;;&amp;quot;);
                for(int n=0; n&amp;lt;nvps.length; n++){
                    String[] parts = nvps[n].split(&amp;quot;:&amp;quot;);
                    ap.put(parts[0],parts[1]);
                }
            }
        } catch(Exception ex){throw ex;}
        finally {
            if(reader != null){
                try {reader.close();} catch(Exception e){}
            }
        }

        return(map);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will notice that the interesting method is the &lt;code&gt;retrieveData(int)&lt;/code&gt; method. This is where the fun is.&lt;br/&gt;This method opens a stream to a local url (must be on the same server) and retrieves data from a JSP page (shown later)&lt;br/&gt;using a parameter. The data returned is read into a map which will then be used by the JavaScript that calls the applet.&lt;/p&gt;&lt;p&gt;Let&apos;s embed this applet in a page and see something happen. I am only going to show the important fragments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;applet name=&amp;#39;controller&amp;#39; code=&amp;#39;controller.ControllerApplet&amp;#39; width=&amp;#39;0&amp;#39; height=&amp;#39;0&amp;#39; mayscript=&amp;#39;mayscript&amp;#39;&amp;gt;
    &amp;lt;param name=&amp;#39;base.url&amp;#39; value=&amp;#39;http://localhost:8080/data.jsp&amp;#39; /&amp;gt;
&amp;lt;/applet&amp;gt;

&amp;lt;form name=&amp;#39;theForm&amp;#39;&amp;gt;
    Person: &amp;lt;select name=&amp;#39;pid&amp;#39;&amp;gt;
        &amp;lt;option value=&amp;#39;1&amp;#39;&amp;gt;Abe Ableman&amp;lt;/option&amp;gt;
        &amp;lt;option value=&amp;#39;2&amp;#39;&amp;gt;Bob Baker&amp;lt;/option&amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;button onClick=&amp;#39;doSubmit(document.theForm.pid.value)&amp;#39;&amp;gt;Retrieve Info&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There is a lot to look at here. The first thing is the applet tag (you probably should use the Java Plugin&lt;br/&gt;object/embed tags, but this works for both IE and FireFox). The applet tag is given a name so that it can be easily&lt;br/&gt;referenced and &lt;code&gt;mayscript&lt;/code&gt; is set so that we can call the applet using JavaScript. Also of note is the fact that&lt;br/&gt;this applet is 0 by 0; It&apos;s a stealth applet.&lt;/p&gt;&lt;p&gt;The form is just a simple select list to pick a person that you want to retrieve information about. Now we need the&lt;br/&gt;JavaScript function that does the work:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function doSubmit(pid){
    try {
        var data = document.applets[&amp;#39;controller&amp;#39;].retrieveData(pid);
        var info = &amp;#39;Name: &amp;#39; + data.get(&amp;#39;Name&amp;#39;) + &amp;#39;\nDepartment: &amp;#39; + data.get(&amp;#39;Department&amp;#39;) + &amp;#39;\nTitle: &amp;#39; + data.get(&amp;#39;Title&amp;#39;);
        alert(info);
    } catch(ex){
        alert(&amp;#39;Exception: &amp;#39; + ex.toString());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That wasn&apos;t too bad. Basically all you have to do is call the &lt;code&gt;retrieveData(int)&lt;/code&gt; method on the applet and&lt;br/&gt;the applet does the rest. One feature I have always liked about this is the ability to pass actual Java objects from the&lt;br/&gt;applet to the JavaScript. You will note that the data structure used here is a &lt;code&gt;Map&lt;/code&gt; and JavaScript has no&lt;br/&gt;problems letting you handle it on the client side.&lt;/p&gt;&lt;p&gt;The JSP page I used for this is just a simple data switch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;%@ page language=&amp;quot;java&amp;quot; contentType=&amp;quot;text/plain&amp;quot; pageEncoding=&amp;quot;UTF-8&amp;quot;%&amp;gt;&amp;lt;%
String pid = request.getParameter(&amp;quot;pid&amp;quot;);
if(pid != null &amp;amp;&amp;amp; pid.equals(&amp;quot;1&amp;quot;)){
    out.println(&amp;quot;Name:Abe Ableman;Department:Accounting;Title:Head Bean Counter;&amp;quot;);
} else if(pid != null &amp;amp;&amp;amp; pid.equals(&amp;quot;2&amp;quot;)){
    out.println(&amp;quot;Name:Bob Baker;Department:Development;Title:Code Slave;&amp;quot;);
} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ultimately that&apos;s all there is to it and this example works on IE 6 and FireFox 1.5. You can expand this to use&lt;br/&gt;XML, SOAP, formal HTTP clients, etc, but this is the meat of it all. The big problem you run into is security restraints&lt;br/&gt;that keep you in your own domain and the fact that the applet must be loaded before you can use it. The latter seems&lt;br/&gt;obvious, but I ran into cases where things were not loaded as you would expect.&lt;/p&gt;&lt;p&gt;In my opinion, Ajax is a more stable way of doing things, but you should always keep alternatives like this in mind.&lt;br/&gt;Applets got a bad reputation over the years that I don&apos;t think they really deserve; they were an amazing addition to the&lt;br/&gt;web when they came out and they can still be pretty cool.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Are You Mocking Me?</title>
      <link>http://coffeaelectronica.com/blog/2006/are-you-mocking-me.html</link>
      <pubDate>Wed, 20 Sep 2006 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2006/are-you-mocking-me.html</guid>
      <description>
      &lt;p&gt;Most of us agree that unit testing is an important part of development and that unit tests should be isolated as&lt;br/&gt;much as possible from external configuration and management issues so that you test only the object under examination&lt;br/&gt;and not the rest of the environment surrounding them; this is where mocking comes in handy.&lt;/p&gt;&lt;p&gt;Let&apos;s say I want to develop a JSP tag that pulls a name from somewhere in the scope available to the tag and then renders a&lt;br/&gt;hello message to the given name. It&apos;s not a very useful tag, but it will work as an example. First, setup the test and a&lt;br/&gt;method to test for the desired output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends TestCase {
    public void testHello() throws Exception {
        HelloTag helloTag = new HelloTag();
        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;, helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am using test-driven development techniques here, so we want to start simple and build only what we need to&lt;br/&gt;accomplish our goal. When you compile this code (I am intentionally leaving out imports to save space) it will fail&lt;br/&gt;because we have not yet created a HelloTag class. Let&apos;s do that now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTag extends TagSupport {
    String buildOutput(){}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that I also added the &lt;code&gt;buildOutput()&lt;/code&gt; method. It is a package-scoped method because it is the method&lt;br/&gt;we will be testing for the tag output. This allows the testing of the tag without having to worry about start and end&lt;br/&gt;tag support right away. Both classes should now compile, but the test will fail. The quickest way to get the test to&lt;br/&gt;work is to fake the return value from &lt;code&gt;buildOutput()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTag extends TagSupport {
    String buildOutput(){
        return( &amp;quot;Hello, Mr. Anderson!&amp;quot; );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you run the test now, everything is green, though not very useful. We want to be able to pull the name of the&lt;br/&gt;person from the page context. The page context is passed to the tag by the tag container, so how do we use it &quot;out of&lt;br/&gt;the container&quot; This is where mocking comes into play. I use &lt;a href=&quot;http://jmock.org/&quot;&gt;JMock&lt;/a&gt; for mocking. It is&lt;br/&gt;easy to use once you get the hang of it, and very powerful. We need to create a mock &lt;code&gt;PageContext&lt;/code&gt; so that we&lt;br/&gt;don&apos;t need a whole servlet container to test this one little tag. Let&apos;s flesh out the mock context and then add it to&lt;br/&gt;the test case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Mock mockPageCtx = new Mock(PageContext.class);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will need to import the &lt;a href=&quot;http://cglib.sourceforge.net/&quot;&gt;cglib&lt;/a&gt; version of the mock api (org.jmock.cglib.*) due to the&lt;br/&gt;fact that &lt;code&gt;PageContext&lt;/code&gt; is not an interface. With JMock you can mock interfaces or classes as long as they have an empty&lt;br/&gt;constructor. To use the mock object as the &quot;real&quot; thing, you just create a proxy.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;PageContext pageCtx = (PageContext)mockPageCtx.proxy();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&apos;s add this to our test case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        Mock mockPageCtx = new Mock(PageContext.class);
        HelloTag helloTag = new HelloTag();
        helloTag.setPageContext((PageContext)mockPageCtx.proxy());
        assertEquals( &amp;quot;Hello, Mr. Anderson!&amp;quot;, helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that we are using &lt;code&gt;MockObjectTestCase&lt;/code&gt; instead of &lt;code&gt;TestCase&lt;/code&gt;. If you run the test, everything is still fine. We&lt;br/&gt;are not using the &lt;code&gt;PageContext&lt;/code&gt; yet. We need the page context to be able to provide the name for us when we request it.&lt;br/&gt;Let&apos;s say its stored somewhere in scope under the id foo. We need to tell the &lt;code&gt;mockPageCtx&lt;/code&gt; to return the correct value&lt;br/&gt;when the right conditions are met. This is where the real mocking comes in (and the power of JMock).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        Mock mockPageCtx = new Mock(PageContext.class);
        mockPageCtx.stubs().method(&amp;quot;findAttribute&amp;quot;).with(eq(&amp;quot;foo&amp;quot;)).will(returnValue( &amp;quot;Mr. Anderson&amp;quot; ));

        HelloTag helloTag = new HelloTag();
        helloTag.setPageContext((PageContext)mockPageCtx.proxy());

        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;,helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We added one line of code that probably looks a little confusing... it did to me when I first learned &lt;a href=&quot;http://jmock.org/&quot;&gt;JMock&lt;/a&gt;.&lt;br/&gt;You can break it down to:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I want to stub out the method findAttribute that takes the parameter foo and will return the value &quot;Mr. Anderson&quot;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You are mocking the response of the &lt;code&gt;PageContext&lt;/code&gt; instance. The test still runs, but now we need to modify the tag itself&lt;br/&gt;to actually use the page context.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTag extends TagSupport {
    String buildOutput(){
        String name = (String)pageContext.findAttribute(&amp;quot;foo&amp;quot;);
        return(&amp;quot;Hello, &amp;quot; + name + &amp;quot;!&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now run the test and everything is still green. Your tag thinks it has a real &lt;code&gt;PageContext&lt;/code&gt;. Now, let&apos;s say&lt;br/&gt;that we want to be able to specify the name of the attribute using a tag attribute called id. As you probably know, tag&lt;br/&gt;attributes are simply setters in the tag class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        Mock mockPageCtx = new Mock(PageContext.class);
        mockPageCtx.stubs().method(&amp;quot;findAttribute&amp;quot;).with(eq(&amp;quot;foo&amp;quot;)).will(returnValue(&amp;quot;Mr. Anderson&amp;quot;));

        HelloTag helloTag = new HelloTag();
        helloTag.setPageContext((PageContext)mockPageCtx.proxy());
        helloTag.setId(&amp;quot;matrix&amp;quot;);

        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;,helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we need to add the setter to the tag and use the id in the output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTag extends TagSupport {
    private String id;

    public void setId(String id){ this.id = id; }

    String buildOutput(){
        String name = (String)pageContext.findAttribute(id);
        return(&amp;quot;Hello, &amp;quot; + name + &amp;quot;!&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Aww, but now the test fails. The expected &lt;code&gt;findAttribute()&lt;/code&gt; parameter was not found. We need to modify our&lt;br/&gt;test to expect the right one.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        Mock mockPageCtx = new Mock(PageContext.class);
        mockPageCtx.stubs().method(&amp;quot;findAttribute&amp;quot;).with(eq(&amp;quot;matrix&amp;quot;))
            .will(returnValue(&amp;quot;Mr. Anderson&amp;quot;));

        HelloTag helloTag = new HelloTag();
        helloTag.setPageContext((PageContext)mockPageCtx.proxy());
        helloTag.setId(&amp;quot;matrix&amp;quot;);

        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;,helloTag.buildOutput());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now everything is green again. Let&apos;s take a break for a second and look at what we have. We have a completely&lt;br/&gt;tested JSP tag (though not fully implemented) that does everything we need it to do. Now we just need to add the rest of&lt;br/&gt;the tag support so that it will work in a servlet container. Let&apos;s write out our output in the &lt;code&gt;doEndTag()&lt;/code&gt;&lt;br/&gt;method. Can we test this to make sure we are outputting the right data? Yes, another job for JMock, with a little help&lt;br/&gt;from a concrete mock helper. We need to mock &lt;code&gt;JspWriter&lt;/code&gt;, which is abstract and has no empty constructor... no&lt;br/&gt;JMock friendly. So, what I do is make a simple mock adapter for it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public abstract JspWriterMockAdapter extends JspWriter {
    public JspWriterMockAdapter(){
        super(1024,false);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which we can then use with JMock to test for the expected output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTagTest extends MockObjectTestCase {
    public void testHello() throws Exception {
        Mock mockJspWriter = new Mock(JspWriterMockAdapter.class);
        mockJspWriter.expects(once()).method(&amp;quot;print&amp;quot;)
            .with(eq(&amp;quot;Hello, Mr. Anderson!&amp;quot;));

        Mock mockPageCtx = new Mock(PageContext.class);
        mockPageCtx.stubs().method(&amp;quot;findAttribute&amp;quot;).with(eq(&amp;quot;matrix&amp;quot;))
            .will(returnValue(&amp;quot;Mr. Anderson&amp;quot;));

        mockPageCtx.stubs().method(&amp;quot;getOut&amp;quot;).withNoParameters()
            .will(returnValue((JspWriter)mockJspWriter.proxy()));

        HelloTag helloTag = new HelloTag();
        helloTag.setPageContext((PageContext)mockPageCtx.proxy());
        helloTag.setId(&amp;quot;matrix&amp;quot;);
        helloTag.doStartTag();
        helloTag.doEndTag();

        assertEquals(&amp;quot;Hello, Mr. Anderson!&amp;quot;,helloTag.buildOutput());

        mockJspWriter.verify();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This expectation checking shows the other way to use JMock. You can test for an expected method call on the mock&lt;br/&gt;object. Here we are saying that the mock &lt;code&gt;JspWriter&lt;/code&gt; expects the &lt;code&gt;print()&lt;/code&gt; method to be called only once&lt;br/&gt;with the given string. I also added a method stub to return the mock &lt;code&gt;JspWriter&lt;/code&gt; when &lt;code&gt;getOut()&lt;/code&gt; is called&lt;br/&gt;on the &lt;code&gt;PageContext&lt;/code&gt;. The last statement in the test method is also important. The verify method is called on the&lt;br/&gt;mock object when you want to test for expected method calls. If they are not found, the test fails. If we run the test&lt;br/&gt;now, it will fail because we are not doing anything in the &lt;code&gt;doEndTag()&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class HelloTag extends TagSupport {
    private String id;

    public void setId(String id){ this.id = id; }

    public int doEndTag() throws JspException {
        try {
            pageContext.getOut().print(buildOutput());
        } catch(Exception ex){throw new JspException(ex);}
            return(EVAL_PAGE);
        }

        String buildOutput(){
            String name = (String)pageContext.findAttribute(id);
            return(&amp;quot;Hello, &amp;quot; + name + &amp;quot;!&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the test again and everything is green. Now you also see why I use a separate method to build the output. This&lt;br/&gt;keeps your tag methods very simple and allows for greater test coverage. This is as far as I am going to go with this&lt;br/&gt;example. It is a fully working JSP tag. If you build a tag descriptor for it and use it, you would see the output we are&lt;br/&gt;testing for. Don&apos;t get me wrong, this approach does not necessarily negate the need for in-container testing, but it can&lt;br/&gt;lessen that need in most cases. You can use something like Cactus to do your in-container testing once your mock testing&lt;br/&gt;is done. Though my servlet container can fire up pretty fast, it&apos;s still slower than the mock approach when you are in a&lt;br/&gt;rapid test-driven cycle.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; &lt;a href=&quot;http://jmock.org/&quot;&gt;JMock 2&lt;/a&gt; is a radical change from version one. See &lt;a href=&quot;Are-You-Still-Mocking-Me%3F&quot;&gt;Are You Still Mocking Me?&lt;/a&gt; for an updated version of this posting.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Spring & RMI & JNDI -> Cool</title>
      <link>http://coffeaelectronica.com/blog/2006/spring-rmi-jndi-cool.html</link>
      <pubDate>Sun, 10 Sep 2006 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2006/spring-rmi-jndi-cool.html</guid>
      <description>
      &lt;p&gt;I started looking into RMI again; it&apos;s been a while since I have used it directly and as often happens, I got sidetracked.&lt;br/&gt;I found out how easy it is very to setup an RMI registry with &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring&lt;/a&gt; and then access the&lt;br/&gt;bound objects via JNDI.&lt;/p&gt;&lt;p&gt;First, we need an object to bind. Let&apos;s keep it simple and just have two methods: one for getting the current date and&lt;br/&gt;another that will return the string that we pass into it. If you remember your RMI you know that we need an interface&lt;br/&gt;that extends &lt;code&gt;java.rmi.Remote&lt;/code&gt; and an object that implements that interface. For the interface:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public interface MyRemote extends Remote {
    public Date getTimestamp() throws RemoteException;

    public String echoString(String str) throws RemoteException;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and for the implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class MyRemoteImpl implements MyRemote {
    private static final long serialVersionUID = 9222184580750208673L;

    public MyRemoteImpl() throws RemoteException {
        super();
    }

    public Date getTimestamp() throws RemoteException {
        return(new Date());
    }

    public String echoString(String str) throws RemoteException {
        return(str);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, you will need a spring context to work with. I am not going into the details of Spring configuration here,&lt;br/&gt;but I will show the bean definitions for the necessary beans; the object to be bound, the service exporter and the&lt;br/&gt;registry factory. The object to be bound is our &lt;code&gt;MyRemoteImpl&lt;/code&gt; and it&apos;s just a simple bean:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;#39;service.MyRemote&amp;#39; class=&amp;#39;rmi.MyRemoteImpl&amp;#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The RMI registry configuration is pretty simple using the &lt;code&gt;RmiRegistryFactoryBean&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;#39;rmi.Registry&amp;#39; class=&amp;#39;org.springframework.remoting.rmi.RmiRegistryFactoryBean&amp;#39;&amp;gt;
    &amp;lt;property name=&amp;#39;port&amp;#39; value=&amp;#39;1099&amp;#39; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will retrieve or create a registry on the localhost port 1099.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; be sure that you do not specify the host property if you want the registry to be created. The bean will only create a registry on the localhost&lt;br/&gt;and only if the host property is not set.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Then we need to export the service to the registry (bind the object). To do that we use the &lt;code&gt;RmiServiceExporter&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;#39;rmi.service.MyRemote&amp;#39; class=&amp;#39;org.springframework.remoting.rmi.RmiServiceExporter&amp;#39;&amp;gt;
    &amp;lt;property name=&amp;#39;serviceName&amp;#39; value=&amp;#39;myRemote&amp;#39; /&amp;gt;
    &amp;lt;property name=&amp;#39;serviceInterface&amp;#39; value=&amp;#39;rmi.MyRemote&amp;#39; /&amp;gt;
    &amp;lt;property name=&amp;#39;service&amp;#39; ref=&amp;#39;service.MyRemote&amp;#39; /&amp;gt;
    &amp;lt;property name=&amp;#39;registry&amp;#39; ref=&amp;#39;rmi.Registry&amp;#39; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, we specify the name that the object is bound to, the registry it is to be bound to and the interface and&lt;br/&gt;object being bound. Once those three beans are in place, a RMI registry will be started and have the &lt;code&gt;MyRemoteImpl&lt;/code&gt; object&lt;br/&gt;bound to it. It&apos;s as simple as that. You can test the binding with a couple lines of code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Registry registry = LocateRegistry.getRegistry(1099);
MyRemote myRemote = (MyRemote)registry.lookup(&amp;quot;myRemote&amp;quot;);
Date date = myRemote.getTimestamp();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But, hey, I mentioned something about accessing the registry via JNDI. The details of the whole RMI/JNDI connection&lt;br/&gt;can be found in the Sun J2SE JavaDocs &lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/guide/jndi/jndi-rmi.html&quot;&gt;JNDI Guide&lt;/a&gt;, but I&lt;br/&gt;will show a little example code... it&apos;s pretty simple. Everything we have done so far stays the same except for the&lt;br/&gt;client code used to access the registry and lookup the object. Now we want to use JNDI. First we need to setup the JNDI&lt;br/&gt;properties either on the command line or some other means. I used the code below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;System.setProperty( Context.INITIAL_CONTEXT_FACTORY,&amp;quot;com.sun.jndi.rmi.registry.RegistryContextFactory&amp;quot; );

System.setProperty(Context.PROVIDER_URL,&amp;quot;rmi://localhost:1099&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then to access the bound object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;final Context ictx = new InitialContext();
MyRemote myRemote = (MyRemote)ictx.lookup(&amp;quot;myRemote&amp;quot;);

System.out.println(&amp;quot;Date: &amp;quot; + myRemote.getTimestamp());
System.out.println(&amp;quot;Echo: &amp;quot; + myRemote.echoString(&amp;quot;Hello RMI&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can now access the bound objects via direct RMI or JNDI lookup and you can embed the remote references in a&lt;br/&gt;different spring context using the JNDI factory beans (I&apos;ll leave that for another time). You can&apos;t get much simpler&lt;br/&gt;than that.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Embedding Jetty in Spring</title>
      <link>http://coffeaelectronica.com/blog/2006/embedding-jetty-in-spring.html</link>
      <pubDate>Wed, 1 Feb 2006 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2006/embedding-jetty-in-spring.html</guid>
      <description>
      &lt;blockquote&gt;&lt;p&gt;The discussion here is based on Jetty 5, while Jetty 6 makes things a lot easier to do. I have an updated version of this post for Jetty 6, &lt;a href=&quot;Embedding-Jetty-6-in-Spring&quot;&gt;Embedding Jetty 6 in Spring&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;I came across &lt;a href=&quot;http://jetty.mortbay.org/&quot;&gt;Jetty&lt;/a&gt; a while back and finally got around to really playing with&lt;br/&gt;it recently. I was amazed at how flexible it was and how easy it was to embed it inside a &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring&lt;/a&gt;&lt;br/&gt;Application Context. I did have to write a couple of small helper extensions to ease things along but other than that it was pretty&lt;br/&gt;much just a configuration exercise. What follows is a brief discussion on what I did and how I did it.&lt;/p&gt;&lt;p&gt;Basically what you need, per the Jetty documentation, is an &lt;code&gt;HttpServer&lt;/code&gt; instance listening on a port, and an&lt;br/&gt;&lt;code&gt;HttpContext&lt;/code&gt; with a couple &lt;code&gt;Handler&lt;/code&gt;s. If all you want is a simple web server, with no servlet support it&apos;s very easy&lt;br/&gt;and requires no special extensions. Add the following beans to a spring bean config file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;#39;httpServer&amp;#39; class=&amp;#39;org.mortbay.http.HttpServer&amp;#39; init-method=&amp;#39;start&amp;#39;&amp;gt;
    &amp;lt;property name=&amp;#39;listeners&amp;#39;&amp;gt;
        &amp;lt;list&amp;gt;
            &amp;lt;bean class=&amp;#39;org.mortbay.http.SocketListener&amp;#39;&amp;gt;
                &amp;lt;property name=&amp;#39;port&amp;#39; value=&amp;#39;80&amp;#39; /&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;#39;contexts&amp;#39;&amp;gt;
        &amp;lt;list&amp;gt;
            &amp;lt;bean class=&amp;#39;org.mortbay.http.HttpContext&amp;#39;&amp;gt;
                &amp;lt;property name=&amp;#39;contextPath&amp;#39; value=&amp;#39;/&amp;#39; /&amp;gt;
                &amp;lt;property name=&amp;#39;resourceBase&amp;#39; value=&amp;#39;c:/&amp;#39; /&amp;gt;
                &amp;lt;property name=&amp;#39;handlers&amp;#39;&amp;gt;
                    &amp;lt;list&amp;gt;
                        &amp;lt;bean class=&amp;#39;org.mortbay.http.handler.ResourceHandler&amp;#39;/&amp;gt;
                    &amp;lt;/list&amp;gt;
                &amp;lt;/property&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, when you start up the Spring Application Context you will also start up an HTTP Server listening on port 80 that&lt;br/&gt;will serve pages from your &lt;code&gt;C&lt;/code&gt; drive. How much simpler could that be? You could get rid of the &lt;code&gt;init-method&lt;/code&gt; and set&lt;br/&gt;&lt;code&gt;lazy-init&lt;/code&gt; to true if you don&apos;t need/want it to fire up right away.&lt;/p&gt;&lt;p&gt;Okay, so web server shmeb server you say? Let&apos;s get down to something more interesting. Now, let&apos;s turn this plain old&lt;br/&gt;HTTP server into a servlet container... amazingly enough, there is not much more required to make this happen; however,&lt;br/&gt;we do need some extensions in order to work with things in Spring.&lt;/p&gt;&lt;p&gt;First, we will need an instance of &lt;code&gt;ServletHttpContext&lt;/code&gt; instead of the HTTP Context that we have in there now (or you&lt;br/&gt;could set it up to use both). Unfortunately, the standard &lt;code&gt;ServletHttpContext&lt;/code&gt; class only has &quot;add&quot; methods for adding&lt;br/&gt;servlets... there is no bulk setter; so we have to add one, which leads up to our first helper class, the&lt;br/&gt;&lt;code&gt;ServlerHttpContextBean&lt;/code&gt;. All this class does is extend &lt;code&gt;ServletHttpContext&lt;/code&gt; and add the following method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public void setServletMappings(Map servletMappings) throws Exception {
    if(MapUtils.isNotEmpty(servletMappings)){
        Iterator paths = servletMappings.keySet().iterator();
        while(paths.hasNext()){
            String path = (String)paths.next();
            ServletDefinitionBean servletConfig = (ServletDefinitionBean)servletMappings.get(path);

            // add the servlet to the context
            ServletHolder holder = addServlet(
                servletConfig.getBeanName(),
                path,
                servletConfig.getServletClassName()
            );

            // configure the holder
            if(holder != null){
                if(servletConfig.getInitOrder() != -1){
                    holder.setInitOrder(servletConfig.getInitOrder());
                }

                Enumeration e = servletConfig.getInitParameterNames();
                while(e.hasMoreElements()){
                    String name = (String)e.nextElement();
                    holder.setInitParameter( name, servletConfig.getInitParameter(name) );
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Some of my collection helper classes are not shown, but their method signatures should be a good enough explanation of what they do.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;The servlet mappings (Path key to &lt;code&gt;ServletDefinitionBean&lt;/code&gt; value) are processed to add each servlet to the context and&lt;br/&gt;then configure its holder to set any initialization parameters.&lt;/p&gt;&lt;p&gt;You will notice the other helper class being used to configure the servlets. The &lt;code&gt;ServletDefinitionBean&lt;/code&gt; is used to allow&lt;br/&gt;Spring configuration of the servlets to be added. This is a fairly simple class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class ServletDefinitionBean implements Serializable, BeanNameAware {

    private static final long serialVersionUID = 8232043638313653802L;
    private String beanName,servletClassName;
    private Map initParameters;
    private int initOrder = -1;

    public ServletDefinitionBean(){ super(); }

    public void setInitOrder(int initOrder) { this.initOrder = initOrder; }

    public int getInitOrder() { return initOrder; }

    public String getServletClassName() { return servletClassName; }

    public void setServletClassName(String servletClass) {
        this.servletClassName = servletClass;
    }

    public String getBeanName() { return beanName; }

    public void setBeanName(String beanName) { this.beanName = beanName; }

    public void setInitParameters(Map initParameters){
        this.initParameters = initParameters;
    }

    public Enumeration getInitParameterNames(){
        if(MapUtils.isNotEmpty(initParameters)){
            return(IteratorUtils.asEnumeration( initParameters.keySet().iterator()) );
        } else {
            return(CollectionUtils.EMPTY_ENUMERATION);
        }
    }

    public String getInitParameter(String name){
        return(MapUtils.getString(initParameters,name));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class is used to store the initialization parameters and any other data required to configure a servlet. And that&apos;s&lt;br/&gt;it. Now all you need to do is update the spring configuration to use the new beans.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;#39;httpServer&amp;#39; class=&amp;#39;org.mortbay.http.HttpServer&amp;#39; init-method=&amp;#39;start&amp;#39;&amp;gt;
    &amp;lt;property name=&amp;#39;listeners&amp;#39;&amp;gt;
        &amp;lt;list&amp;gt;
            &amp;lt;bean class=&amp;#39;org.mortbay.http.SocketListener&amp;#39;&amp;gt;
                &amp;lt;property name=&amp;#39;port&amp;#39; value=&amp;#39;80&amp;#39; /&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
    &amp;lt;property name=&amp;#39;contexts&amp;#39;&amp;gt;
        &amp;lt;list&amp;gt;
            &amp;lt;bean class=&amp;#39;com.stehno.spring.jetty.ServletHttpContextBean&amp;#39;&amp;gt;
                &amp;lt;property name=&amp;#39;contextPath&amp;#39; value=&amp;#39;/&amp;#39; /&amp;gt;
                &amp;lt;property name=&amp;#39;resourceBase&amp;#39; value=&amp;#39;c:/&amp;#39; /&amp;gt;
                &amp;lt;property name=&amp;#39;handlers&amp;#39;&amp;gt;
                    &amp;lt;list&amp;gt;
                        &amp;lt;bean class=&amp;#39;org.mortbay.http.handler.ResourceHandler&amp;#39; /&amp;gt;
                        &amp;lt;bean class=&amp;#39;org.mortbay.jetty.servlet.ServletHandler&amp;#39; /&amp;gt;
                    &amp;lt;/list&amp;gt;
                &amp;lt;/property&amp;gt;
                &amp;lt;property name=&amp;#39;servletMappings&amp;#39;&amp;gt;
                    &amp;lt;map&amp;gt;
                        &amp;lt;entry key=&amp;#39;/hi/*&amp;#39; value-ref=&amp;#39;helloServlet&amp;#39;/&amp;gt;
                    &amp;lt;/map&amp;gt;
                &amp;lt;/property&amp;gt;
            &amp;lt;/bean&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will notice that in order to serve normal resources, you still need to include a &lt;code&gt;ResourceHandler&lt;/code&gt;. I have mapped&lt;br/&gt;the &apos;helloServlet&apos; to the path &apos;/hi/*&apos;. The servlet definition bean is configured as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;#39;helloServlet&amp;#39; class=&amp;#39;com.stehno.spring.jetty.ServletDefinitionBean&amp;#39;&amp;gt;
    &amp;lt;property name=&amp;#39;servletClassName&amp;#39; value=&amp;#39;test.HelloServlet&amp;#39; /&amp;gt;
    &amp;lt;property name=&amp;#39;initParameters&amp;#39;&amp;gt;
        &amp;lt;map&amp;gt;
            &amp;lt;entry key=&amp;#39;text&amp;#39; value=&amp;#39;Hello Jetty-embedded Spring!&amp;#39; /&amp;gt;
        &amp;lt;/map&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s just a simple Hello World type servlet that I will leave you to write yourself. But, if you fire up the Application&lt;br/&gt;Context and point your browser to &apos;http://localhost/hi/blah&apos; you will run this servlet.&lt;/p&gt;&lt;p&gt;I have not fully put this through its paces, but I have installed and run a Spring Dispatcher servlet that had its own application&lt;br/&gt;context with controllers and was able to hit the controllers and get the expected response. Jetty seems to be well-developed&lt;br/&gt;and very flexible and combining it with spring makes it even more so. I think there are many uses for this setup. It could&lt;br/&gt;be used in a desktop application to provide web services, for unit testing of servlets or controllers, or for web proxy-ing.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Lazy Bean Mapping and the Command Pattern</title>
      <link>http://coffeaelectronica.com/blog/2005/lazy-bean-mapping-and-command-pattern.html</link>
      <pubDate>Wed, 26 Oct 2005 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2005/lazy-bean-mapping-and-command-pattern.html</guid>
      <description>
      &lt;p&gt;In doing some refactoring recently, I came up with a useful base class for my command pattern managers (manager&lt;br/&gt;beans that have a bunch of commands associated with them), here I will call it the &lt;code&gt;LazyBeanManager&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Consider a case where you have a manger that manages a bunch of actions, and that you want the whole setup to be very&lt;br/&gt;lazy -- only load the manager when it is used AND only load a command action when it is requested. This is very simple to&lt;br/&gt;accomplish. First assume you have the following spring config:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;quot;manager&amp;quot; class=&amp;quot;example.MyManager&amp;quot; lazy-init=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;commands&amp;quot;&amp;gt;
        &amp;lt;map&amp;gt;
            &amp;lt;entry key=&amp;quot;cmdA&amp;quot; value=&amp;quot;commandA&amp;quot; /&amp;gt;
            &amp;lt;entry key=&amp;quot;cmdB&amp;quot; value=&amp;quot;commandB&amp;quot; /&amp;gt;
        &amp;lt;/map&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;commandA&amp;quot; class=&amp;quot;example.CommandA&amp;quot; lazy-init=&amp;quot;true&amp;quot; /&amp;gt;

&amp;lt;bean id=&amp;quot;commandB&amp;quot; class=&amp;quot;example.CommandB&amp;quot; lazy-init=&amp;quot;true&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You see that we have a simple command pattern configured. There is a manager which somehow routes control to a&lt;br/&gt;command bean. The first bit of laziness you should notice is the &lt;code&gt;lazy-init=&amp;quot;true&amp;quot;&lt;/code&gt; set on all three beans. This&lt;br/&gt;tells Spring not to load these beans until something else references them. The second bit of laziness is that the&lt;br/&gt;command beans are referenced by value (their bean id) rather than reference, which prevents the command beans from&lt;br/&gt;loading when the manager bean loads. At this point, Spring does not know how to do anything with the map of command&lt;br/&gt;beanIds. The following simple class will take care of that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class MyManager implements ApplicationContextAware {
    private Map commands;
    private ApplicationContext context;

    public setApplicationContext(ApplicationContext context) throws BeansException {
        this.context = context;
    }

    public void setCommands(Map commands){ this.commands = commands; }

    public void execute(String commandId){
        Command cmd = findCommand(commandId);
        if(cmd != null){ cmd.execute(); }
    }

    protected Command findCommand(String cmdId){
        Command obj = null;
        String beanId = MapUtils.getString(mappings,cmdId);
        if(StringUtils.isNotEmpty(beanId)){
            obj = (Command)context.getBean(beanId,Command.class);
        }
        return(obj);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Some un-important classes are not shown here. This is just to give you the general idea of the manager.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;You will notice that the &lt;code&gt;ApplicationContext&lt;/code&gt; is injected into the manager by Spring through the implementation&lt;br/&gt;of the &lt;code&gt;ApplicationContextAware&lt;/code&gt; interface. Now, when your application needs to execute one of these commands,&lt;br/&gt;you simply pull the manager bean out of spring (which will load only the manager), call the execute(String) method with&lt;br/&gt;the desired command id. Then, only the desired command bean will be loaded and executed. This has come in very handy&lt;br/&gt;recently for handling front end interface actions. This laziness allows the system to start up faster, be more stable,&lt;br/&gt;and more memory efficient. Sometimes being lazy is a good thing.&lt;/p&gt;&lt;p&gt;In my development, I have created an abstract lazy mapping manager using this strategy... it works great. What I would like&lt;br/&gt;to come up with is a version of this that not only does lazy loading, but then unloads the bean after a period of idle&lt;br/&gt;time - I am not sure whether Spring currently supports this or not. Something to look into.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Simple Hashing</title>
      <link>http://coffeaelectronica.com/blog/2005/simple-hashing.html</link>
      <pubDate>Tue, 25 Oct 2005 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2005/simple-hashing.html</guid>
      <description>
      &lt;p&gt;A co-worker showed me this recently as a quick means of creating a simple hash. Say you have the following user&lt;br/&gt;information:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Name: John Doe
YOB: 1973
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and you need to generate a six character string identifier for the user. First, you need to convert the name to a&lt;br/&gt;long by parsing it with a radix of 36.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;long nameId = Long.parseLong(&amp;quot;John Doe&amp;quot;,36);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, lets use an exclusive OR (^) to blend the name and birth year to get a new identifier value (adds a little&lt;br/&gt;obfuscation):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;long id = 1973L ^ nameId;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To limit the number of characters in the final string, we need to put an upper limit on the number by taking the&lt;br/&gt;modulus of the max value:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;long limit = Long.parseLong(&amp;quot;zzzzzz&amp;quot;,36);
long value = id % limit;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that we want six characters so there are six Zs. To get the string value simply convert the long to a string&lt;br/&gt;using a radix of 36 (all 26 letters and all ten digits).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;String idstr = Long.toString(value,36);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Interesting.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Extracting a Property form a Collection</title>
      <link>http://coffeaelectronica.com/blog/2005/extracting-a-property-from-a-collection.html</link>
      <pubDate>Mon, 17 Oct 2005 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2005/extracting-a-property-from-a-collection.html</guid>
      <description>
      &lt;p&gt;I wrote a little tutorial about &lt;a href=&quot;/2005/01/jakarta-commons-collections.html&quot;&gt;Transformers&lt;/a&gt; a while back and now I found a&lt;br/&gt;nice little use for them today. I needed (and do every now and then) need to extract the value of one property from&lt;br/&gt;every element of a collection. Yes, I could write an iterator loop and pull it out myself, but that takes more lines of&lt;br/&gt;code and is not reusable like this approach... and I love re-usable code. I needed a list containing the ids (long) of&lt;br/&gt;the elements in a collection.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private static final Transformer tx = new InvokerTransformer(&amp;quot;getId&amp;quot;,null,null);

public static Long[] getIds(List list){
    Collection coll = CollectionUtils.collect(list,tx);
    return(coll != null ? (Long[])coll.toArray(new Long[0]) : null);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;InvokerTransformer&lt;/code&gt; invokes the specified method and returns the result as the result of transformation. In this&lt;br/&gt;case, I want the result of the &lt;code&gt;getId()&lt;/code&gt; method. The &lt;code&gt;CollectionUtils.collect()&lt;/code&gt; method runs the transformer on each&lt;br/&gt;element in the incoming collection and creates a new collection containing the transformed results. Short and sweet.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Spring Inner-Class Instantiation</title>
      <link>http://coffeaelectronica.com/blog/2005/spring-inner-class-instantiation.html</link>
      <pubDate>Wed, 13 Jul 2005 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2005/spring-inner-class-instantiation.html</guid>
      <description>
      &lt;p&gt;The other day I ran into something I had never tried to do with &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring&lt;/a&gt; before; define a&lt;br/&gt;bean as an instance of an inner class. I did a little searching through the Spring docs, but could not find anything&lt;br/&gt;about it, negative or positive. So, I just gave it a try. Consider the class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public abstract class IService {
    public static class ServiceImpl extends IService {
        // something useful...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which would have a bean definition of:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;bean id=&amp;quot;myService&amp;quot; class=&amp;quot;com.some.pkg.IService$ServiceImpl&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where the $ is the separator between the main class and the inner class. This is how its represented in the actual&lt;br/&gt;class file so it makes sense. Nice.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Dynamic JavaScript Loading</title>
      <link>http://coffeaelectronica.com/blog/2005/dynamic-javascript-loading.html</link>
      <pubDate>Wed, 15 Jun 2005 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2005/dynamic-javascript-loading.html</guid>
      <description>
      &lt;p&gt;I figured out a way to dynamically load JavaScript files at runtime. There are times when you may not always need&lt;br/&gt;to import all of your external JavaScripts, or maybe you are using Ajax to load content into a div and you also need to&lt;br/&gt;import some script that the content needs. Here is the solution and it works in IE and &lt;a href=&quot;http://mozilla.org/firefox&quot;&gt;FireFox&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function loadLibrary(path){
    var headElt = document.getElementsByTagName(&amp;quot;head&amp;quot;).item(0);
    var scriptElt = headElt.appendChild(document.createElement(&amp;quot;script&amp;quot;));
    scriptElt.setAttribute(&amp;quot;type&amp;quot;,&amp;quot;text/javascript&amp;quot;);
    scriptElt.setAttribute(&amp;quot;src&amp;quot;,path);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pretty simple, and all you have to do to use it is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;loadLibrary(&amp;quot;scripts/myscript.js&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This works for dynamically loading stylesheet too if you add a link element instead of a script element:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function loadStylesheet(path){
    var headElt = document.getElementsByTagName(&amp;quot;head&amp;quot;).item(0);
    var scriptElt = headElt.appendChild(document.createElement(&amp;quot;link&amp;quot;));
    scriptElt.setAttribute(&amp;quot;type&amp;quot;,&amp;quot;text/css&amp;quot;);
    scriptElt.setAttribute(&amp;quot;rel&amp;quot;,&amp;quot;stylesheet&amp;quot;);
    scriptElt.setAttribute(&amp;quot;href&amp;quot;,path);
}
&lt;/code&gt;&lt;/pre&gt;
	  </description>
    </item>
    
    <item>
      <title>End of Time - Well, Date Anyway</title>
      <link>http://coffeaelectronica.com/blog/2005/end-of-time-well-date-anyway.html</link>
      <pubDate>Fri, 18 Feb 2005 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2005/end-of-time-well-date-anyway.html</guid>
      <description>
      &lt;p&gt;I have run across this issue before you need to specify a &quot;far-off&quot; expiration date for something using the &lt;code&gt;java.util.Date&lt;/code&gt;&lt;br/&gt;class. Generally I have specified something 100 years in the future like 1/1/2100 or something like that using the old&lt;br/&gt;deprecated Date constructors... but that is not really a good practice or habit to get into. I came up with two better solutions.&lt;/p&gt;&lt;p&gt;First, in the case where you want to specify a static date, you could run a quick test to determine the long time value&lt;br/&gt;for the date you create using the deprecated constructors. You then modify your code to use the long value in the&lt;br/&gt;constructor, which is the only remaining non-empty constructor.&lt;/p&gt;&lt;p&gt;The second options is useful if you just want a date sometime in the unreachable future (avoiding any reasonable y2k-like&lt;br/&gt;issues) you can use the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Date expiration = new Date(Long.MAX_VALUE);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will yield a date so far in the future that you would be proud to have your code exist that long and happy to fix&lt;br/&gt;it (at least your descendants should be happy to fix it). The date it represents is:&lt;/p&gt;&lt;p&gt;&lt;code&gt;Sun Aug 17 00:12:55 MST 292278994&lt;/code&gt;&lt;/p&gt;&lt;p&gt;I think that should suffice.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Commons Collections - Transformers</title>
      <link>http://coffeaelectronica.com/blog/2005/commons-collections-transformers.html</link>
      <pubDate>Thu, 6 Jan 2005 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2005/commons-collections-transformers.html</guid>
      <description>
      &lt;p&gt;Continuing the example from my discussion of &lt;a href=&quot;/2005/01/jakarta-commons-collections-predicates.html&quot;&gt;Predicates&lt;/a&gt;,&lt;br/&gt;I would not like to take a quick look at Transformers. According to the JavaDocs:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A Transformer defines a functor interface implemented by classes that transform one object into another.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;They are very useful when you need to preform an action of some sort on every element, or a group of elements, in a&lt;br/&gt;collection. From the example in the previous article, we have a list of Integers, from which we needed to extract the&lt;br/&gt;even Integers with a value greater than 5. We developed two Predicates and used an &lt;code&gt;AndPredicate&lt;/code&gt; to join them&lt;br/&gt;and achieve our goal. Now, I would like to take the same list, repeated below and perform some transformations on it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; numbers = new ArrayList&amp;lt;Integer&amp;gt;();
for(int i=0; i&amp;lt;10; i++){
    numbers.add(i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We want to take the values that are accepted by the predicates (even values greater than 5) and then multiply those&lt;br/&gt;by an arbitrary value, say 10. You could use an Iterator to loop through the list of filtered numbers and multiply each&lt;br/&gt;value by 10 or you could use a Transformer and have a reusable means of doing the same action.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; For this example, I am going to use the test-driven development approach. The unit tests will use the &lt;a href=&quot;http://junit.org/&quot;&gt;JUnit&lt;/a&gt; framework.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Let&apos;s write a test case for a &lt;code&gt;MultiplyTransformer&lt;/code&gt; that will do this. Start with the basic test shell...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class MultiplyTransformerTest extends TestCase {
    private MultiplyTransformer multiplyTransformer;

    protected void setUp(){
        this.multiplyTransformer = new MultiplyTransformer();
    }

    protected void tearDown(){
        this.multiplyTransformer = null;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will write the empty class for our Transformer as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class MultiplyTransformer implements Transformer {
    public Object transform(Object input){}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will want to test the &lt;code&gt;transform(Object)&lt;/code&gt; method for the case when the input is null, not an Integer, and&lt;br/&gt;the expected value. For this we will write three test methods. First we will test the case when the input is&lt;br/&gt;&lt;code&gt;null&lt;/code&gt;. We will want to handle this gracefully and return an Integer value of zero in this case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public void testTransform_NullInput(){
    assertEquals(new Integer(0), multiplyTransformer.transform(null));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next we will test for the case when the input is not an Integer. This case should throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt;&lt;br/&gt;as all elements should be Integers in our system.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public void testTransform_InvalidInputClass(){
    try {
        multiplyTransformer.transform(new Long(120030));
        fail(&amp;quot;Expected Exception was not thrown!&amp;quot;);
    } catch(IllegalArgumentException iae){
        assertNotNull(iae);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, finally we test the case when an Integer is passed as the input. This case should return an Integer that is a&lt;br/&gt;specified multiple of the original integer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public void testTransform_Integer(){
    Integer input = new Integer(5);
    Integer result = new Integer(50);
    int mult = 10;
    multiplyTransform.setMultiplier(mult);
    assertEquals(result,multiplyTransform.transform(input));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now all of our test cases have been written and we can start coding the transformer itself. We already have the&lt;br/&gt;shell and we also know from the last test that we will need a setter for the multiplier.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class MultiplyTransformer implements Transformer {
    private int multiplier;

    public MultiplyTransformer(){this.multiplier = 1;}

    public MultiplyTransformer(int multiplier){this.multiplier = multiplier;}

    public void setMultiplier(int multiplier){this.multiplier = multiplier;}

    public Object transform(Object input){
        Integer result = null;
        if(input != null &amp;amp;amp;&amp;amp;amp; input instanceof Integer){
            int inVal = ((Integer)input).intValue();
            result = new Integer(multiplier * intVal);
        } else if(input == null){
            result = new Integer(0);
        } else {
            throw new IllegalArgumentException(&amp;quot;Not an Integer!&amp;quot;);
        }
        return(result);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not too bad and when we run our test cases, everything comes up green. We now have our transformer and its unit&lt;br/&gt;test. If we need to modify the transformer in any way, will want to run the tests to ensure that everything remains in&lt;br/&gt;working order. To use our transformer to solve our task (using the &apos;numbers&apos; list) we need to run the predicates and&lt;br/&gt;then apply the transformer to the results.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Predicate evenInt = new EvenIntegerPredicate();
Predicate greater = new GreaterThanPredicate(5);
Predicate andPred = new AndPredicate(evenInt,greater);

// get the list of even numbers greater than 5
CollectionUtils.filter(numbers,andPred);

Transformer mult = new MultiplyTransformer(10);

// multiply all values by 10
CollectionUtils.transform(numbers,mult);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And there you have it. But that is not our stopping point. We modified those values so that they could be mapped&lt;br/&gt;and converted to other objects. Assume that we have a Map containing objects of class &lt;code&gt;SomethingUseful&lt;/code&gt; mapped to&lt;br/&gt;keys that correspond to our multiplied even numbers. We need to replace the even Integers in the list with their&lt;br/&gt;appropriate instances of &lt;code&gt;SomethingUseful&lt;/code&gt;. The Collections API comes to the rescue again with the &lt;code&gt;MapTransformer&lt;/code&gt;.&lt;br/&gt;This Transformer is created with a Map and when it is applied, the input objects are replaced by the object keyed to the&lt;br/&gt;input value. We can also combine the two transformers using a &lt;code&gt;ChainedTransformer&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Predicate evenInt = new EvenIntegerPredicate();
Predicate greater = new GreaterThanPredicate(5);
Predicate andPred = new AndPredicate(evenInt,greater);

// get the list of even numbers greater than 5
CollectionUtils.filter(numbers,andPred);

Transformer mult = new MultiplyTransformer(10);

Map items = new HashMap();
items.put(new Integer(60),new SomethingUseful(60));
items.put(new Integer(80),new SomethingUseful(80));
items.put(new Integer(100),new SomethingUseful(100));
Transformer map = MapTransformer.getInstance(items);

Transformer chain = ChainedTransformer.getInstance(mult,map);

// apply the transformers
CollectionUtils.transform(numbers,chain);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which gives us our complete system. Our list of Integers is filtered so that only even values greater than 5&lt;br/&gt;remain. Those values are then multiplied by 10 and converted to their appropriate &lt;code&gt;SomethingUseful&lt;/code&gt;&lt;br/&gt;implementations. Transformers are a powerful tool when working with collections and there are many predefined&lt;br/&gt;implementations available. Also, as you can see, it&apos;s pretty easy to write your own. As with Predicates, if you write&lt;br/&gt;them carefully, they can be reused in multiple projects, which is always a good thing.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Commons Collections - Predicates</title>
      <link>http://coffeaelectronica.com/blog/2005/commons-collections-predicates.html</link>
      <pubDate>Tue, 4 Jan 2005 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2005/commons-collections-predicates.html</guid>
      <description>
      &lt;p&gt;Nestled in the &lt;a href=&quot;http://commons.apache.org/&quot;&gt;Jakarta Commons&lt;/a&gt; project is a monstrosity called the&lt;br/&gt;&lt;a href=&quot;http://commons.apache.org/collections&quot;&gt;Jakarta Commons - Collections&lt;/a&gt; API. It contains a wealth of extensions to the&lt;br/&gt;standard collections as well as new collections and collection-related utilities. To try and document the use of the&lt;br/&gt;whole API would be a good topic for a book (and there are a few&lt;br/&gt;&lt;a href=&quot;http://www.amazon.com/s/ref=br_ss_hs/103-3887221-2235807?platform=gurupa&amp;amp;url=index%3Dblended&amp;amp;keywords=jakarta+commons&amp;amp;Go.x=0&amp;amp;Go.y=0&amp;amp;Go=Go&quot;&gt;on Amazon&lt;/a&gt;).&lt;br/&gt;I am going to cover one of my favorite interfaces from this API, the Predicate, and its implementations.&lt;/p&gt;&lt;p&gt;From the documentation for the Predicate interface:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;A Predicate defines a functor interface implemented by classes that perform a predicate test on an object. Predicate&lt;br/&gt;instances can be used to implement queries or to do filtering.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;That sums it up pretty well; but, how do you use it?&lt;/p&gt;&lt;h2&gt;General Usage&lt;/h2&gt;&lt;p&gt;Let&apos;s say we have an &lt;code&gt;ArrayList&lt;/code&gt; containing ten &lt;code&gt;Integer&lt;/code&gt; objects as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt;; numbers = new ArrayList&amp;lt;Integer&amp;gt;();
for(int i=0; i&amp;lt;10; i++){
    numbers.add(i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&apos;s say that for some reason only the even numbers in the list are relevant and that the rest can be ignored&lt;br/&gt;and/or removed. There are three main approaches to doing this with Predicates. First, you can select all even numbers&lt;br/&gt;from the list into a new &lt;code&gt;Collection&lt;/code&gt;. Second, you can filter the list so that all non-even numbers are removed&lt;br/&gt;from the list. Third, you can create a predicated list that will only store even numbers.&lt;/p&gt;&lt;p&gt;Before we go any farther, we need a Predicate to work with. The Predicate interface is pretty simple, containing only a single method to&lt;br/&gt;implement, so I will just show it below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class EvenIntegerPredicate implements Predicate {
    public boolean evaluate(Object obj){
        boolean accept = false;
        if(obj instanceof Integer){
            accept = ((Integer)obj).intValue() % 2 == 0;
        }
        return(accept);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;evaluate()&lt;/code&gt; method is called for each element to be tested. In this case, the object must be an Integer&lt;br/&gt;implementation and have an even value to be accepted.&lt;/p&gt;&lt;h2&gt;Select the Even Numbers&lt;/h2&gt;&lt;p&gt;This case uses the &lt;code&gt;select(Collection,Predicate)&lt;/code&gt; method of the &lt;code&gt;CollectionUtils&lt;/code&gt;&lt;br/&gt;class. This method selects all elements from input collection which match the given predicate into an output collection.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Predicate evenPred = new EvenIntegerPredicate();
Collection nums = CollectionUtils.select(numbers,evenPred);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will yield a new collection containing only the even numbers from the original list while the original list&lt;br/&gt;will remain unchanged.&lt;/p&gt;&lt;h2&gt;Filter the Collection&lt;/h2&gt;&lt;p&gt;This next method is good when you are able to reuse the original collection once it is filtered. The &lt;code&gt;CollectionUtils.filter(Collection,Predicate)&lt;/code&gt;&lt;br/&gt;method filters the collection by testing each element and removing any that the predicate rejects.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;CollectionUtils.filter(numbers,new EvenIntegerPredicate());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once again, only the even values are preserved; however, this time, the original collection is maintained.&lt;/p&gt;&lt;h2&gt;Predicated List&lt;/h2&gt;&lt;p&gt;In the third approach, we use a method that allows new values to be added to the list and tested at the same time. This&lt;br/&gt;approach is best when you have control over the original collection and could possibly add new elements to the collection.&lt;br/&gt;For this we use the &lt;code&gt;predicatedList(List,Predicate)&lt;/code&gt; method of the &lt;code&gt;ListUtils&lt;/code&gt; class which returns a predicated list&lt;br/&gt;backed by the given list. Only values that are accepted by the predicate will be added to the list any other values&lt;br/&gt;will cause an &lt;code&gt;IllegalArgumentException&lt;/code&gt; to be thrown.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;Integer&amp;gt;();
Predicate evenPred = new EvenIntegerPredicate();
List predList = ListUtils.predicatedList(list,evenPred);
predList.add(new Integer(2));
predList.add(new Integer(4));
predList.add(new Integer(6));
predList.add(new Integer(8));
predList.add(new Integer(10));

// this next one will throw an IllegalArgumentException
predList.add(new Integer(11));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The resulting list will contain only the even values (you should be sure to use the predicated list (predList) not&lt;br/&gt;the original backing list.&lt;/p&gt;&lt;h2&gt;Combining Predicates&lt;/h2&gt;&lt;p&gt;I will take this discussion one step farther and pose the question, &quot;what if you only want even integers greater than 5?&quot;&lt;br/&gt;Your first thought might be to re-write the &lt;code&gt;EvenIntegerPredicate&lt;/code&gt; to handle this, but a better approach would be to&lt;br/&gt;write a new predicate that only accepts values greater than a specified value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class GreaterThanPredicate implements Predicate {
    private int value;

    public GreaterThanPredicate(int value){
        this.value = value;
    }

    public boolean evaluate(Object obj){
        boolean accept = false;
        if(obj instanceof Integer){
            accept = ((Integer)obj).intValue() &amp;amp;gt; value;
        }
        return(accept);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we have a predicate that matches even numbers and a predicate that matches numbers greater than a specified&lt;br/&gt;number... how do we combine them? Two Predicate implementations jump to mind, &lt;code&gt;AllPredicate&lt;/code&gt; and &lt;code&gt;AndPredicate&lt;/code&gt;. The&lt;br/&gt;&lt;code&gt;AllPredicate&lt;/code&gt; is built with an array of Predicates that must all evaluate to true for the containing predicate to be&lt;br/&gt;true. The &lt;code&gt;AndPredicate&lt;/code&gt;, which we will use here, takes two predicates as arguments and returns true if both evaluate to true.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Predicate evenInt = new EvenIntegerPredicate();
Predicate greater = new GreaterThanPredicate(5);
Predicate andPred = new AndPredicate(evenInt,greater);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which could be used in any of the previous examples to accept only even numbers greater than 5.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Predicates are a powerful tool for object filtering and searching. They are fairly simple to&lt;br/&gt;learn and if written properly, very reusable. At first they may feel a bit like excess code, but once you find yourself&lt;br/&gt;using the same predicate in multiple projects, you will see the benefits.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Two, If By Comparison</title>
      <link>http://coffeaelectronica.com/blog/2004/two-if-by-comparison.html</link>
      <pubDate>Thu, 14 Oct 2004 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2004/two-if-by-comparison.html</guid>
      <description>
      &lt;p&gt;There are two ways to compare objects, directly if they implement the &lt;code&gt;java.lang.Comparable&lt;/code&gt; interface, and&lt;br/&gt;indirectly using an implementation of the &lt;code&gt;java.util.Comparator&lt;/code&gt; interface.&lt;/p&gt;&lt;h2&gt;java.lang.Comparable&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;Comparable&lt;/code&gt; interface defines only a single method signature, the &lt;code&gt;compareTo()&lt;/code&gt;&lt;br/&gt;method that takes as a parameter the object that the implementing object is being compared to. It returns a negative&lt;br/&gt;integer, zero, or a positive integer when the implementing object is less than, equal to, or greater than the specified&lt;br/&gt;object respectively. The Comparable interface is best used when your object has a logical point of comparison, such as&lt;br/&gt;an order number, date stamp, or unique name and that point of comparison is fixed, meaning that the comparison is always&lt;br/&gt;performed on the same comparison point (e.g. always compared by the date stamp). This also assumes that you are the&lt;br/&gt;developer of the object or that you are able to extend it to allow for a &lt;code&gt;Comparable&lt;/code&gt; implementation (if&lt;br/&gt; neither of these is the case, you should use the &lt;code&gt;Comparator&lt;/code&gt; interface instead - see below). First you&lt;br/&gt; need a class for your object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Person {
    private String id, firstName, lastName;
    private int age;

    public String getId(){ return(id); }

    public String getFirstName(){ return(firstName); }

    public String getLastName(){ return(lastName); }

    public int getAge(){ return(age); }

    public void setId(String id){ this.id = id; }

    public void setFirstName(String firstName){ this.firstName = firstName; }

    public void setLastName(String lastName){ this.lastName = lastName; }

    public void setAge(int age){ this.age = age; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, say you have a list of people (Person objects) and that you want to display them ordered by their last names.&lt;br/&gt;You can make the Person class implement Comparable and perform the comparison based on the &lt;code&gt;lastName&lt;/code&gt; property.&lt;br/&gt;This comparison is very easy due to the fact that Strings implement Comparable themselves, as do many standard data&lt;br/&gt;object classes (Numbers, Dates, etc.). The comparable Person class is shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Person implements Comparable {
    private String id, firstName, lastName;
    private int age;

    // ... getters/setters not shown...

    public int compareTo(Object obj){
        // cast the obj as a Person -- we are only comparing people
        Person pObj = (Person)obj;

    // compare the last names using their compareTo methods
        return( lastName.compareTo(pObj.getLastName()) );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then you can run your list of Person objects through a &lt;code&gt;Collections.sort()&lt;/code&gt; method and you will have a list&lt;br/&gt;of people ordered by their last names. But what if, when you display your list of people, the user wants the ability to&lt;br/&gt;sort the list by the first name or the age? You could add a new property to your object called &lt;code&gt;compareBy&lt;/code&gt; that&lt;br/&gt;takes a parameter used to identify which property of the object will be used in the comparison. Then in your&lt;br/&gt;&lt;code&gt;compareTo()&lt;/code&gt; method you will need to base your comparison on the property that &lt;code&gt;compareBy&lt;/code&gt; is&lt;br/&gt;pointing to. This is not a very clean approach. It would be better to use a &lt;code&gt;java.util.Comparator&lt;/code&gt;&lt;br/&gt;implementation.&lt;/p&gt;&lt;h2&gt;java.util.Comparator&lt;/h2&gt;&lt;p&gt;The Comparator interface defines two method signatures for implementation,&lt;br/&gt;&lt;code&gt;compare()&lt;/code&gt; that takes as parameters the two objects to be compared and &lt;code&gt;equals()&lt;/code&gt; which takes an object&lt;br/&gt;to be compared to the Comparator. The return value of the &lt;code&gt;compare()&lt;/code&gt; method is basically the same as that for&lt;br/&gt;the &lt;code&gt;compareTo()&lt;/code&gt; method of the Comparable interface. The main difference between the Comparator and a Comparable&lt;br/&gt;object is that Comparators perform the comparison external to the objects being compared and therefore can be reusable&lt;br/&gt;over many different object types. Let&apos;s start out with our clean Person class again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Person {
    private String id, firstName, lastName;
    private int age;

    public String getId(){ return(id); }

    public String getFirstName(){ return(firstName); }

    public String getLastName(){ return(lastName); }

    public int getAge(){ return(age); }

    public void setId(String id){ this.id = id; }

    public void setFirstName(String firstName){ this.firstName = firstName; }

    public void setLastName(String lastName){ this.lastName = lastName; }

    public void setAge(int age){ this.age = age; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then define a comparator to do the work of the comparable Person we created (so we don&apos;t lose any&lt;br/&gt;functionality).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class LastNameComparator implements Comparator {
    public boolean equals(Object obj){
        // we&amp;#39;re just going to say that any LastNameComparators are equal
        return(obj instanceof LastNameComparator);
    }

    public int compare(Object obj1, Object obj2){
        // cast both objects are Person
        Person p1 = (Person)obj1;
        Person p2 = (Person)obj2;

        // compare their lastNames
        return( p1.getLastName().compareTo(p2.getLastName()) );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&apos;s all it takes. You can run your List of Person objects through the version of &lt;code&gt;Collections.sort()&lt;/code&gt;&lt;br/&gt;that accepts a List and a Comparator to sort your list by last name. You have gained something by doing this; you can&lt;br/&gt;now change the sort criteria on the fly. Let&apos;s create a Comparator to compare by age.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class AgeComparator implements Comparator {
    public boolean equals(Object obj){
        // we&amp;#39;re just going to say that any AgeComparators are equal
        return(obj instanceof AgeComparator);
    }

    public int compare(Object obj1, Object obj2){
        // cast both objects are Person
        Person p1 = (Person)obj1;
        Person p2 = (Person)obj2;

        // compare their ages
        int result = 0; // defaults to equal
        if(p1.getAge() &amp;gt; p2.getAge()){
            result = 1;
        } else if(p1.getAge() &amp;lt; p2.getAge()){
            result = -1;
        }

        return(result);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can use that instead of the &lt;code&gt;LastNameComparator&lt;/code&gt; to order the Person objects by their ages. The&lt;br/&gt;Comparator at first seems like more coding, but if you design your Comparators well, you will be able to reuse them in&lt;br/&gt;the future, especially if you throw in some reflection. The &lt;a href=&quot;http://commons.apache.org/collections&quot;&gt;Jakarta Commons Collections API&lt;/a&gt;&lt;br/&gt;has a set of useful Comparators, though I think one of the most useful Comparators is found in the&lt;br/&gt;&lt;a href=&quot;http://commons.apache.org/beanutils&quot;&gt;Jakarta Commons Bean Utils API&lt;/a&gt;, called the &lt;code&gt;BeanComparator&lt;/code&gt;. The &lt;code&gt;BeanComparator&lt;/code&gt;&lt;br/&gt;uses reflection compare two objects based on the value of a specified property. Using the &lt;code&gt;BeanComparator&lt;/code&gt; to perform&lt;br/&gt;our comparisons would be much simpler:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Collections.sort(people,new BeanComparator(&amp;quot;lastName&amp;quot;));
// - or -
Collections.sort(people,new BeanComparator(&amp;quot;age&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now how is that for simple and straight forward? So that is a basic introduction to using the Comparable and&lt;br/&gt;Comparator interfaces. In general, it is better to use Comparators so that your comparison is not so tightly tied to&lt;br/&gt;your implementations.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Worker Bean Pattern</title>
      <link>http://coffeaelectronica.com/blog/2004/worker-bean-pattern.html</link>
      <pubDate>Fri, 28 May 2004 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2004/worker-bean-pattern.html</guid>
      <description>
      &lt;p&gt;I stumbled upon something that I thought would make a good design pattern, if no one else has already come up&lt;br/&gt;with it. The only name I could think of for it was the &quot;Worker Bean Pattern&quot;.&lt;/p&gt;&lt;p&gt;Basically the pattern consists of two classes, the Manager class and the Worker class. The Manager class is used to&lt;br/&gt;create semi-transient Worker classes as required for use by client objects. The example I will use to help me describe&lt;br/&gt;this pattern is a web-based wizard-style input form.&lt;/p&gt;&lt;p&gt;The Manager class is basically a loose combination of the Factory Pattern and the Singleton Pattern. There should be&lt;br/&gt;only one instance of a particular Manager object in the system. For my example, let&apos;s call the Manager class &lt;code&gt;FormManager&lt;/code&gt;&lt;br/&gt;and say that it is an object stored in the application scope of the server context (so that there will be only one&lt;br/&gt;instance per server context). The Manager class&apos; function is to &quot;manage&quot; the Worker&lt;br/&gt;instances. It creates them, populates their data, and destroys them with no external objects acting directly on the&lt;br/&gt;Worker classes in a fashion other than read-only. We can stub out the methods of our &lt;code&gt;FormManager&lt;/code&gt; as&lt;br/&gt;the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class FormManager {
    public FormWorker createFormWorker(){}

    public void postFormData(FormWorker fw, String name, String[] values){}

    public void destroyFormWorker(FormWorker fw){}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where &lt;code&gt;FormWorker&lt;/code&gt; is the Worker. The &lt;code&gt;createFormWorker()&lt;/code&gt; method is used to create a&lt;br/&gt;&lt;code&gt;FormWorker&lt;/code&gt; or use by the client when they first enter the wizard form set. This Worker could be pulled from a&lt;br/&gt;pool of available workers or created as needed. The client puts the &lt;code&gt;FormWorker&lt;/code&gt; the session scope. As the pages&lt;br/&gt;of the wizard form are submitted, each posts its data to the &lt;code&gt;postFormData()&lt;/code&gt; method, which processes the data&lt;br/&gt;and modifies the &lt;code&gt;FormWorker&lt;/code&gt; as necessary. Once the final wizard page has been submitted and the client has no&lt;br/&gt;more use for the &lt;code&gt;FormWorker&lt;/code&gt;, it is passed to the &lt;code&gt;destroyFormWorker()&lt;/code&gt; method so that it can be disposed&lt;br/&gt;of, or returned to the pool.&lt;/p&gt;&lt;p&gt;The Worker is basically an encapsulation of data required to perform an operation in the Manager that requires more&lt;br/&gt;than a single step. In our example that &lt;code&gt;FormWorker&lt;/code&gt; is stored in the user&apos;s session so that the current&lt;br/&gt;state of the wizard form is maintained between pages. The Worker&apos;s data should not be accessible outside of the&lt;br/&gt;Manager. It exists only as a temporary extension of the Manager. Once the client has finished with a Worker it&lt;br/&gt;should be disposed of by the Manager. In our example, &lt;code&gt;FormWorker&lt;/code&gt;s could be pooled within the&lt;br/&gt;&lt;code&gt;FormManager&lt;/code&gt; to minimize new object creation and increase efficiency. Our &lt;code&gt;FormWorker&lt;/code&gt; would look&lt;br/&gt;something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class FormWorker {
    FormWorker(){}

    void addData(String name, String[] value){}

    String[] getData(String name){}

    void setUserId(String userId){}

    public String getUserId(){}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&apos;ll notice that most of the methods have the default access, accessible to only other classes in the same&lt;br/&gt;package. You would want to place the &lt;code&gt;FormManager&lt;/code&gt; and &lt;code&gt;FormWorker&lt;/code&gt; in the same package for this to work.&lt;br/&gt;Another interesting means of achieving this association, if you prefer, would be to nest the &lt;code&gt;FormWorker&lt;/code&gt; inside&lt;br/&gt;the &lt;code&gt;FormManager&lt;/code&gt; as a static nested class; with a nested class, you can enforce the isolation of the worker&lt;br/&gt;using private methods. Let&apos;s do that for our example and flesh out the methods a bit more for the final stub:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// Manager
public class FormManager {
    public FormWorker createFormWorker(String userId){
        FormWorker fw = checkoutWorker();
        if(fw != null){ fw.setUserId(userId); }
        return(fw);
    }

    public void postFormData(FormWorker fw, String name, String[] values){
        fw.addData(name,values);
    }

    public void destroyFormWorker(FormWorker fw){
        fw.clearData();
        fw.setUserId(null);
        checkinWorker(fw);
    }

    // Worker
    public static class FormWorker {
        private String userId;
        private HashMap data;

        private FormWorker(){ this.data = new HashMap(); }

        private void addData(String name, String[] value){
            data.put(name,value);
        }

        private String[] getData(String name){
            return( (String[])data.get(name) );
        }

        private void clearData(){ data.clear(); }

        private void setUserId(String userId){
            this.userId = userId;
        }

        public String getUserId(){ return(userId); }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Obviously this is still missing some code and does not really do anything interesting; however, it should give you&lt;br/&gt;the basic feel of my idea. I used something similar to this in a project recently (actually, a wizard web form set) and&lt;br/&gt;it worked very nicely. Of course there are other ways to skin this cat. You could even simply put the &quot;working&quot; data&lt;br/&gt;into the session itself, though I tend to like things neat and tidy without having to keep track of a lot of session&lt;br/&gt;variables.&lt;/p&gt;&lt;p&gt;This may or may not already be a pattern on someone&apos;s list or in a book somewhere, but I did not&lt;br/&gt;find it. I present it in the hope that it will be useful to someone, and as I said, I am always open for comments or&lt;br/&gt;suggestions.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Proper Care and Feeding of your JDBC Code</title>
      <link>http://coffeaelectronica.com/blog/2004/proper-care-and-feeding-of-your-jdbc.html</link>
      <pubDate>Thu, 27 May 2004 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2004/proper-care-and-feeding-of-your-jdbc.html</guid>
      <description>
      &lt;p&gt;If you&apos;ve been developing very long, you have probably run across this numerous times, but for those of you that&lt;br/&gt;are new to JDBC, here is a quick tip that will help you greatly in the long run (I have seen it done wrong many times).&lt;br/&gt;When you perform your connection retrieval (directly or from a pool - use a pool as often as possible), make sure that&lt;br/&gt;you clean up your resources when you are done.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Connection conn = null;
Statement st = null;
ResultSet rs = null;
try {
    conn = getConnection();
    st = conn.createStatement();
    rs = st.executeQuery(sql);

    while(rs.next()){
        // ... work it
    }

    // minimize code here to free conn ASAP.

} catch(Exception ex){
    // log this or something
} finally {
    if(rs != null){
        try {rs.close();} catch(Exception e){}
    }
    if(st != null){
        try {st.close();} catch(Exception e){}
    }
    if(conn != null){
    try {conn.close();} catch(Exception e){}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you follow this format as a general rule, you will end up with fewer database related problems, especially if you&lt;br/&gt;use connection pooling. Connections that are not disposed of properly can cause very bad things to happen in your&lt;br/&gt;application. Also, note that I mention minimizing the code within the try/catch block. You want to use your&lt;br/&gt;connection and clean it up as soon as possible (again, especially if you are pooling) so that the resources are not&lt;br/&gt;hanging around needlessly. Another interesting point is the set of empty catch blocks. We have all been told that&lt;br/&gt;empty catch blocks are a bad thing; however, I have seen this style used in pretty much every description of this code.&lt;br/&gt;The JDBC developers (in their infinite wisdom) decided that every method should throw a &lt;code&gt;SQLException&lt;/code&gt;, even&lt;br/&gt;though there is little you can really do about it when you are trying to close up the connection. That is why you just&lt;br/&gt;ignore them; though here I ignore them separately so that one does not affect the others. You can clean up this code&lt;br/&gt;even more if you use the &lt;a href=&quot;http://commons.apache.org/dbutils&quot;&gt;Jakarta Commons - DbUtils API&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;Connection conn = null;
Statement st = null;
ResultSet rs = null;
try {
    conn = getConnection();
    st = conn.createStatement();
    rs = st.executeQuery(sql);

    while(rs.next()){
        // ... work it
    }

    // minimize code here to free conn ASAP.

} catch(Exception ex){
    // log this or something
} finally {
    DbUtils.closeQuietly(rs);
    DbUtils.closeQuietly(st);
    DbUtils.closeQuietly(conn);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You are not really required to close the &lt;code&gt;ResultSet&lt;/code&gt;, and the &lt;code&gt;Statement&lt;/code&gt; if you close the &lt;code&gt;Connection&lt;/code&gt; properly;&lt;br/&gt;however, it adds an extra level of assurance especially when you are using a driver that&lt;br/&gt;may not be fully compliant or properly implemented. The &lt;a href=&quot;http://springframework.org/&quot;&gt;Spring Framework&lt;/a&gt; also provides&lt;br/&gt;some very useful APIs for working with JDBC such as template methods, row mappers, and callback&lt;br/&gt;closure-like structures, an example would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;new ConnectionCallback(){
    public Object doInConnection(Connection conn) throws SQLException, DataAccessException {
        st = conn.createStatement();
        rs = st.executeQuery(sql);
        while(rs.next()){
            // ... work it
        }

        // minimize code here to free conn ASAP.
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are quite a few helpful constructs in the Spring JDBC API to make JDBC interaction easier to work with.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Proxy Method Logging</title>
      <link>http://coffeaelectronica.com/blog/2004/proxy-method-logging.html</link>
      <pubDate>Wed, 11 Feb 2004 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2004/proxy-method-logging.html</guid>
      <description>
      &lt;p&gt;Here&apos;s an interesting spin on logging. Say you have a service of some kind that loads in other classes dynamically such as modules or plug-ins and you want to provide a seamless debugging mode no matter what kind of logging the module developer has done. You can use a &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt; to do your method call logging. Basically, you build a wrapper around your module that does the logging for any module.&lt;/p&gt;&lt;p&gt;First off, you need an interface to do this, any interface that your modules implement will work.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public interface SomeInterface {

    public void doSomethingA(String p1, int p2);

    public String[] doSomethingB(Map map);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Second, you will need an implementation of that interface, your module or plug-in class. This is the actual object doing the work whose method calls will be logged.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class SomeImplnterfaceImpl implements SomeInterface {

    public SomeImplnterfaceImpl(){}

    public void doSomethingA(String p1, int p2){
        System.out.println(&amp;quot;doSomethingA with (&amp;quot; + p1 + &amp;quot; and &amp;quot; + p2 + &amp;quot;)&amp;quot;);
    }

    public String[] doSomethingB(Map map){
        System.out.println(&amp;quot;doSomethingB with a Map: &amp;quot; + map);
        return( (String[])map.values().toArray(new String[0]) );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both of the above items you should already have in your system. If not, in most cases, they can be easily added. Now we get into the good stuff. The Proxy class is an interesting little creature. It allows you to give it an array of interfaces that it is to &quot;implement&quot; by passing method calls to an instance of the &lt;code&gt;InvocationHandler&lt;/code&gt; interface, which determines how the method calls are to be processed. Our proxy will simply log the method call and pass it along to the real implementation. We&apos;ll make a factory class to create our logging proxy. It will have one method with two arguments. The first is the interface that is to be logged, &lt;code&gt;SomeInterface&lt;/code&gt; in our example, and the second is the implementation of that interface, &lt;code&gt;SomeInterfaceImpl&lt;/code&gt; for our example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public final class LoggingProxyFactory {

    private LoggingProxyFactory(){}

    public static final Object create(Class interfc,Object impl) throws Exception {
        LoggingHandler handler = new LoggingHandler(impl);
        return(
            Proxy.newProxyInstance(
                impl.getClass().getClassLoader(),
                new Class[]{interfc},
                handler
            )
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You see that creating a proxy is pretty simple. You create a proxy instance using your interfaces, your class loader and your invocation handler. The invocation handler is where the action happens. Our &lt;code&gt;InvocationHandler&lt;/code&gt; implementation is going to be a static inner class of the &lt;code&gt;LoggingProxyFactory&lt;/code&gt; class. What it needs to do is logs the method calls as they come in and then pass along the call to the real implementation. Here is the code for the inner class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;private static final class LoggingHandler implements InvocationHandler {

    private Log log;
    private Object impl;

    private LoggingHandler(Object impl){
        this.impl = impl;
        this.log = LogFactory.getLog(impl.getClass());
    }

    public Object invoke(Object obj,Method method,Object[] params) throws Throwable {
        if(log.isInfoEnabled()) log.info(&amp;quot;Entering: &amp;quot; + method.getName();

        if(log.isDebugEnabled()){
            for(int p=0; p&amp;amp;amp;tl;params.length;p++){
                log.debug(method.getName() + &amp;quot; Param[&amp;quot; + p + &amp;quot;]: &amp;quot; + params[p].toString());
            }
        }

        Object ret = null;

        try {ret = method.invoke(impl, params);}
        catch(Exception ex){
            if(log.isErrorEnabled()){
                log.error(method.getName() + &amp;quot; Exception: &amp;quot; + ex.getMessage(), ex);
            }
            throw ex;
        }

        if(log.isDebugEnabled()) log.debug(method.getName() + &amp;quot; Returned: &amp;quot; + ret);

        if(log.isInfoEnabled()) log.info(&amp;quot;Leaving&amp;quot;);

        return(ret);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am using the &lt;a href=&quot;http://commons.apache.org/logging&quot;&gt;Jakarta Logging API&lt;/a&gt; for the logging in this case; however, you could use any logging API or simple standard out statements as you see fit. The main thing to notice in the code above is the invocation of the method on the implementation object.&lt;/p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;ret = method.invoke(impl, params);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is this line that passes on the method call to the real implementation. The rest of the method is logging of the entering and leaving, parameters and return value. Exceptions are also logged. To test out the proxy and see it in action, you can run the following tester app:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class Tester {
    public static void main(String[] args){
        try {
            Object obj = LoggingProxyFactory.create(
                SomeInterface.class,
                new SomeImplnterfaceImpl()
            );
            SomeInterface siObj = (SomeInterface)obj;
            siObj.doSomethingA(&amp;quot;Hello&amp;quot;,31);

            Map map = new HashMap();
            map.put(&amp;quot;a&amp;quot;, &amp;quot;Some data 1&amp;quot;);
            map.put(&amp;quot;b&amp;quot;, &amp;quot;Some data 2&amp;quot;);
            map.put(&amp;quot;c&amp;quot;, &amp;quot;Some data 3&amp;quot;);
            map.put(&amp;quot;d&amp;quot;, &amp;quot;Some data 4&amp;quot;);
            siObj.doSomethingB(map);
        } catch(Exception ex){
            ex.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which yields the method call results and their logging information. This was an interesting idea I have tossed around for a while now. It does work, though it has not been rigorously tested. If nothing else, it is a description of how to use the proxy class.&lt;/p&gt;
	  </description>
    </item>
    

  </channel> 
</rss>
