<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CoffeaElectronica.com</title>
    <link>http://coffeaelectronica.com</link>
    <atom:link href="http://coffeaelectronica.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>Technical blog of Christopher J. Stehno.</description>
    <language>en-us</language>
    <pubDate>Fri, 9 Dec 2016 15:53:59 -0600</pubDate>
    <lastBuildDate>Fri, 9 Dec 2016 15:53:59 -0600</lastBuildDate>

    
    <item>
      <title>Introducing Ersatz</title>
      <link>http://coffeaelectronica.com/blog/2016/introducing-ersatz.html</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2016/introducing-ersatz.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While working on tests for the &lt;a href=&quot;https://http-builder-ng.github.io/http-builder-ng/&quot;&gt;HttpBuilder-NG&lt;/a&gt; project, I tried out a couple different mock server
libraries, my old go-to &lt;a href=&quot;http://www.mock-server.com/&quot;&gt;Mock Server&lt;/a&gt; and then the
&lt;a href=&quot;https://github.com/square/okhttp/tree/master/mockwebserver&quot;&gt;OkHttp Mock Server&lt;/a&gt;, but both had their own issues and just didn&amp;#8217;t really fit the bill for
what I wanted to be able to do with mock server testing. So, I decided to do some prototyping over a long weekend and I was able to come up with the
&lt;a href=&quot;http://stehno.com/ersatz/&quot;&gt;Ersatz Server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My goal was to use an standardized embedded HTTP server and then provide a rich DSL to configure expectations on it with all the bells and whistles of
any other mocking library. I used the &lt;a href=&quot;http://undertow.io&quot;&gt;Undertow&lt;/a&gt; web server with both a Java 8 chained builder and a Groovy DSL approach to
configuration to allow very simple and expressive expectation configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Groovy DSL you can define expectations such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;ErsatzServer ersatz = new ErsatzServer()

server.expectations {
    get(&apos;/say/hello&apos;){
        verifier once()
        query &apos;name&apos;,&apos;Ersatz&apos;
        responder {
            content &apos;Hello Ersatz&apos;,&apos;text/plain&apos;
        }
    }
}

ersatz.start()

URL url = &quot;${ersatz.serverUrl}/say/hello?name=Ersatz&quot;.toURL()
assert url.text == &apos;Hello Ersatz&apos;

assert ersatz.verify()

ersatz.stop()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which will respond to a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/say/hello?name=Ersatz&lt;/code&gt; with the text content &lt;code&gt;Hello Ersatz&lt;/code&gt; and it will be expected that this request is
called exactly once, or the &lt;code&gt;verify()&lt;/code&gt; call will fail. This could also be written in standard Java:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;server.expectations( expect -&amp;gt; {
    expect.get(&quot;/say/hello&quot;).verifier(once()).query(&quot;name&quot;,&quot;Ersatz&quot;).responds().content(&quot;Hello Ersatz&quot;,&quot;text/plain&quot;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The builder form and the DSL form are equivalent and may be used together when developing in Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expectations can be configured across the major HTTP request methods and can be matched by path as well as headers, cookies, body contents and other
custom conditions. Multiple responses may be configured on a request so, for example, the first call would respond with some value, but all subsequent
calls would respond with a 500 error status, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;server.expectations {
    post(&apos;/save&apos;){
        body data, &apos;application/json&apos;
        responder {
            content outdata, &apos;application/json&apos;
        }
        responder {
            code 500
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This allows for some interesting and flexible configuration options.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a new library but I have replaced the mock server code in HttpBuilder-NG with it and it makes the tests a bit cleaner and adds some nice features
that we can utilize going forward that were not present in the other mock server libraries. Give it a try.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Writing Gradle Plugins</title>
      <link>http://coffeaelectronica.com/blog/2016/gradle-plugins-intro.html</link>
      <pubDate>Wed, 7 Dec 2016 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2016/gradle-plugins-intro.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my last post, &lt;a href=&quot;http://coffeaelectronica.com/blog/2016/gradle-introduction.html&quot;&gt;Gradle: A Gentle Introduction&lt;/a&gt;, I discussed the basics of Gradle and how to get up and running quickly. Now, I am going to dive into the deeper part of the pool and talk about how to write your own Gradle plugins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we need a project to work with. Let&amp;#8217;s say that we want to add a custom banner to our build output - who doesn&amp;#8217;t love banners? Something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;  _______ _            ____        _ _     _
 |__   __| |          |  _ \      (_) |   | |
    | |  | |__   ___  | |_) |_   _ _| | __| |
    | |  | &apos;_ \ / _ \ |  _ &amp;lt;| | | | | |/ _` |
    | |  | | | |  __/ | |_) | |_| | | | (_| |_ _ _
    |_|  |_| |_|\___| |____/ \__,_|_|_|\__,_(_|_|_)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need to create a directory named &lt;code&gt;banner-build&lt;/code&gt; and then create a &lt;code&gt;build.gradle&lt;/code&gt; file in it with the following starting content:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;plugins {
    id &apos;groovy&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just need a basic starting point. Run &lt;code&gt;./gradle wrapper --gradle-version=3.2&lt;/code&gt; to generate the wrapper and we are ready to start (we can run &lt;code&gt;/gradlew&lt;/code&gt; from here on out).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, in order to write out a banner we need to create a custom task that will render it for us:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;task banner {
    doFirst {
        if( !project.hasProperty(&apos;noBanner&apos;) ){
            file(&apos;banner.txt&apos;).eachLine { line-&amp;gt;
                logger.lifecycle line
            }
        }
    }
}

gradle.startParameter.taskNames = [&apos;:banner&apos;] + gradle.startParameter.taskNames&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This task will add our action to the top of the execution list (the &lt;code&gt;startPrameter&lt;/code&gt; modification makes it always run) so that if the &lt;code&gt;noBanner&lt;/code&gt; property is not specified, our banner will be loaded from the specified file and displayed to the output log.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will read our banner from a file, &lt;code&gt;banner.txt&lt;/code&gt; in the root of the project - so we will need to create that with the banner content from above. Then, when you run &lt;code&gt;./gradlew build&lt;/code&gt; you will see something like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; ./gradlew build
:banner
  _______ _            ____        _ _     _
 |__   __| |          |  _ \      (_) |   | |
    | |  | |__   ___  | |_) |_   _ _| | __| |
    | |  | &apos;_ \ / _ \ |  _ &amp;lt;| | | | | |/ _` |
    | |  | | | |  __/ | |_) | |_| | | | (_| |_ _ _
    |_|  |_| |_|\___| |____/ \__,_|_|_|\__,_(_|_|_)
:compileJava UP-TO-DATE
:compileGroovy UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar
:assemble
:compileTestJava UP-TO-DATE
:compileTestGroovy UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build

BUILD SUCCESSFUL

Total time: 0.559 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice also, that we can turn off the banner, passing the &lt;code&gt;-PnoBanner&lt;/code&gt; option on the command line or as a property in your &lt;code&gt;gradle.properties&lt;/code&gt; file, if you have one - if you run under one of those conditions, the banner will not be printed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, we have accomplished our original goal and we can go on with our lives&amp;#8230;&amp;#8203; until the next project comes along and you need the same sort of functionality. You could just copy and paste this code into your project, but you don&amp;#8217;t do that&amp;#8230;&amp;#8203; right? That&amp;#8217;s where plugins come into play; they allow us to share functionality across different project builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create the plugin, first we need a separate Gradle project for it; create a directory (outside of the one for our demo project), called &lt;code&gt;banner-plugin&lt;/code&gt; and add a &lt;code&gt;build.gradle&lt;/code&gt; file to it with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;banner-plugin/build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;plugins {
    id &apos;groovy&apos;
    id &apos;java-gradle-plugin&apos;
}

version = &quot;0.1.0&quot;
group = &quot;com.stehno.gradle&quot;

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()

    testCompile(&apos;org.spockframework:spock-core:1.0-groovy-2.4&apos;) {
        exclude module: &apos;groovy-all&apos;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and run &lt;code&gt;gradle wrapper --gradle-version=3.2&lt;/code&gt; in it to generate our wrapper. The build file for a plugin project is a standard Gradle build file, but with the &lt;code&gt;java-gradle-plugin&lt;/code&gt; plugin to provide extra tools needed for plugins, as well as dependencies for the Gradle API and it&amp;#8217;s associated Groovy distribution. With plugins, the project name is used as part of the unique plugin ID, so it&amp;#8217;s generally a good practice to be explicit about the project name using a &lt;code&gt;settings.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;banner-plugin/settings.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;rootProject.name = &apos;banner-plugin&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last piece of plugin-specific configuration is the plugin properties file, which is a file in the &lt;code&gt;resources/META-INF/gradle-plugins&lt;/code&gt; directory named &lt;code&gt;&amp;lt;group&amp;gt;.&amp;lt;name&amp;gt;.properties&lt;/code&gt;, for this example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;banner-plugin/src/main/resources/META-INF/gradle-plugins/com.stehno.gradle.banner-plugin.properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;implementation-class=com.stehno.gradle.banner.BannerPlugin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can create the basic skeleton for our plugin, which is an implementation of the Gradle &lt;code&gt;Plugin&amp;lt;Project&amp;gt;&lt;/code&gt; interface:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;banner-plugin/src/main/groovy/com/stehno/gradle/banner/BannerPlugin.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package com.stehno.gradle.banner

import org.gradle.api.Plugin
import org.gradle.api.Project

class BannerPlugin implements Plugin&amp;lt;Project&amp;gt; {

    @Override void apply(final Project project) {
        // your config here...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the main entry point for our plugin. When it is &quot;applied&quot; to the project, the &lt;code&gt;apply(Project)&lt;/code&gt; method will be called. If we do a &lt;code&gt;clean build&lt;/code&gt; of the project at this point, it will pass, but it does nothing. We need to transfer our functionality (the &lt;code&gt;banner&lt;/code&gt; task) from our original &lt;code&gt;build.gradle&lt;/code&gt;
file to the plugin. Let&amp;#8217;s create the plugin task skeleton:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;banner-plugin/src/main/groovy/com/stehno/gradle/banner/BannerTask.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package com.stehno.gradle.banner

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction

class BannerTask extends DefaultTask {

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and give it something to do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@TaskAction
void displayBanner(){
    logger.lifecycle &apos;Doing something!&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have a task, we need to wire it into the plugin so that it is applied to the project. Change the &lt;code&gt;apply(Project)&lt;/code&gt; method of our &lt;code&gt;BannerPlugin&lt;/code&gt; class to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Override void apply(final Project project) {
    project.task &apos;banner&apos;, type:BannerTask

    project.gradle.startParameter.taskNames = [&apos;:banner&apos;] + project.gradle.startParameter.taskNames
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will apply our new task and then cause it to be called whenever the build is run. Now, how do we check our progress? We could build the plugin and deploy it to our original project but that would be quite a lot of round-trip time every time we wanted to test a change, but there is no need for that, Gradle provides a rich test framework which works well with Spock. Let&amp;#8217;s create a Spock test for our task:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;banner-plugin/src/test/groovy/com/stehno/gradle/banner/BannerTaskSpec.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package com.stehno.gradle.banner

import spock.lang.Specification
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.BuildTask
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome

class BannerTaskSpec extends Specification {

    @Rule TemporaryFolder projectRoot = new TemporaryFolder()

    def &apos;simple run&apos;(){
        given:
        File buildFile = projectRoot.newFile(&apos;build.gradle&apos;)
        buildFile.text = &apos;&apos;&apos;
            plugins {
                id &apos;groovy&apos;
                id &apos;com.stehno.gradle.banner-plugin&apos;
            }
        &apos;&apos;&apos;.stripIndent()

        projectRoot.newFile(&apos;banner.txt&apos;).text = &apos;Awesome Banner!&apos;

        when:
        BuildResult result = GradleRunner.create()
            .withPluginClasspath()
            .withProjectDir(projectRoot.root)
            .withArguments(&apos;clean build&apos;.split(&apos; &apos;))
            .build()

        then:
        println result.output
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a bit of code, but it&amp;#8217;s not too bad once you dig in. We have a standard Spock test, with a &lt;code&gt;TemporaryFolder&lt;/code&gt; rule - this will be our test project directory. Then, we create a &lt;code&gt;build.gradle&lt;/code&gt; file for our test with our plugin and the &lt;code&gt;groovy&lt;/code&gt; plugin, similar to what our original Gradle file looked like. Next, we use the &lt;code&gt;GradleRunner&lt;/code&gt; to create and configure a Gradle environment using our file, which is then executed as a build. The results are then printed out to the command line. If you run &lt;code&gt;./gradlew test&lt;/code&gt; on the project now and view the test output (in the report standard out), you
 will see:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;:banner
Doing something!
:clean UP-TO-DATE
:compileJava UP-TO-DATE
:compileGroovy UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar
:assemble
:compileTestJava UP-TO-DATE
:compileTestGroovy UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build

BUILD SUCCESSFUL

Total time: 2.019 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where we can see our output and we have a way to quickly test our new task. So, moving onward, we need to add the real functionality to our task. Update the &lt;code&gt;displayBanner()&lt;/code&gt; method to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@TaskAction
void displayBanner(){
    if( !project.hasProperty(&apos;noBanner&apos;) ){
        project.file(&apos;banner.txt&apos;).eachLine { line-&amp;gt;
            logger.lifecycle line
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that we prefixed &lt;code&gt;project.&lt;/code&gt; before the &lt;code&gt;file()&lt;/code&gt; call since we are no longer directly in the &quot;project&quot; scope, but other than that this code was copied right from our original build file. If you run the test, you see our message in the test output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;:banner
Awesome banner!
:clean UP-TO-DATE
:compileJava UP-TO-DATE
:compileGroovy UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar
:assemble
:compileTestJava UP-TO-DATE
:compileTestGroovy UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build

BUILD SUCCESSFUL

Total time: 2.019 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our test is good, but it doesn&amp;#8217;t really verify anything, it just prints out the build output. Let&amp;#8217;s make it verify that the build passed and that our expected message is in the output - the &lt;code&gt;then:&lt;/code&gt; block becomes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;then:
result.tasks.every { BuildTask task -&amp;gt;
    task.outcome == TaskOutcome.SUCCESS || task.outcome == TaskOutcome.UP_TO_DATE
}

result.output.contains(&apos;Awesome Banner!&apos;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test will no longer generate the build output to the command line, but we are actually verifying the expected behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can test the &lt;code&gt;noBanner&lt;/code&gt; property support as well, but we should also refactor the test a bit so that shared code is reused - now our test looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;banner-plugin/src/test/groovy/com/stehno/gradle/banner/BannerTaskSpec.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package com.stehno.gradle.banner

import spock.lang.Specification
import org.junit.Rule
import org.junit.rules.TemporaryFolder
import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.BuildTask
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome

class BannerTaskSpec extends Specification {

    @Rule TemporaryFolder projectRoot = new TemporaryFolder()

    private File buildFile

    def setup(){
        buildFile = projectRoot.newFile(&apos;build.gradle&apos;)
        buildFile.text = &apos;&apos;&apos;
            plugins {
                id &apos;groovy&apos;
                id &apos;com.stehno.gradle.banner-plugin&apos;
            }
        &apos;&apos;&apos;.stripIndent()

        projectRoot.newFile(&apos;banner.txt&apos;).text = &apos;Awesome Banner!&apos;
    }

    def &apos;simple run&apos;(){
        when:
        BuildResult result = GradleRunner.create()
            .withPluginClasspath()
            .withProjectDir(projectRoot.root)
            .withArguments(&apos;clean build&apos;.split(&apos; &apos;))
            .build()

        then:
        println result.output
        buildPassed result

        result.output.contains(&apos;Awesome Banner!&apos;)
    }

    def &apos;simple run with status hidden&apos;(){
        when:
        BuildResult result = GradleRunner.create()
            .withPluginClasspath()
            .withProjectDir(projectRoot.root)
            .withArguments(&apos;clean build -PnoBanner&apos;.split(&apos; &apos;))
            .build()

        then:
        buildPassed result

        !result.output.contains(&apos;Awesome Banner!&apos;)
    }

    private boolean buildPassed(final BuildResult result){
        result.tasks.every { BuildTask task -&amp;gt;
            task.outcome == TaskOutcome.SUCCESS || task.outcome == TaskOutcome.UP_TO_DATE
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mostly I just extracted the &lt;code&gt;setup&lt;/code&gt; code and the &lt;code&gt;buildPassed&lt;/code&gt; check, then added a test for the &lt;code&gt;noBanner&lt;/code&gt; property support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wouldn&amp;#8217;t it be nice to make the banner file location configurable? Gradle plugins have a &quot;extension&quot; construct that allows for rich configuration of plugins by adding functionality to the Gradle DSL. For our plugin, we would like to support something like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;banner {
    enabled = true
    location = file(&apos;banner.txt&apos;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which would be used to toggle the banner display on and off and also provide a means of configuring the banner file location. This structure and both of its properties are optional, but allow additional configuration. Adding them to the plugin is fairly simple. The extension itself is just a POGO class, which for our case would be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;banner-plugin/src/main/groovy/com/stehno/gradle/banner/BannerExtension.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package com.stehno.gradle.banner

class BannerExtension {

    boolean enabled = true
    File location
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To register the extension with the plugin, you add the following to the first line of the &lt;code&gt;BannerPlugin&lt;/code&gt; &lt;code&gt;apply(Project)&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;project.extensions.create(&apos;banner&apos;, BannerExtension)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last part of adding the extension support is to have the task actually make use of it. The &lt;code&gt;displayBanner&lt;/code&gt; method of the task will look like the
following when we are done:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@TaskAction
void displayBanner(){
    BannerExtension extension = project.extensions.getByType(BannerExtension)

    boolean enabled = project.hasProperty(&apos;bannerEnabled&apos;) ? project.property(&apos;bannerEnabled&apos;).equalsIgnoreCase(&apos;true&apos;) : extension.enabled

    File bannerFile = project.hasProperty(&apos;bannerFile&apos;) ? new File(project.property(&apos;bannerFile&apos;)) : (extension.location ?: project.file(&apos;banner.txt&apos;))


    if( enabled ){
        bannerFile.eachLine { line-&amp;gt;
            logger.lifecycle line
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I modified the &lt;code&gt;noBanner&lt;/code&gt; property and converted it to a flag so that now you would pass in &lt;code&gt;-PbannerEnabled=false&lt;/code&gt; to disable it. I also added a means
of configuring the banner file from the command line or via the extension, with the default still being &lt;code&gt;banner.txt&lt;/code&gt;. The CLI and settings properties
will override the extension values if they are present. We need to modify the &lt;code&gt;&apos;simple run with status hidden&apos;&lt;/code&gt; test to handle the new parameter:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def &apos;simple run with status hidden&apos;(){
    when:
    BuildResult result = GradleRunner.create()
        .withPluginClasspath()
        .withProjectDir(projectRoot.root)
        .withArguments(&apos;clean build -PbannerEnabled=false&apos;.split(&apos; &apos;))
        .build()

    then:
    buildPassed result

    !result.output.contains(&apos;Awesome Banner!&apos;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, if you run the tests, everything still passes - so the defaults work as expected. Let&amp;#8217;s add some tests using the extension to override the file
location.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def &apos;extension run&apos;(){
    setup:
    buildFile.text = &apos;&apos;&apos;
        plugins {
            id &apos;groovy&apos;
            id &apos;com.stehno.gradle.banner-plugin&apos;
        }

        banner {
            location = file(&apos;other-banner.txt&apos;)
        }
    &apos;&apos;&apos;.stripIndent()

    when:
    BuildResult result = GradleRunner.create()
        .withPluginClasspath()
        .withProjectDir(projectRoot.root)
        .withArguments(&apos;clean build&apos;.split(&apos; &apos;))
        .build()

    then:
    buildPassed result

    result.output.contains(&apos;Awesome-er Banner!&apos;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this test we have to override the default build file we created in &lt;code&gt;setup&lt;/code&gt;. I also added the creation of the other banner file in the &lt;code&gt;setup&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;projectRoot.newFile(&apos;other-banner.txt&apos;).text = &apos;Awesome-er Banner!&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, run the tests again and see that our extension works as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With our newly minted Gradle plugin we should be able to use it in our original project as a local test before deployment. An easy way to do this is to publish it to your local maven repository and then configure the other project to use it. In the plugin project, add &lt;code&gt;id &apos;maven-publish&apos;&lt;/code&gt; to the &lt;code&gt;plugins&lt;/code&gt; block, which will allow us to publish to the local maven repo. Then run &lt;code&gt;./gradlew publishToMavenLocal&lt;/code&gt;, which does what it says.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the original external &lt;code&gt;build.gradle&lt;/code&gt; file we need to add bootstrapping code to bring in the local plugin and also remove the old &lt;code&gt;banner&lt;/code&gt; task. The
updated &lt;code&gt;build.gradle&lt;/code&gt; file will look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build-banner/build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;buildscript {
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath &quot;com.stehno.gradle:banner-plugin:0.1.0&quot;
    }
}

plugins {
    id &apos;groovy&apos;
}

apply plugin: &quot;com.stehno.gradle.banner-plugin&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that we are pulling the plugin from the local maven repository. If you run the build now, you get your expected banner:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; ./gradlew build
:banner
  _______ _            ____        _ _     _
 |__   __| |          |  _ \      (_) |   | |
    | |  | |__   ___  | |_) |_   _ _| | __| |
    | |  | &apos;_ \ / _ \ |  _ &amp;lt;| | | | | |/ _` |
    | |  | | | |  __/ | |_) | |_| | | | (_| |_ _ _
    |_|  |_| |_|\___| |____/ \__,_|_|_|\__,_(_|_|_)
:build

BUILD SUCCESSFUL

Total time: 0.543 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, we should be able to use a different banner file. Create another banner file as &lt;code&gt;flag.txt&lt;/code&gt; (with whatever you want in it) and configure the
build to use it by adding:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;banner {
    location = file(&apos;flag.txt&apos;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to the bottom of the build file. Now, with my new version, I get:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; ./gradlew build
:banner
This is GRADLE!!!
:build

BUILD SUCCESSFUL

Total time: 0.474 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can also disable the banner via config, set &lt;code&gt;enabled = false&lt;/code&gt; in the extension code, and it will not appear. But, you can force it on the command
line by adding &lt;code&gt;-PbannerEnabled=true&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From here, you can distribute your plugin to friends and coworkers as long as you have some shared repository that you can point them to, but what if
you came up with something cool enough to share to a larger audience? For that you want to publish to the &lt;a href=&quot;http://plugins.gradle.com&quot; class=&quot;bare&quot;&gt;http://plugins.gradle.com&lt;/a&gt; repo, which is
what is used by the &lt;code&gt;plugins&lt;/code&gt; block of the &lt;code&gt;build.gradle&lt;/code&gt; file. I won&amp;#8217;t go too far down that path in this post, but basically you will need to add the
&lt;code&gt;id &apos;com.gradle.plugin-publish&apos; version &apos;0.9.4&apos;&lt;/code&gt; plugin to the plugin project, which will handle the actual publishing for you once you configure it
for your project. In our case this would be something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;pluginBundle {
    website = &apos;http://yourdomain.com/banner-plugin&apos;
    vcsUrl = &apos;https://github.com/cjstehno/banner-plugin&apos;
    description = &apos;Gradle plugin to add a fancy banner to your build log.&apos;
    tags = [&apos;gradle&apos;, &apos;groovy&apos;]

    plugins {
        webpreviewPlugin {
            id = &apos;com.stehno.gradle.banner-plugin&apos;
            displayName = &apos;Gradle Build Banner Plugin&apos;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have that in place and have signed up with the plugins portal (free) you run &lt;code&gt;./gradlew publishPlugins&lt;/code&gt; and if all goes well, you have a
publicly available plugin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tutorial has really only scratched the surface of plugin development, there is a lot more there to work with and most of it is well documented in
the Gradle User Guide or through some Google searches. It&amp;#8217;s a powerful framework and well worth spending the time to learn if you are working in Gradle.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Gradle: A Gentle Introduction</title>
      <link>http://coffeaelectronica.com/blog/2016/gradle-introduction.html</link>
      <pubDate>Wed, 2 Nov 2016 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2016/gradle-introduction.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; build tool has become widely-used over the past few years, but there are still a lot of developers who are unfamiliar with
it, and like any new framework or technology it is easier to get started with some guidance. Hopefully this will provide a nice jump start
into doing some actual work with Gradle. With that being said, let&amp;#8217;s dig in!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will forgo installing Gradle - you can read about how to do that for your platform in the Gradle documentation. Let&amp;#8217;s assume you have Gradle installed,
preferably a current version. If you run &lt;code&gt;gradle --version&lt;/code&gt; you should see something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;------------------------------------------------------------
Gradle 3.1
------------------------------------------------------------

Build time:   2016-09-19 10:53:53 UTC
Revision:     13f38ba699afd86d7cdc4ed8fd7dd3960c0b1f97

Groovy:       2.4.7
Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
JVM:          1.8.0_102 (Oracle Corporation 25.102-b14)
OS:           Linux 4.8.0-26-generic amd64&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, create a directory for your project and &lt;code&gt;cd&lt;/code&gt; into it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;mkdir hellogradle
cd hellogradle&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every Gradle project needs at least a &lt;code&gt;build.gradle&lt;/code&gt; file so we will start with the minimal requirement. Create the following file in your project
directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;plugins {
    id &apos;groovy&apos;
}

repositories {
    jcenter()
}

dependencies {
    compile &apos;org.codehaus.groovy:groovy-all:2.4.6&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;plugins&lt;/code&gt; block is used to specify the Gradle plugins used in the build; in this case we just need &lt;code&gt;groovy&lt;/code&gt; since we are making a Groovy project.
The &lt;code&gt;groovy&lt;/code&gt; plugin extends the &lt;code&gt;java&lt;/code&gt; plugin so we get its functionality as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;repositories&lt;/code&gt; block specifies which repositories are available for resolving dependency artifacts - in most cases &lt;code&gt;jcenter()&lt;/code&gt; (the Bintray
repository) is enough to start with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, the &lt;code&gt;dependencies&lt;/code&gt; block is where the project dependencies are defined as &lt;code&gt;&amp;lt;configuration&amp;gt; &apos;&amp;lt;group&amp;gt;:&amp;lt;artifact&amp;gt;:&amp;lt;version&amp;gt;&apos;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point you have a working Gradle project. You can build it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;gradle clean build&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should see something like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; hellogradle gradle clean build
:clean
:compileJava UP-TO-DATE
:compileGroovy UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar
:assemble
:compileTestJava UP-TO-DATE
:compileTestGroovy UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build

BUILD SUCCESSFUL

Total time: 0.492 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that it is already doing quite a bit for so few lines of build code. You can run &lt;code&gt;gradle tasks&lt;/code&gt; to see a list of the tasks available to your
project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far, we have been running against my local version of Gradle. One of the nice features of Gradle is the wrapper functionality. The wrapper allows
the project to specify the version of Gradle it should be built under; this code is then checked into your source control system so that a new
developer can checkout the project and build it with the correct version of Gradle without it being installed on their system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the following to the bottom of the &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;task wrapper(type: Wrapper) {
    gradleVersion = &apos;3.1&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, whenever you add the wrapper or change the supported version, you need to execute the &lt;code&gt;gradle wrapper&lt;/code&gt; task to regenerate the configuration. Once
the wrapper is in place, you will want to execute all your Gradle tasks using it rather than your local installation. You do this using the &lt;code&gt;gradlew&lt;/code&gt;
or &lt;code&gt;gradlew.bat&lt;/code&gt; scripts provided in the root of your project. Now let&amp;#8217;s do a clean build again with the wrapper:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; hellogradle ./gradlew clean build
:clean
:compileJava UP-TO-DATE
:compileGroovy UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar
:assemble
:compileTestJava UP-TO-DATE
:compileTestGroovy UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build

BUILD SUCCESSFUL

Total time: 0.678 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We end up with the same result as before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This project doesn&amp;#8217;t do anything at this point - there is no code. Let&amp;#8217;s add some Groovy code; create the directories for &lt;code&gt;src/main/groovy/demo&lt;/code&gt; and
then add the file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;HelloGradle.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package demo

class HelloGradle {

    String greet(final String name){
        &quot;Hello, ${name ?: &apos;Gradle&apos;}!&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This code simply says hello to the name passed in as an argument, or Gradle by default. Now we will need to unit test our work, so let&amp;#8217;s add support
for the &lt;a href=&quot;http://spockframework.org/spock/docs/1.1-rc-2/index.html&quot;&gt;Spock testing framework&lt;/a&gt;. Add the following to your &lt;code&gt;dependencies&lt;/code&gt; closure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;testCompile &apos;org.spockframework:spock-core:1.0-groovy-2.4&apos;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now have Spock available, so let&amp;#8217;s write a unit test for our code. Create the test directories: &lt;code&gt;src/test/groovy/demo&lt;/code&gt; and then create the file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;HelloGradleSpec.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package demo

import spock.lang.Specification
import spock.lang.Unroll

class HelloGradleSpec extends Specification {

    private final HelloGradle greeter = new HelloGradle()

    @Unroll def &apos;say hello #name&apos;(){
        expect:
        greeter.greet(name) == result

        where:
        name    | result
        null    | &apos;Hello, Gradle!&apos;
        &apos;&apos;      | &apos;Hello, Gradle!&apos;
        &apos;Chris&apos; | &apos;Hello, Chris!&apos;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This test will verify that our greeter returns the expected values for &lt;code&gt;null&lt;/code&gt;-ish inputs as well as when a name is provided. I won&amp;#8217;t go into the details
of the Spock test at this point. Now, when you build the project, you will also run the tests by default:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; hellogradle ./gradlew clean build
:clean
:compileJava UP-TO-DATE
:compileGroovy
:processResources UP-TO-DATE
:classes
:jar
:assemble
:compileTestJava UP-TO-DATE
:compileTestGroovy
:processTestResources UP-TO-DATE
:testClasses
:test
:check
:build

BUILD SUCCESSFUL

Total time: 1.789 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice &lt;code&gt;:test&lt;/code&gt; near the bottom. Gradle also provides an HTML report of your test results. The report will be generated in the &lt;code&gt;build/reports&lt;/code&gt; directory
and will look something like the following image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/gradle-test-report.png&quot; alt=&quot;gradle test report&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have a test, it might be nice to have some idea of our test coverage. Gradle provides a plugin for the &lt;a href=&quot;http://www.eclemma.org/jacoco/&quot;&gt;jacoco&lt;/a&gt;
code coverage library. You can add the plugin by adding &lt;code&gt;id &apos;jacoco&apos;&lt;/code&gt; to the &lt;code&gt;plugins&lt;/code&gt; block of your &lt;code&gt;build.gradle&lt;/code&gt; file, which allows you to run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;./gradlew clean build jacocoTestReport&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to build the project with tests and a generated test coverage report. Again, the report is generated in the &lt;code&gt;build/reports&lt;/code&gt; directory - it will look
something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/gradle-coverage-report.png&quot; alt=&quot;gradle coverage report&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The coverage report allows you to drill down into the source code and see what is and is not covered by your tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Testing your code is nice, but you need a way to run your application outside of testing. Let&amp;#8217;s first add a &lt;code&gt;main&lt;/code&gt; method to our Groovy code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;static void main(args){
    println new HelloGradle().greet(args ? args[0] : null)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing fancy, just instantiate the &lt;code&gt;HelloGradle&lt;/code&gt; class and call the &lt;code&gt;greet(String)&lt;/code&gt; method with the first argument, if there is one. To make the project
runnable, we need to add the &lt;code&gt;application&lt;/code&gt; plugin and specify a &quot;main class&quot;. To do this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;id &apos;application&apos;&lt;/code&gt; to the &lt;code&gt;plugins&lt;/code&gt; block&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;group = &apos;demo&apos;&lt;/code&gt; to give the project an artifact group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;version = &apos;0.0.1&apos;&lt;/code&gt; to give your project a version&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;mainClassName = &apos;demo.HelloGradle&apos;&lt;/code&gt; to the &lt;code&gt;build.gradle&lt;/code&gt; file outside of other configuration blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that, you now have a new task &lt;code&gt;run&lt;/code&gt; which will run the application for you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; hellogradle ./gradlew run
:compileJava UP-TO-DATE
:compileGroovy
:processResources UP-TO-DATE
:classes
:run
Hello, Gradle!

BUILD SUCCESSFUL

Total time: 1.526 secs&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also generates &lt;code&gt;.tar&lt;/code&gt; and &lt;code&gt;.zip&lt;/code&gt; distributions of the project which contain starter scripts and all required dependencies to deploy and run your
application outside of the project itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code quality analysis tools are also available as Gradle plugins. A common one for Groovy development is &lt;a href=&quot;http://codenarc.sourceforge.net/&quot;&gt;CodeNarc&lt;/a&gt;
which runs quality rules against your code to generate a report of possible issues. We can add this to the project by adding &lt;code&gt;id &apos;codenarc&apos;&lt;/code&gt; to the
&lt;code&gt;plugins&lt;/code&gt; block and adding some additional config to &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;codenarcMain {
    ignoreFailures false
    configFile file(&apos;config/codenarc-main.rules&apos;)

    maxPriority1Violations 0
    maxPriority2Violations 5
    maxPriority3Violations 10
}

codenarcTest {
    ignoreFailures true
    configFile file(&apos;config/codenarc-test.rules&apos;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which configures a different rules and criteria for main source code vs test source code. The main and test rule sets are based on their suggested
configurations, personal preference and experience - I generally use the files from my Vanilla project
(&lt;a href=&quot;https://github.com/cjstehno/vanilla/blob/master/config/codenarc-main.rules&quot;&gt;main&lt;/a&gt;, &lt;a href=&quot;https://github.com/cjstehno/vanilla/blob/master/config/codenarc-test.rules&quot;&gt;test&lt;/a&gt;)
for simplicity. This configuration will fail the build when the violation thresholds are exceeded for the main classes, but will simply report on the
violations for test classes. The build will now run the codenarc checks when a build is executed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The build will let you know if violations were found, and in any case will generate a report in the &lt;code&gt;build/reports/codenarc&lt;/code&gt; directory. The report will
look something like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/gradle-codenarc-report.png&quot; alt=&quot;gradle codenarc report&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, we have a Gradle-based Groovy project with portable support for building, testing, coverage, code quality and application run/deployment, all
 with a few dozen lines of understandable code. While there is a lot more you can and should do with Gradle, this is a good starting point. From here, you
 should read through their documentation in general or touch on topics as you need them to figure out how to do something. Also Google is your best
 reference for finding how-tos or 3rd-party plugins; however, there is an official &lt;a href=&quot;https://plugins.gradle.org/&quot;&gt;plugin repository&lt;/a&gt; that is starting to catch on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you get the hang of it Gradle is hard to let go of due to its compact code, expressiveness and flexibility without the pains and rigor of older tools, like
Maven and Ant.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Gradle Natives Plugin Update</title>
      <link>http://coffeaelectronica.com/blog/2016/gradle-natives-update.html</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2016/gradle-natives-update.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few years ago I wrote a post about my &lt;a href=&quot;https://github.com/cjstehno/gradle-natives&quot;&gt;Gradle-Natives plugin&lt;/a&gt;, called &lt;a href=&quot;http://coffeaelectronica.com/blog/2014/going-native-with-gradle.html&quot;&gt;&quot;Going Native with Gradle&quot;&lt;/a&gt;. The plugin was the result of some failed attempts at game programming and it pretty much stopped there; however, it seems there are some users who found it useful. In the years since it was written, it sat and got buggy and then recently just became useless due to external library changes and the rigidity of the plugin functionality. Tryign to be a good open source citizen, I figured it would be a good time to do some updates that will hopefully keep the plugin viable for a while.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the new release, I figured it would be good to go back to the original post and attempt a similar example. Using the example code from the
LWJGL &lt;a href=&quot;https://www.lwjgl.org/guide&quot;&gt;Getting Started Guide&lt;/a&gt; we have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;import org.lwjgl.*;
import org.lwjgl.glfw.*;
import org.lwjgl.opengl.*;

import static org.lwjgl.glfw.Callbacks.*;
import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryUtil.*;

public class HelloWorld {

	// The window handle
	private long window;

	public void run() {
		System.out.println(&quot;Hello LWJGL &quot; + Version.getVersion() + &quot;!&quot;);

		try {
			init();
			loop();

			// Free the window callbacks and destroy the window
			glfwFreeCallbacks(window);
			glfwDestroyWindow(window);
		} finally {
			// Terminate GLFW and free the error callback
			glfwTerminate();
			glfwSetErrorCallback(null).free();
		}
	}

	private void init() {
		// Setup an error callback. The default implementation
		// will print the error message in System.err.
		GLFWErrorCallback.createPrint(System.err).set();

		// Initialize GLFW. Most GLFW functions will not work before doing this.
		if ( !glfwInit() )
			throw new IllegalStateException(&quot;Unable to initialize GLFW&quot;);

		// Configure our window
		glfwDefaultWindowHints(); // optional, the current window hints are already the default
		glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // the window will stay hidden after creation
		glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // the window will be resizable

		int WIDTH = 300;
		int HEIGHT = 300;

		// Create the window
		window = glfwCreateWindow(WIDTH, HEIGHT, &quot;Hello World!&quot;, NULL, NULL);
		if ( window == NULL )
			throw new RuntimeException(&quot;Failed to create the GLFW window&quot;);

		// Setup a key callback. It will be called every time a key is pressed, repeated or released.
		glfwSetKeyCallback(window, (window, key, scancode, action, mods) -&amp;gt; {
			if ( key == GLFW_KEY_ESCAPE &amp;amp;&amp;amp; action == GLFW_RELEASE )
				glfwSetWindowShouldClose(window, true); // We will detect this in our rendering loop
		});

		// Get the resolution of the primary monitor
		GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
		// Center our window
		glfwSetWindowPos(
			window,
			(vidmode.width() - WIDTH) / 2,
			(vidmode.height() - HEIGHT) / 2
		);

		// Make the OpenGL context current
		glfwMakeContextCurrent(window);
		// Enable v-sync
		glfwSwapInterval(1);

		// Make the window visible
		glfwShowWindow(window);
	}

	private void loop() {
		// This line is critical for LWJGL&apos;s interoperation with GLFW&apos;s
		// OpenGL context, or any context that is managed externally.
		// LWJGL detects the context that is current in the current thread,
		// creates the GLCapabilities instance and makes the OpenGL
		// bindings available for use.
		GL.createCapabilities();

		// Set the clear color
		glClearColor(1.0f, 0.0f, 0.0f, 0.0f);

		// Run the rendering loop until the user has attempted to close
		// the window or has pressed the ESCAPE key.
		while ( !glfwWindowShouldClose(window) ) {
			glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer

			glfwSwapBuffers(window); // swap the color buffers

			// Poll for window events. The key callback above will only be
			// invoked during this call.
			glfwPollEvents();
		}
	}

	public static void main(String[] args) {
		new HelloWorld().run();
	}

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we put this in a simple Gradle project with &lt;code&gt;build.gradle&lt;/code&gt; as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;plugins {
    id &apos;com.stehno.natives&apos; version &apos;0.2.4&apos;
    id &apos;java&apos;
    id &apos;application&apos;
}

version = &quot;0.0.1&quot;
group = &quot;com.stehno&quot;
mainClassName = &apos;hello.HelloWorld&apos;

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    jcenter()
}

dependencies {
    compile &apos;org.lwjgl:lwjgl:3.0.0&apos;
    compile &apos;org.lwjgl:lwjgl-platform:3.0.0:natives-windows&apos;
    compile &apos;org.lwjgl:lwjgl-platform:3.0.0:natives-linux&apos;
    compile &apos;org.lwjgl:lwjgl-platform:3.0.0:natives-osx&apos;
}

task wrapper(type: Wrapper) {
    gradleVersion = &quot;2.14&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can view the native libraries for all platforms using &lt;code&gt;./gradlew listNatives&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;:listNatives
Native libraries found for configurations (compile, runtime)...
 - lwjgl-platform-3.0.0-natives-linux.jar:
        [LINUX] libjemalloc.so
        [LINUX] liblwjgl.so
        [LINUX] libglfw.so
        [LINUX] libopenal.so
 - lwjgl-platform-3.0.0-natives-osx.jar:
        [MAC] liblwjgl.dylib
        [MAC] libjemalloc.dylib
        [MAC] libglfw.dylib
        [MAC] libopenal.dylib
 - lwjgl-platform-3.0.0-natives-windows.jar:
        [WINDOWS] lwjgl.dll
        [WINDOWS] lwjgl32.dll
        [WINDOWS] OpenAL.dll
        [WINDOWS] jemalloc.dll
        [WINDOWS] glfw.dll
        [WINDOWS] glfw32.dll
        [WINDOWS] jemalloc32.dll
        [WINDOWS] OpenAL32.dll&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and we can build and run the &lt;code&gt;HelloWorld&lt;/code&gt; application with &lt;code&gt;./gradlew clean build run&lt;/code&gt;, which begs the question of whether or not this plugin is needed, since at this point the application works and we have not used the plugin at all. I will leave that to developers who actually work with this stuff and may use the plugin - I am just updating the existing functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can inlude the native libraries in the build using &lt;code&gt;./gradlew clean build includeNatives&lt;/code&gt; which will unpack the native libraries into the project
&lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are still a number of configuration options available through the &lt;code&gt;natives&lt;/code&gt; DSL extension, such as including and excluding libraries, as well as limiting the scan to certain configurations and platforms, but I will leave those for the official documentation. Without any additional configuration you get all of the native libraries from the &lt;code&gt;compile&lt;/code&gt; and &lt;code&gt;runtime&lt;/code&gt; configurations for all platforms unpacked into the &lt;code&gt;build/natives&lt;/code&gt; directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This plugin is still pretty raw, but hopefully it is useful enough to make some developers lives easier.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>HTTP Builder NG for Groovy and Java</title>
      <link>http://coffeaelectronica.com/blog/2016/httpbuilder-ng-demo.html</link>
      <pubDate>Sun, 18 Sep 2016 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2016/httpbuilder-ng-demo.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/jgritman/httpbuilder&quot;&gt;&lt;code&gt;HttpBuilder&lt;/code&gt;&lt;/a&gt; project has been a go-to library for the simplification of HTTP requests for years; however, development on the project has stalled and seemingly
died. A friend of mine (&lt;a href=&quot;https://github.com/dwclark&quot;&gt;Dave Clark&lt;/a&gt;) decided to pick up where the project left off and to bring it up-to-date with modern Groovy and Java 8 support. The
&lt;a href=&quot;https://github.com/dwclark/http-builder-ng&quot;&gt;HTTP Builder NG&lt;/a&gt; project is a major update and refactor of the original project. I joined on to help with development, documentation and testing. In my opinion,
this effort has brought the library back from the dead, better than ever. In this post, I will walk through accessing a simple REST service using the &lt;code&gt;HttpBuilder&lt;/code&gt; with both Groovy and Java examples -
yes, the new version of the library supports standard Java 8 coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we need a REST service to work with. I have thrown together a simple set of endpoints using the &lt;a href=&quot;http://sparkjava.com&quot;&gt;Spark Web Framework&lt;/a&gt; to make a &quot;message of the day&quot; service. There are three
endpoints:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET /message&lt;/code&gt; - retrieves the current stored message&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;POST /message&lt;/code&gt; - saves the &lt;code&gt;text&lt;/code&gt; field of the JSON body content as the new message&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELETE /message&lt;/code&gt; - deletes the current message&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is not much to it, but it should be enough to play with. You can find the code in the [repo for this post](&lt;a href=&quot;https://github.com/cjstehno/httpb-demo&quot; class=&quot;bare&quot;&gt;https://github.com/cjstehno/httpb-demo&lt;/a&gt;). Startup the server by running:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;./gradlew run&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the root of the project. The server will be running on &lt;a href=&quot;http://localhost:4567&quot; class=&quot;bare&quot;&gt;http://localhost:4567&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start off by retrieving the current message from the server. We need a base configured &lt;code&gt;HttpBuilder&lt;/code&gt; object to make requests from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;HttpBuilder http = HttpBuilder.configure {
    request.uri = &apos;http://localhost:4567&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, we need to make a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;/message&lt;/code&gt; path:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def result = http.get {
    request.uri.path = &apos;/message&apos;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you run this code, you will get the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[text:n/a, timestamp:2016-09-16T12:47:55+0000]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which is a &lt;code&gt;Map&lt;/code&gt; of the parsed JSON data coming back from the server - the &lt;code&gt;HttpBuilder&lt;/code&gt; recognizes the &lt;code&gt;application/json&lt;/code&gt; response content and parses it for you. In this case
all we really want is the text, so let&amp;#8217;s transform the response data a bit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String text = http.get(String){
    request.uri.path = &apos;/message&apos;
    response.success { FromServer from, Object body-&amp;gt;
        body.text
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have added an expected result type of &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;response.success()&lt;/code&gt; handler. This handler will be called when a successful response code is received (code &amp;lt; 400). When
it is called it will pull the text field out of our body object, which in this case, is the already-parsed JSON data. The return value from the &lt;code&gt;success()&lt;/code&gt; method is returned
as the result - the text of the current message. When you run this version of the code you get the current message text:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;n/a&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the default &quot;empty&quot; message content. How do we update the message to something more interesting? The service exposes &lt;code&gt;POST /message&lt;/code&gt; which will take the &lt;code&gt;text&lt;/code&gt; field of the request body
content and use it as the new message. We can write a &lt;code&gt;POST&lt;/code&gt; request just as easily as our &lt;code&gt;GET&lt;/code&gt; request:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String updated = http.post(String) {
    request.uri.path = &apos;/message&apos;
    request.contentType = &apos;application/json&apos;
    request.body = { text &apos;HttpBuilder is alive!&apos; }
    response.success { FromServer from, Object body -&amp;gt;
        body.text
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, we will expect the text of the new message back from the server, but this time we are calling the &lt;code&gt;post()&lt;/code&gt; method with a JSON content type. Note that our body content is using the Groovy
&lt;code&gt;JsonBuilder&lt;/code&gt; closure format, it could have just as easily been a &lt;code&gt;Map&lt;/code&gt; of the data to be encoded. Similar to the response decoding, the request body is automatically encoded based on the content
type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you run the code now, you will get:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;HttpBuilder is alive!&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You could also call the &lt;code&gt;get()&lt;/code&gt; method again and verify that it is the current message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a final example with our service, let&amp;#8217;s call the &lt;code&gt;DELETE /message&lt;/code&gt; endpoint to reset the message back to it&amp;#8217;s &quot;empty&quot; state. A &lt;code&gt;DELETE&lt;/code&gt; request is just as simple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String deleted = http.delete(String){
    request.uri.path = &apos;/message&apos;
    response.success { FromServer from, Object body -&amp;gt;
        body.text
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The result will be the new message after deletion:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;n/a&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which is the &quot;empty&quot; state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One thing we notice now that we have written all of the verb calls is that there are a lot of similarities between them. They all call the same &lt;code&gt;path&lt;/code&gt; and they all handle the successful response
content in the same manner. I am not a fan of duplication, so we can move the common configuration up into the main &lt;code&gt;configure&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;HttpBuilder http = HttpBuilder.configure {
    request.uri = &apos;http://localhost:4567/message&apos;
    response.success { FromServer from, Object body -&amp;gt;
        body.text
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and our verb methods, now contain only what they need to do their work:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String message = http.get(String) {}

String updated = http.post(String) {
    request.contentType = &apos;application/json&apos;
    request.body = { text &apos;HttpBuilder is alive!&apos; }
}

String deleted = http.delete(String) {}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nice and clean. Now wait, I know, I promised something similar in plain old Java, well Java 8 anyway&amp;#8230;&amp;#8203; ok, you can do the same operations in Java with a fairly similar expressiveness:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;HttpBuilder http = HttpBuilder.configure(config -&amp;gt; {
    config.getRequest().setUri(&quot;http://localhost:4567/message&quot;);
    config.getResponse().success(new BiFunction&amp;lt;FromServer, Object, String&amp;gt;() {
        @Override public String apply(FromServer fromServer, Object body) {
            return ((Map&amp;lt;String, Object&amp;gt;) body).get(&quot;text&quot;).toString();
        }
    });
});

String message = http.get(String.class, config -&amp;gt; {});

System.out.println(&quot;Starting content: &quot; + message);

// update the content

String updated = http.post(String.class, config -&amp;gt; {
    config.getRequest().setContentType(&quot;application/json&quot;);
    config.getRequest().setBody(singletonMap(&quot;text&quot;, &quot;HttpBuilder works from Java too!&quot;));
});

System.out.println(&quot;Updated content: &quot; + updated);

// delete the content

String deleted = http.delete(String.class, config -&amp;gt; {});

System.out.println(&quot;Post-delete content: &quot; + deleted);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the Java 8 lambdas make the syntax about as simple as the Groovy DSL. When you run this version of the client you get:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Starting content: n/a
Updated content: HttpBuilder works from Java too!
Post-delete content: n/a&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Java or Groovy, the library makes HTTP interactions much easier to work with. Check out the &lt;a href=&quot;https://github.com/dwclark/http-builder-ng&quot;&gt;project&lt;/a&gt; and feel free to submit bug reports and feature
requests, or even suggested details to be documented.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>ND4J Matrix Math</title>
      <link>http://coffeaelectronica.com/blog/2016/nd4j-math.html</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2016/nd4j-math.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my last post (&lt;a href=&quot;http://coffeaelectronica.com/blog/2016/commons-math-matrix.html&quot;&gt;Commons Math - RealMatrix&lt;/a&gt;), I discussed the matrix operations support provided by the Apache Commons Math API. In doing my research I also stumbled on a library that is much closer in functionality to the Python NumPy library (commonly used in Machine Learning examples). The &lt;a href=&quot;http://nd4j.org/&quot;&gt;ND4J&lt;/a&gt; library is a scientific computing library for the JVM, meant to be used in production environments, which means routines are designed to run fast with minimum RAM requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main draw I had at this point was that their support for array-style element-by-element operations was much deeper than the matrix operations provided by the Apache Commons Math API and much closer to what I was seeing in the Python code I was working with, which makes conversion simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With NumPy in Python you can multiply two arrays such that the result is the multiplication of each value of the array by the corresponding value in the second array. This is not so simple with matrices (as shown in my last post). With ND4J, it becomes much simpler:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def arrA = Nd4j.create([1.0, 2.0, 3.0] as double[])
def arrB = Nd4j.create([2.0, 4.0, 6.0] as double[])
def arrC = arrA.mul(arrB)
println &quot;$arrA + $arrB = $arrC&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;will result in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[1.00, 2.00, 3.00] * [2.00, 4.00, 6.00] = [ 2.00,  8.00, 18.00]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which is as we would expect from the Python case. ND4J also has the ability to do two-dimensional (matrix-style) arrays:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def matA = Nd4j.create([
    [1.0, 2.0, 3.0] as double[],
    [4.0, 5.0, 6.0] as double[]
] as double[][])
println &quot;Matrix: $matA\n&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which will produce:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Matrix: [[1.00, 2.00, 3.00],
 [4.00, 5.00, 6.00]]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the other mathematical operations I mentioned in the previous post are available and with data structures that feel a lot more rich and refined for general use. This is barely scratching the surface of the available functionality. Also, the underlying code is native-based and has support for running on CUDA cores for higher performance. This library is definitely one to keep in mind for cases when you have a lot of array and matrix-based operations.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Apache Commons Math - RealMatrix</title>
      <link>http://coffeaelectronica.com/blog/2016/commons-math-matrix.html</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2016/commons-math-matrix.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been reading &lt;a href=&quot;https://www.manning.com/books/machine-learning-in-action&quot;&gt;Machine Learning in Action&lt;/a&gt;, which is a great book; however, all of the examples are in Python. While Python seems like a decent language, it is not one of my primary languages. With that in mind, I have been converting the Python examples into Groovy so that a few months from now when I come back and try to understand what I learned, I will be able to decipher the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What I have found is that, at least in the examples for this book, there are numerous Matrix-based operations. My Linear Algebra was a long time ago, but I think I remember some of the basics; however, it&amp;#8217;s nice to have a Java-based implementation in the &lt;a href=&quot;http://commons.apache.org/proper/commons-math/&quot;&gt;Apache Commons Math&lt;/a&gt; &lt;code&gt;RealMatrix&lt;/code&gt; implementations (there are others but this is what I have been focussing on). It took me a little time to get back up to speed, especially since the Python examples will have something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;someMatrix = someMatrix * anotherMatrix + thirdMatrix * number&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the resulting matrix is the product of two matrices added to the product of a matrix and a scalar number. Conceptually, this boils down to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Multiply &lt;code&gt;someMatrix&lt;/code&gt; by &lt;code&gt;anotherMatrix&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiply every element of &lt;code&gt;thirdMatrix&lt;/code&gt; by the scalar &lt;code&gt;number&lt;/code&gt; value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add every element of the matrix in step 1 with the element at the same position of the matrix from step 2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not hard to grasp, and not even all that hard to code; however, this is something I&amp;#8217;d rather push off to someone else&amp;#8217;s implementation instead of writing it myself. That is where the Commons Math library comes into play. The &lt;code&gt;RealMatrix&lt;/code&gt; interface defines matrix support for &lt;code&gt;double&lt;/code&gt; values - there is also a more flexible &lt;code&gt;FieldMatrix&amp;lt;T&amp;gt;&lt;/code&gt; interface, but &lt;code&gt;double&lt;/code&gt; values work well as an example. Let&amp;#8217;s start by setting up a simple Groovy script for playing with matrices. Create a file named &lt;code&gt;matrix-math.groovy&lt;/code&gt; and add the following to it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;matrix-math.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Grapes(
   @Grab(&apos;org.apache.commons:commons-math3:3.6.1&apos;)
)

import org.apache.commons.math3.linear.*

def mat = new Array2DRowRealMatrix(4,3)

println mat&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This script will download the artifacts for the Apache Commons Math library and create a simple &lt;code&gt;RealMatrix&lt;/code&gt; with 4 rows and 3 columns. It will then be printed to the console. When you run it, you should see&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Array2DRowRealMatrix{{0.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0},{0.0,0.0,0.0}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which represents our empty 4x3 matrix. While this is not a bad representation, it would be nicer if we could get a better representation of the rows and columns of data for our poor human eyes. The library provides a &lt;code&gt;RealMatrixFormat&lt;/code&gt; for this. Add the following to the script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def formatter = new RealMatrixFormat(&apos;{&apos;, &apos;}&apos;, &apos;{&apos;, &apos;}&apos;, &apos;,\n &apos;, &apos;,\t&apos;)

println formatter.format(mat)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the &lt;code&gt;println&lt;/code&gt; line replaces the existing one. Now we get a better, more human-readable representation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{0,    0,      0},
 {0,    0,      0},
 {0,    0,      0},
 {0,    0,      0}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interesting so far, but we would really like some data. With the existing matrix, you can add data in rows or columns by index, similar to an array:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;mat.setRow(0, [1.0, 2.0, 3.0] as double[])
mat.setColumn(1, [9.0, 8.0, 7.0, 6.0] as double[])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now when you run the code, notice that you get the first row and the second column populated with the provided data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{1,    9,      3},
 {0,    8,      0},
 {0,    7,      0},
 {0,    6,      0}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also notice that the column data overwrote the row data we set for the second column (index 1). In our row data it was &lt;code&gt;2.0&lt;/code&gt;, but the &lt;code&gt;9.0&lt;/code&gt; value from the column was applied after and is the final value. The other main method of creating a matrix is by providing the data directly in the constructor. Say we want to create a matrix with the same dimensions, but with a sequential collection of values, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;1  2  3
4  5  6
7  8  9
10 11 12&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can do the following in the code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def seqMat = new Array2DRowRealMatrix([
    [1.0, 2.0, 3.0] as double[],
    [4.0, 5.0, 6.0] as double[],
    [7.0, 8.0, 9.0] as double[],
    [10.0, 11.0, 12.0] as double[]
] as double[][])

println formatter.format(seqMat)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This code creates a matrix with an array of arrays, where the inner arrays are the rows of data. When printed out, you get the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{1,    2,      3},
 {4,    5,      6},
 {7,    8,      9},
 {10,   11,     12}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s do some operations on our matrices. You can do common math operations on two matrices. Adding two matrices:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def sum = mat.add(seqMat)
println formatter.format(sum)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This gives you the element-by-element sum of the values and yields:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{2,    11,     6},
 {4,    13,     6},
 {7,    15,     9},
 {10,   17,     12}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Subtracting one matrix from another:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def diff = seqMat.subtract(mat)
println formatter.format(diff)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{0,    -7,     0},
 {4,    -3,     6},
 {7,    1,      9},
 {10,   5,      12}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multiplication of matrices is not what you might intuitively think it is, unless you are up on your Linear Algebra. Since there are whole wiki pages devoted to &lt;a href=&quot;https://en.wikipedia.org/wiki/Matrix_multiplication&quot;&gt;Matrix Multiplication&lt;/a&gt;, I won&amp;#8217;t go into it here beyond stating that it can be done when you have square matrices (ours are not). Not being a tutorial on Linear Algebra, I am going to leave it at that. You can also multiply a matrix by a scalar number:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def prod = mat.scalarMultiply(2)
println formatter.format(prod)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which multiplies every element by the given value and results in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{2,    18,     6},
 {0,    16,     0},
 {0,    14,     0},
 {0,    12,     0}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, there is a &lt;code&gt;scalarAdd(double)&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other useful operations may be performed on matrices. You can &quot;transpose&quot; the matrix:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def trans = seqMat.transpose()
println formatter.format(trans)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This rotates the values of the matrix to turn rows into columns, as in our example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{1,    2,      3},
 {4,    5,      6},
 {7,    8,      9},
 {10,   11,     12}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{1,    4,      7,      10},
 {2,    5,      8,      11},
 {3,    6,      9,      12}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a handful of other built-in operations available to matrices that are probably useful if you know what you are doing, but at this point, I do not. Another useful construct is the set of &quot;walker&quot; methods that allow you to walk through the elements of the matrix in various ways, allowing you to modify the elements or simply read them. Let&amp;#8217;s take our initial matrix as an example and multiply every element by &lt;code&gt;2.0&lt;/code&gt; both in place and in an external collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the in-place modification we need a &lt;code&gt;RealMatrixChangingVisitor&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class MultiplicationVisitor extends DefaultRealMatrixChangingVisitor {

    double factor

    double visit(int row, int column, double value){
        value * factor
    }
}

mat.walkInOptimizedOrder(new MultiplicationVisitor(factor:2.0))
println formatter.format(mat)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This visitor simply multiplies each value by the provided &lt;code&gt;factor&lt;/code&gt; and returns it, which will update the value in the matrix. The resulting matrix has the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{{2,    18,     6},
 {0,    16,     0},
 {0,    14,     0},
 {0,    12,     0}}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also walk a matrix without the ability to change the internal values. This requires a &lt;code&gt;RealMatrixPreservingVisitor&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class CollectingVisitor extends DefaultRealMatrixPreservingVisitor {

    List values = []

    void visit(int row, int column, double value){
        values &amp;lt;&amp;lt; value
    }
}

def collectingVisitor = new CollectingVisitor()
mat.walkInOptimizedOrder(collectingVisitor)
println collectingVisitor.values&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, the values are collected into a list and no matrix value is modified. You get the following result:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[2.0, 18.0, 6.0, 0.0, 16.0, 0.0, 0.0, 14.0, 0.0, 0.0, 12.0, 0.0]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This contains a list of all the values from our original matrix after the previous visitor has modified it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Matrix operations can seem quite complicated; however, they are not bad with a helpful library. So far the Commons Math API seems pretty useful for these more advanced math concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The entire script for this tutorial is provided below for completeness:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;matrix-math.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Grapes(
   @Grab(&apos;org.apache.commons:commons-math3:3.6.1&apos;)
)

import org.apache.commons.math3.linear.*

def formatter = new RealMatrixFormat(&apos;{&apos;, &apos;}&apos;, &apos;{&apos;, &apos;}&apos;, &apos;,\n &apos;, &apos;,\t&apos;)

def mat = new Array2DRowRealMatrix(4,3)
mat.setRow(0, [1.0, 2.0, 3.0] as double[])
mat.setColumn(1, [9.0, 8.0, 7.0, 6.0] as double[])

println formatter.format(mat)
println()

def seqMat = new Array2DRowRealMatrix([
    [1.0, 2.0, 3.0] as double[],
    [4.0, 5.0, 6.0] as double[],
    [7.0, 8.0, 9.0] as double[],
    [10.0, 11.0, 12.0] as double[]
] as double[][])

println formatter.format(seqMat)
println()

def sum = mat.add(seqMat)
println formatter.format(sum)
println()

def diff = seqMat.subtract(mat)
println formatter.format(diff)
println()

def prod = mat.scalarMultiply(2)
println formatter.format(prod)
println()

def trans = seqMat.transpose()
println formatter.format(trans)
println()

class MultiplicationVisitor extends DefaultRealMatrixChangingVisitor {

    double factor

    double visit(int row, int column, double value){
        value * factor
    }
}

mat.walkInOptimizedOrder(new MultiplicationVisitor(factor:2.0))
println formatter.format(mat)
println()

class CollectingVisitor extends DefaultRealMatrixPreservingVisitor {

    List values = []

    void visit(int row, int column, double value){
        values &amp;lt;&amp;lt; value
    }
}

def collectingVisitor = new CollectingVisitor()
mat.walkInOptimizedOrder(collectingVisitor)
println collectingVisitor.values
println()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Gradle Dependencies Behind the Wall</title>
      <link>http://coffeaelectronica.com/blog/2016/dependencies-behind-the-wall.html</link>
      <pubDate>Sun, 10 Jul 2016 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2016/dependencies-behind-the-wall.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some companies like to take full control of their build environments and disallow builds that pull artifacts from external sources so that only approved internal artifact repositories are used containing only approved artifacts. While the validity of this is debatable, it exists and in my experience tends to add roadblocks to development, especially when working with new frameworks and libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider the scenario where you are working on a poject that uses a newer version of the Spring Framework than has been previously used in the company. Now you need to get the new Spring artifacts into your approved repository, which requires an issue ticket of some sort and at least one or two architects to approve it. I am sure I am not shocking you when I say that Spring has numerous dependencies if you are doing anything interesting with it and they are all transient. How do you get a list of the dependencies that you need to have added without an arduous catalogging of artifacts and their dependencies or numerous iterations of the list-ticket-approval work flow( which is not generally speedy)? You write a Gradle plugin to do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have added a &lt;code&gt;checkAvailability&lt;/code&gt; task to my &lt;a href=&quot;http://stehno.com/dependency-checker/&quot;&gt;Dependency Checker Plugin&lt;/a&gt;. This task allows you to do your development work using the standard &lt;code&gt;jcenter&lt;/code&gt; or &lt;code&gt;mavenCentral&lt;/code&gt; artifact repositories so that you can get things working, but when you are ready to lock down your dependencies you can run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;./gradlew checkAvailability -PrepoUrls=http://artifacts.mycompany.com/repository&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which will list out the dependencies missing from the specified repository without affecting your build. The reported console entries will look something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Availability check for (commons-lang:commons-lang:2.1.2): FAILED&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can provide additional configuration to futher configure the task:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;checkAvailability {
    repoUrls = [&apos;http://artifacts.mycompany.com/repository&apos;]
    configurations = [&apos;runtime&apos;]
    ignored = [&apos;com.something:thingifier:1.2.3&apos;]
    failOnMissing = true
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This configuration will specify the default &lt;code&gt;repoUrls&lt;/code&gt; to be used, which may still be overridden on the command line. The &lt;code&gt;configurations&lt;/code&gt; property allows you to limit the dependency configurations searched (to only &lt;code&gt;runtime&lt;/code&gt; in this case). The &lt;code&gt;ignored&lt;/code&gt; property allows specified artifacts to be ignored even if they are missing. And finally, the &lt;code&gt;failOnMissing&lt;/code&gt; property will cause the build to fail when set to &lt;code&gt;true&lt;/code&gt; after reporting all the missing dependencies - the default is &lt;code&gt;false&lt;/code&gt; so that it will only list the status of the dependencies and allow the build to continue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, armed with a full list of the dependencies missing from your internal artifact repository, you can create your issue ticket and get the approvals once and get back to actual work faster.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Custom Spring Boot Shell Banner</title>
      <link>http://coffeaelectronica.com/blog/2016/custom-shell-banner.html</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2016/custom-shell-banner.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I did a &lt;a href=&quot;http://dfw2gug.org/blog/2016/march-2016.html&quot;&gt;Groovy User Group talk&lt;/a&gt; recently related to my &lt;a href=&quot;http://coffeaelectronica.com/blog/2015/spring-shell.html&quot;&gt;Spring Boot Remote Shell&lt;/a&gt; blog post and while putting the talk together I stumbled across a bug in the integration between Spring Boot and the Crash shell (see &lt;a href=&quot;https:///github.com/spring-projects/spring-boot/issues/3988&quot;&gt;Spring-Boot-3988&lt;/a&gt;). The custom banner you can add to your Spring Boot application (as /resources/banner.txt) is not applied by default to your crash shell, so you get the boring Spring logo every time you startup the shell. I had worked with the Crash shell previously and I remember that the banner was customizable so I did a little digging and figured out how to code a work-around - I also added this information to the bug ticket; I considered contributing a pull request, but I am not sure how this would be coded into the default application framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The work-around is pretty simple and straight-forward if you have worked with the crash shell before. You use their method of customization and then have it pull in your Spring Boot custom banner. In your &lt;code&gt;/src/main/resources/commands&lt;/code&gt; directory you add a &lt;code&gt;login.groovy&lt;/code&gt; file, which Crash will load with every shell connection. The file allows the customization of the banner and the prompt. We can then load our spring banner from the classpath. The basic code is as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;login.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;welcome = { -&amp;gt;
    def hostName;
    try {
        hostName = java.net.InetAddress.getLocalHost().getHostName();
    } catch (java.net.UnknownHostException ignore) {
        hostName = &apos;localhost&apos;;
    }

    String banner = YourApplication.getResourceAsStream(&apos;/banner.txt&apos;).text

    return &quot;&quot;&quot;
${banner}
Logged into $hostName @ ${new Date()}
&quot;&quot;&quot;
}

prompt = { -&amp;gt;
    return &quot;% &quot;;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s a silly little thing to worry about, but sometimes it&amp;#8217;s the little things that make an application feel more like your own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have created a &lt;a href=&quot;https://github.com/spring-projects/spring-boot/pull/5453&quot;&gt;pull request&lt;/a&gt; in the spring-boot project to address this issue&amp;#8230;&amp;#8203; we&amp;#8217;ll see what happens.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Groovy Dependency Injection</title>
      <link>http://coffeaelectronica.com/blog/2016/groovy-di.html</link>
      <pubDate>Sat, 19 Mar 2016 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2016/groovy-di.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency Injection frameworks were a dime a dozen for a while - everybody had their own and probably a spare just in case. For the most part the field has settled down to a few big players, the &lt;a href=&quot;http://springframework.org&quot;&gt;Spring Framework&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/guice&quot;&gt;Google Guice&lt;/a&gt; are the only two that come to mind. While both of these have their pluses and minuses, they both have a certain level of overhead in libraries and understanding. Sometimes you want to throw something together quickly or you are in a scenario where you can&amp;#8217;t use one of these off the shelf libraries. I had to do this recently and while I still wanted to do something spring/guice-like, I could not use either of them, but I did have Groovy available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
I want to preface the further discussion here to say that I am not suggesting you stop using Spring or Guice or whatever you are using now in favor of rolling your own Groovy DI - this is purely a sharing of information about how you can if you ever need to.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s use as an example a batch application used to process some game scores and report on the min/max/average values. We will use a database (H2) just to show a little more configuration depth and I will use the &lt;code&gt;TextFileReader&lt;/code&gt; class from my &lt;a href=&quot;http://stehno.com/vanilla&quot;&gt;Vanilla&lt;/a&gt; project to keep things simple and focussed on DI rather than logic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, we need the heart of our DI framework, the configuration class. Let&amp;#8217;s call it &lt;code&gt;Config&lt;/code&gt;; we will also need a means of loading external configuration properties and this is where our first Groovy helper comes in, the &lt;code&gt;ConfigSlurper&lt;/code&gt;. The &lt;code&gt;ConfigSlurper&lt;/code&gt; does what it sounds like, it slurps up a configuration file with a Groovy-like syntax and converts it to a &lt;code&gt;ConfigObject&lt;/code&gt;. To start with, our &lt;code&gt;Config&lt;/code&gt; class looks something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class Config {
    private final ConfigObject config

    Config(final URL configLocation) {
        config = new ConfigSlurper().parse(configLocation)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The backing configuration file we will use, looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;inputFile = &apos;classpath:/scores.csv&apos;

datasource {
    url = &apos;jdbc:h2:mem:test&apos;
    user = &apos;sa&apos;
    pass = &apos;&apos;
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will live in a file named &lt;code&gt;application.cfg&lt;/code&gt; and as can be seen, it will store our externalized config properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, let&amp;#8217;s configure our &lt;code&gt;DataSource&lt;/code&gt;. Both Spring and Guice have a similar &quot;bean definition&quot; style, and what I am sure is based on those influences, I came up with something similar here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Memoized(protectedCacheSize = 1, maxCacheSize = 1)
DataSource dataSource() {
    JdbcConnectionPool.create(
        config.datasource.url,
        config.datasource.user,
        config.datasource.pass
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that I used the &lt;code&gt;@Memoized&lt;/code&gt; Groovy transformation annotation. This ensures that once the &quot;bean&quot; is created, the same instance is reused, and since I will only ever have one, I can limit the cache size and make sure it sicks around. As an interesting side-item, I created a collected annotation version of the memoized functionality and named it &lt;code&gt;@OneInstance&lt;/code&gt; since &lt;code&gt;@Singleton&lt;/code&gt; was alread taken.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Memoized(protectedCacheSize = 1, maxCacheSize = 1)
@AnnotationCollector
@interface OneInstance {}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It just keeps things a little cleaner:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@OneInstance DataSource dataSource() {
    JdbcConnectionPool.create(
        config.datasource.url,
        config.datasource.user,
        config.datasource.pass
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, notice how the &lt;code&gt;ConfigObject&lt;/code&gt; is used to retrieve the configuration property values, very clean and concise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we need to an input file to read and a &lt;code&gt;TextFileReader&lt;/code&gt; to read it so we will configure those as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@OneInstance Path inputFilePath() {
    if (config.inputFile.startsWith(&apos;classpath:&apos;)) {
        return Paths.get(Config.getResource(config.inputFile - &apos;classpath:&apos;).toURI())
    } else {
        return new File(config.inputFile).toPath()
    }
}

@OneInstance TextFileReader fileReader() {
    new TextFileReader(
        filePath: inputFilePath(),
        firstLine: 2,
        lineParser: new CommaSeparatedLineParser(
            (0): { v -&amp;gt; v as long },
            (2): { v -&amp;gt; v as int }
        )
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I added a little configuration sugar so that you can define the input file as a classpath file or an external file. The &lt;code&gt;TextFileReader&lt;/code&gt; is setup to convert the data csv file as three columns of data, an id (long), a username (string) and a score (int). The data file looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;# id,username,score
100,bhoser,4523
200,ripplehauer,235
300,jegenflur,576
400,bobknows,997&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing we need in the configuration is our service which will do that data management and the stat calculations, we&amp;#8217;ll call it the &lt;code&gt;StatsService&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@TypeChecked
class StatsService {

    private Sql sql

    StatsService(DataSource dataSource) {
        sql = new Sql(dataSource)
    }

    StatsService init() {
        sql.execute(&apos;create table scores (id bigint PRIMARY KEY, username VARCHAR(20) NOT NULL, score int NOT NULL )&apos;)
        this
    }

    void input(long id, String username, int score) {
        sql.executeUpdate(
            &apos;insert into scores (id,username,score) values (?,?,?)&apos;,
            id,
            username,
            score
        )
    }

    void report() {
        def row = sql.firstRow(
            &apos;&apos;&apos;
            select
                count(*) as score_count,
                avg(score) as average_score,
                min(score) as min_score,
                max(score) as max_score
            from scores
            &apos;&apos;&apos;
        )

        println &quot;Count  : ${row.score_count}&quot;
        println &quot;Min    : ${row.min_score}&quot;
        println &quot;Max    : ${row.max_score}&quot;
        println &quot;Average: ${row.average_score}&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m just going to dump it out there since it&amp;#8217;s mostly SQL logic to load the data into the table and then report the stats out to the standard output. We will wire this in like the others in &lt;code&gt;Config&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@OneInstance StatsService statsService() {
    new StatsService(dataSource()).init()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that, our configuration is done. Now we need to use it in an application, which we&amp;#8217;ll call &lt;code&gt;Application&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class Application {

    static void main(args){
        Config config = Config.fromClasspath(&apos;/application.cfg&apos;)

        StatsService stats = config.statsService()
        TextFileReader reader = config.fileReader()

        reader.eachLine { Object[] line-&amp;gt;
            stats.input(line[0], line[1], line[2])
        }

        stats.report()
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We instantiate a &lt;code&gt;Config&lt;/code&gt; object, call the bean accessor methods and use the beans to do the desired work. I added the &lt;code&gt;fromClasspath(String)&lt;/code&gt; helper method to simplify loading config from the classpath.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Like I said, this is no fulltime replacement for a real DI framework; however, when I was in a pinch, this came in pretty handy and worked really well. Also, it was easy to extend the &lt;code&gt;Config&lt;/code&gt; class in the testing source so that certain parts of the configuration could be overridden and mocked as needed during testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The demo code for this post is on &lt;a href=&quot;https://github.com/cjstehno/groovy-di&quot;&gt;GitHub: cjstehno/groovy-di&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Dependency Duplication Checking</title>
      <link>http://coffeaelectronica.com/blog/2016/dependency-duplication-check.html</link>
      <pubDate>Sat, 12 Mar 2016 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2016/dependency-duplication-check.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes it takes a critical mass threshold of running into the same issue repeatedly to really do something about it. How often, when working with a dependency manager like &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; or &lt;a href=&quot;http://maven.org&quot;&gt;Maven&lt;/a&gt;, have you run into some runtime issue only to find that it was caused by a build dependency that you had two (or more) different versions of at runtime? More often than you would like, I am sure. It can be a real surprise when you actually go digging into your aggregated dependency list only to find out you have more than one duplicate dependency just waiting to become a problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What do I mean by duplicate dependency? Basically, it&amp;#8217;s just what it sounds like. You have two dependencies with different versions. Something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;org.codehaus.groovy:groovy-all:2.4.4
org.codehaus.groovy:groovy-all:2.4.5&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most likely, your project defines one of them and some other dependency brought the other along for the ride. It is usually pretty easy to resolve these extra dependencies; in &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; you can run the &lt;code&gt;dependency&lt;/code&gt; task to see which dependency is bringing the extra library in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;./gradlew dependencies &amp;gt; deps.txt&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like to dump the output to a text file for easier viewing. Then, once you find the culprit, you can exclude the transitive dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;compile( &apos;com.somebody:coollib:2.3.5&apos; ){
    exclude group:&apos;org.codehaus.groovy&apos;, module:&apos;groovy-all&apos;
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can run the &lt;code&gt;dependency&lt;/code&gt; task again to ensure that you got of it. Generally, this is a safe procedure; however, sometimes you get into a situation where different libraries depend on different versions that have significant code differences - that&amp;#8217;s when the fun begins and it usually ends in having to up or down-grade various dependencies until you get a set that works and is clean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is the problem with having multiple versions of the same library in your project? Sometimes nothing, sometimes everything. The classloader will load whichever one is defined first in the classpath. If your project needs a class &lt;code&gt;Foo&lt;/code&gt; with a method &lt;code&gt;bar()&lt;/code&gt; and the version you expect to use has it but the previous version does not, bad things can happen at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok, now we know generally how to solve the multiple dependency problem, we&amp;#8217;re done right? Sure, for a month or so. Unless your project is done and no longer touched, new dependencies and duplicates will creep in over time. I did this duplicataion purge on a project at work a few months ago and just last week I took a peek at the aggregated dependency list and was truely not so shocked to see three duplicated libraries. One of which was probably the cause of some major performance issues we were facing. That&amp;#8217;s what inspired me to solve the problem at least to the point of letting you know when duplications creep in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I created the &lt;a href=&quot;https://github.com/cjstehno/dependency-checker&quot;&gt;dependency-checker&lt;/a&gt; Gradle plugin. It is available in the &lt;a href=&quot;https://plugins.gradle.org/plugin/com.stehno.gradle.dependency-checker&quot;&gt;Gradle Plugin Repository&lt;/a&gt;. At this point, it has one added task, &lt;code&gt;checkDependencies&lt;/code&gt; which, as the name suggests, searches through all the dependencies of the project to see if you have any duplicates within a configuration. If it finds duplicates, it will write them to the output log and fail the build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, you need to run the task for the checking to occur. I would like to get it to run with the default &lt;code&gt;check&lt;/code&gt; task, or &lt;code&gt;build&lt;/code&gt; task, but the code I had for that was not working - later version I guess. You can add that functionality into your own build by adding one or two lines to your &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;tasks.check.dependsOn checkDependencies
tasks.build.dependsOn checkDependencies&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These will make the appropriate tasks depend on the dependency check so that it will be run with every &lt;code&gt;build&lt;/code&gt; - that way you will know right away that you have a potential problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I did take a tour around Google and the plugin repository just to make sure there was nothing else providing this functionality - so hopefully I am not duplicating anyone else&amp;#8217;s work.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Vanilla TextFileReader/Writer</title>
      <link>http://coffeaelectronica.com/blog/2016/text-file-read-write.html</link>
      <pubDate>Sun, 6 Mar 2016 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2016/text-file-read-write.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Something I have found myself doing quite often over my whole career as a developer is reading and writing simple text file data. Whether it is a quick data dump or a data set to be loaded from a 3rd party, it is something I end up doing a lot and usually it is something coded mostly from scratch since, surprisingly enough, there are very few tools available for working with formatted text files. Sure, there are a few for CSV, but quite often I get a reqest to read or write a format that is kind of similar to CSV, but just enough different that it breaks a standard CSV parser for whatever reason. Recently, I decided to add some utility components to my &lt;a href=&quot;http://stehno.com/vanilla&quot;&gt;Vanilla project&lt;/a&gt; with the aim of making these readers and writers simpler to build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start off with the &lt;code&gt;com.stehno.vanilla.text.TextFileWriter&lt;/code&gt; and say we have a data source of &lt;code&gt;Person&lt;/code&gt; objects in our application that the business wants dumped out to a text file (so they can import it into some business tools that only ever seem capable of importing simple text files). In the application, the data structure looks something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class Person {
    String firstName
    String middleName
    String lastName
    int age
    float height
    float weight
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;with the &lt;code&gt;TextFileWriter&lt;/code&gt; you need to define a &lt;code&gt;LineFormatter&lt;/code&gt; which will be used to format the generated lines of text, one per object written. The &lt;code&gt;LineFormatter&lt;/code&gt; defines two methods, &lt;code&gt;String formatComment(String)&lt;/code&gt; for formatting a comment line, and &lt;code&gt;String formatLine(Object)&lt;/code&gt; for formatting a data line. A simple implementation is provided, the &lt;code&gt;CommaSeparatedLineFormatter&lt;/code&gt; will generate comment lines prefixed with a &lt;code&gt;#&lt;/code&gt; and will expect a &lt;code&gt;Collection&lt;/code&gt; object to be formatted and will format it as a CSV line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The available implementation will not work for our case, so we will need to define our own &lt;code&gt;LineFormatter&lt;/code&gt;. We want the formatted data lines to be of the form:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Last-Name,First-Name-Middle-Initial,Attrs
Smith,John Q,{age:42, height:5.9, weight:230.5}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yes, that&amp;#8217;s a bit of a convoluted format, but I have had to generate worse. Our &lt;code&gt;LineFormatter&lt;/code&gt; ends up being something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class PersonLineFormatter implements LineFormatter {

    @Override
    String formatComment(String text) {
        &quot;# $text&quot; &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    }

    @Override
    String formatLine(Object object) {
        Person person = object as Person
        &quot;${person.lastName},${person.firstName} ${person.middleName[0]},{age:${person.age}, height:${person.height}, weight:${person.weight}}&quot; &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We specify the comment as being prefixed by a &lt;code&gt;#&lt;/code&gt; symbol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write out the &lt;code&gt;Person&lt;/code&gt; object as the formatted &lt;code&gt;String&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We see that implementing the &lt;code&gt;LineFormatter&lt;/code&gt; keeps all the application specific logic isolated from the common operation of actually writing the file. Now we can use our formatter as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;TextFileWriter writer = new TextFileWriter(
    lineFormatter: new PersonLineFormatter(),
    filePath: new File(outputDir, &apos;people.txt&apos;)
)

writer.writeComment(&apos;Last-Name,First-Name-Middle-Initial,Attrs&apos;)

Collection&amp;lt;Person&amp;gt; people = peopleDao.listPeople()

people.each { Person p-&amp;gt;
    writer.write(p)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will write out the text file in the desired format with very little new coding required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, writing out text representations of application data is not really all that challenging, since you have access to the data you need and some control over the formatting of the objects to be represented. The real challenge is usually going in the other direction, when you are reading in a data file from some external source, this is where the &lt;code&gt;com.stehno.vanilla.text.TextFileReader&lt;/code&gt; becomes useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say you receive a request to import the data file we described above, maybe it was generated by the same business tools I mentioned earlier. We have something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Last-Name,First-Name-Middle-Initial,Attrs
Smith,John Q,{age:42, height:5.9, weight:230.5}
Jones,Robert M,{age:38, height:5.6, weight:240.0}
Mendez,Jose R,{age:25, height:6.1, weight:232.4}
Smalls,Jessica X,{age:30, height:5.5, weight:175.2}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;TextFileReader&lt;/code&gt; requires a &lt;code&gt;LineParser&lt;/code&gt; to parse the input file lines into objects; it defines three methods, &lt;code&gt;boolean parseable(String)&lt;/code&gt; which is used to determine whether or not the line should be parsed, &lt;code&gt;Object[] parseLine(String)&lt;/code&gt; which is used to parse the line of text, and &lt;code&gt;Object parseItem(Object, int)&lt;/code&gt; which is used to parse an individual element of the comma-separated line. There is a default implementation provided, the &lt;code&gt;CommaSeparatedLineParser&lt;/code&gt; will parse simple comma-separated lines of text into arrays of Objects based on configured item converters; however, this will not work in the case of our file since there are commas in the data items themselves (the JSON-like format of the last element). So we need to implement one. Our &lt;code&gt;LineParser&lt;/code&gt; will look something like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;class PersonLineParser implements LineParser {

    boolean parsable(String line){
        line &amp;amp;&amp;amp; !line.startsWith(HASH) &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
    }

    Object[] parseLine(String line){ &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;
        int idx = 0
        def elements = line.split(&apos;,&apos;).collect { parseItem(it, idx++) }

        [
            new Person(
                firstName:elements[1][0],
                middleName:elements[1][1],
                lastName:elements[0],
                age:elements[2],
                height:elements[3],
                weight:elements[4],
            )
        ] as Object[]
    }

    // Smith,John Q,{age:42, height:5.9, weight:230.5}
    // 0    ,1     ,2      ,3          ,4
    Object parseItem(Object item, int index){ &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;
        switch(index){
            case 0:
                return item as String
            case 1:
                return item.split(&apos; &apos;)
            case 2:
                return item.split(&apos;:&apos;)[1] as int
            case 3:
                return item.split(&apos;:&apos;)[1] as float
            case 4:
                return item.split(&apos;:&apos;)[1][0..-2] as float
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We want to ignore blank lines or lines that start with a &lt;code&gt;#&lt;/code&gt; symbol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We extract the line items and build the &lt;code&gt;Person&lt;/code&gt; object&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We convert the line items to our desired types&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not pretty, but it does the job and keeps all the line parsing logic out of the main file loading functionality. Our code to read in the file would look somethign like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;setup:
TextFileReader reader = new TextFileReader(
    filePath: new File(inputDir, &apos;people.txt&apos;),
    lineParser: new PersonLineParser(),
    firstLine: 2 &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;
)

when:
def people = []

reader.eachLine { Object[] data -&amp;gt;
    lines &amp;lt;&amp;lt; data[0]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We skip the first line, since it will always be the header&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The provided implementations for both the &lt;code&gt;LineFormatter&lt;/code&gt; and &lt;code&gt;LineParser&lt;/code&gt; will not account for every scenario, but hopefully they will hit some of them and provide a guideline for implementing your own. If nothing else, these components help to streamline the readign and writing of formatted text data so that you can get it done and focus on other more challenging development tasks.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Spring Boot Remote Shell</title>
      <link>http://coffeaelectronica.com/blog/2015/spring-shell.html</link>
      <pubDate>Sat, 7 Nov 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/spring-shell.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; comes with a ton of useful features that you can enable as needed, and in general the documentation is pretty good; however, sometimes it feels like they gloss over a feature that eventually realize is much more useful than it originally seemed. The remote shell support is one of those features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start off with a simple Spring Boot project based on the example provided with the Boot documentation. Our &lt;code&gt;build.gradle&lt;/code&gt;
file is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;build.gradle&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath &apos;org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE&apos;
    }
}

version = &quot;0.0.1&quot;
group = &quot;com.stehno&quot;

apply plugin: &apos;groovy&apos;
apply plugin: &apos;spring-boot&apos;

sourceCompatibility = 8
targetCompatibility = 8

mainClassName = &apos;com.stehno.SampleController&apos;

repositories {
    jcenter()
}

dependencies {
    compile &quot;org.codehaus.groovy:groovy-all:2.4.5&quot;

    compile &apos;org.springframework.boot:spring-boot-starter-web&apos;
}

task wrapper(type: Wrapper) {
    gradleVersion = &quot;2.8&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, our simple controller and starter class looks like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;SampleController.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Controller
@EnableAutoConfiguration
public class SampleController {

    @RequestMapping(&apos;/&apos;)
    @ResponseBody
    String home() {
        &apos;Hello World!&apos;
    }

    static void main(args) throws Exception {
        SpringApplication.run(SampleController, args)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run it using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;./gradlew clean build bootRun&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and you get your run of the mill &quot;Hello world&quot; application. For our demonstration purposes, we need something a bit more
interesting. Let&amp;#8217;s make the controller something like a &quot;Message of the Day&quot; server which will return a fixed configured
message. Remove the &lt;code&gt;hello&lt;/code&gt; controller action and add in the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String message = &apos;Message for you, sir!&apos;

@RequestMapping(&apos;/&apos;) @ResponseBody
String message() {
    message
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which will return the static message &quot;Message for you, sir!&quot; for every request. Running the application now, will still
be pretty uninteresting, but wait, it gets better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, we would like to have the ability to change the message as needed without rebuilding or even restarting the server.
There are handful of ways to do this; however, I&amp;#8217;m going to discuss one of the seemingly less used options&amp;#8230;&amp;#8203; The
&lt;a href=&quot;http://www.crashub.org/&quot;&gt;CRaSH Shell&lt;/a&gt; integration provided in Spring Boot
(&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-remote-shell&quot;&gt;43. Production Ready Remote Shell&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add the remote shell support in Spring Boot, you add the following line to your &lt;code&gt;dependencies&lt;/code&gt; block in your &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;compile &apos;org.springframework.boot:spring-boot-starter-remote-shell&apos;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, when you run the application, you will see an extra line in the server log:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Using default password for shell access: 44b3556b-ff9f-4f82-9f1b-54a16da471d5&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since no password was configured, Boot has provided a randomly generated one for you (obviously you would configure this in a real system). You now have an SSH connection available to your application. Using the ssh client of your choice you can login using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;ssh -p 2000 user@localhost&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which will ask you for the provided password. Once you have logged in you are connected to a secure shell running inside your application. You can run &lt;code&gt;help&lt;/code&gt; at the prompt to get a list of available commands, which will look something like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; help
Try one of these commands with the -h or --help switch:

NAME       DESCRIPTION
autoconfig Display auto configuration report from ApplicationContext
beans      Display beans in ApplicationContext
cron       manages the cron plugin
dashboard  a monitoring dashboard
egrep      search file(s) for lines that match a pattern
endpoint   Invoke actuator endpoints
env        display the term env
filter     a filter for a stream of map
java       various java language commands
jmx        Java Management Extensions
jul        java.util.logging commands
jvm        JVM informations
less       opposite of more
mail       interact with emails
man        format and display the on-line manual pages
metrics    Display metrics provided by Spring Boot
shell      shell related command
sleep      sleep for some time
sort       sort a map
system     vm system properties commands
thread     JVM thread commands
help       provides basic help
repl       list the repl or change the current repl&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, you get quite a bit of functionality right out of the box. I will leave the discussion of each of the provided commands to another post. What we are interested at this point is adding our own command to update the message displayed by our controller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The really interesting part of the shell integration is the fact that you can extend it with your own commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a new directory &lt;code&gt;src/main/resources/commands&lt;/code&gt; which is where your extended commands will live, and then add a simple starting point class for our command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;message.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-goovy&quot; data-lang=&quot;goovy&quot;&gt;package commands

import org.crsh.cli.Usage
import org.crsh.cli.Command
import org.crsh.command.InvocationContext

@Usage(&apos;Interactions with the message of the day.&apos;)
class message {

    @Usage(&apos;View the current message of the day.&apos;)
    @Command
    def view(InvocationContext context) {
        return &apos;Hello&apos;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@Usage&lt;/code&gt; annotations provide the help/usage documentation for the command, while the &lt;code&gt;@Command&lt;/code&gt; annotation denotes that the &lt;code&gt;view&lt;/code&gt; method is a command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, when you run the application and list the shell commands, you will see our new command added to the list:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;message    Interactions with the message of the day.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you run the command as &lt;code&gt;message view&lt;/code&gt; you will get the static &quot;Hello&quot; message returned to you on the shell console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Okay, we need the ability to view our current message of the day. The &lt;code&gt;InvocationContext&lt;/code&gt; has &lt;code&gt;attributes&lt;/code&gt; which are propulated by Spring, one of which is &lt;code&gt;spring.beanfactory&lt;/code&gt; a reference to the Spring &lt;code&gt;BeanFactory&lt;/code&gt; for your application. We can access the current message of the day by replacing the content of the &lt;code&gt;view&lt;/code&gt; method with the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;BeanFactory beans = context.attributes[&apos;spring.beanfactory&apos;]
return beans.getBean(SampleController).message&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where we find our controller bean and simply read the &lt;code&gt;message&lt;/code&gt; property. Running the application and the shell command now, yield:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Message for you, sir!&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While that is pretty cool, we are actually here to modify the message, not just view it and this is just as easy. Add a new command named &lt;code&gt;update&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Usage(&apos;Update the current message of the day.&apos;)
@Command
def update(
    InvocationContext context,
    @Usage(&apos;The new message&apos;) @Argument String message
) {
    BeanFactory beans = context.attributes[&apos;spring.beanfactory&apos;]
    beans.getBean(SampleController).message = message
    return &quot;Message updated to: $message&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, rebuild/restart the server and start up the shell. If you execute:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;message update &quot;This is cool!&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will update the configured message, which you can verify using the &lt;code&gt;message view&lt;/code&gt; command, or better yet, you can hit your server and see that the returned message has been updated&amp;#8230;&amp;#8203; no restart required. Indeed, this is cool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can find a lot more information about writing your own commands in the CRaSH documentation for &lt;a href=&quot;http://www.crashub.org/1.3/reference.html#developping_commands&quot;&gt;Developing Commands&lt;/a&gt;. There is a lot of functionality that I am not covering here.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, we are functionally complete. We can view and update the message of the day without requiring a restart of the server. But, there are still some added goodies provided by the shell, especially around shell UI support - yes, it&amp;#8217;s text, but it can still be pretty and one of the ways CRaSH allows you to pretty things up is with colors and formatting via styles and the &lt;code&gt;UIBuilder&lt;/code&gt; (which is sadly under-documented).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s add another property to our controller to make things more interesting. Just add a &lt;code&gt;Date lastUpdated = new Date()&lt;/code&gt; field. This will give us two properties to play with. Update the &lt;code&gt;view&lt;/code&gt; action as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;SampleController controller = context.attributes[&apos;spring.beanfactory&apos;].getBean(SampleController)

String message = controller.message
String date = controller.lastUpdated.format(&apos;MM/dd/yyyy HH:mm&apos;)

out.print new UIBuilder().table(separator: dashed, overflow: Overflow.HIDDEN, rightCellPadding: 1) {
    header(decoration: bold, foreground: black, background: white) {
        label(&apos;Date&apos;)
        label(&apos;Message&apos;)
    }

    row {
        label(date, foreground: green)
        label(message, foreground: yellow)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We still retrieve the instance of the controller as before; however, now our output rendering is a bit more complicated, though still pretty understandable. We are creating a new &lt;code&gt;UIBuilder&lt;/code&gt; for a &lt;code&gt;table&lt;/code&gt; and then applying the &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;row&lt;/code&gt; contents to it. It&amp;#8217;s actually a very powerful construct, I just had to dig around in the project source code to actually figure out how to make it work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will also need to update the &lt;code&gt;update&lt;/code&gt; command to set the new date field:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;SampleController controller = context.attributes[&apos;spring.beanfactory&apos;].getBean(SampleController)
controller.message = message
controller.lastUpdated = new Date()

return &quot;Message updated to: $message&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have that built and running you can run the &lt;code&gt;message view&lt;/code&gt; command and get a much nicer multi-colored table output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;gt; message view
Date             Message
-------------------------------------------------------------
11/05/2015 10:37 And now for something completely different.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which puts wraps up what we are trying to do here and even puts a bow on it. You can find more information on the remote shell configuration options in the Spring Boot documentation in &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#common-application-properties&quot;&gt;Appendix A: Common Application Properties&lt;/a&gt;. This is where you can configure the port, change the authentication settings, and even disable some of the default provided commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The remote shell support is one of the more interesting, but underused features in Spring Boot. Before Spring Boot was around, I was working on a project where we did a similar integration of CRaSH shell with a Spring-based server project and it provided a wealth of interesting and useful opportunities to dig into our running system and observe or make changes. Very powerful.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Multi-Collection Pagination</title>
      <link>http://coffeaelectronica.com/blog/2015/multi-pagination.html</link>
      <pubDate>Sat, 31 Oct 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/multi-pagination.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few years ago, I was working on a project where we had collections of data spread across multiple rows of data&amp;#8230;&amp;#8203; and then we had to provide a paginated view of that data. This research was the result of those efforts. The discussion here is a bit more rigorous than I usually go into, so if you just want the implementation code jump to the bottom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider that you have a data set representing a collection of collections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[
    [ A0, A1, A2, A3, A4, A5 ],
    [ B0, B1, B2, B3, B4, B5 ],
    [ C0, C1, C2, C3, C4, C5 ]
]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to retrieve the data in a paginated fashion where the subset (page) with index &lt;code&gt;P&lt;/code&gt; and subset size (page size) &lt;code&gt;S&lt;/code&gt; is used to retrieve only the desired elements in the most efficient means possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider also that the data sets may be very large and that the internal collections may not be directly associated with the enclosing collection (e.g. two different databases).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also consider that the subsets may cross collection boundaries or contain fewer than the desired number of elements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, requests for data subsets will be more likely discrete events – one subset per request, rather than iterating over all results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a page size of four (&lt;code&gt;S = 4&lt;/code&gt;) you would have the following five pages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;P0 : [ A0, A1, A2, A3 ]
P1 : [ A4, A5, B0, B1 ]
P2 : [ B2, B3, B4, B5 ]
P3 : [ C0, C1, C2, C3 ]
P4 : [ C4, C5 ]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_computations&quot;&gt;Computations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The overall collection is traversed to determine how many elements are contained within each sub-collection; this may be pre-computed or done at runtime. Three counts are calculated or derived for each sub-collection:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Count (&lt;code&gt;CI&lt;/code&gt;) - the number of elements in the sub-collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Count-before (&lt;code&gt;CB&lt;/code&gt;) - the total count of all sub-collection elements counted before this collection, but not including this collection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Count-with (&lt;code&gt;CW&lt;/code&gt;) - the total count of all sub-collection elements counted before and including this collection.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our example data set we would have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[
    { CI:6, CB:0, CW:6 [ A0, A1, A2, A3, A4, A5 ] },
    { CI:6, CB:6, CW:12 [ B0, B1, B2, B3, B4, B5 ] },
    { CI:6, CB:12, CW:18 [ C0, C1, C2, C3, C4, C5 ] }
]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This allows for a simple means of selecting only the sub-collections we are interested in; those containing the desired elements based on the starting and ending indices for the subset (&lt;code&gt;START&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; respectively). These indices can easily be calculated as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;START = P * S

END = START + S – 1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The indices referenced here are for the overall collection, not the individual sub-collections.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The desired elements will reside in sub-collections whose inclusive count (&lt;code&gt;CW&lt;/code&gt;) is greater than the starting index and whose preceding count (&lt;code&gt;CB&lt;/code&gt;) is less than or equal to the ending index, or:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;CW &amp;gt; START and CB ≤ END&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the case of selecting the second subset of data (&lt;code&gt;P = 1&lt;/code&gt;) with a page size of four (&lt;code&gt;S = 4&lt;/code&gt;) we would have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;START = 4

END = 7&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will select the first two or the three sub-collections as &quot;interesting&quot; sub-collections containing at least some of our desired elements, namely:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;{ CI:6, CB:0, CW:6 [ A0, A1, A2, A3, A4, A5 ] },
{ CI:6, CB:6, CW:12 [ B0, B1, B2, B3, B4, B5 ] }&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What remains is to gather from these sub-collections (call them &lt;code&gt;SC[0]&lt;/code&gt;, &lt;code&gt;SC[1]&lt;/code&gt;) the desired number of elements (&lt;code&gt;S&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To achieve this, a local starting and ending index must be calculated while iterating through the &quot;interesting&quot; sub-collections to gather the elements until either the desired amount is obtained (&lt;code&gt;S&lt;/code&gt;) or there are no more elements available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Calculate the initial local starting index (&lt;code&gt;LOCAL_START&lt;/code&gt;) by subtracting the non-inclusive preceding count value of the first selected collection (&lt;code&gt;SC[0]&lt;/code&gt;) from the overall starting index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterate the selected collections (in order) until the desired amount has been gathered&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is more clearly represented in pseudo code as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;LOCAL_START = START – SC[0].CB
REMAINING = S

for-each sc in SC while REMAINING &amp;gt; 0

    if( REMAINING &amp;lt; (sc.size() - LOCAL_START) )
        LOCAL_END = LOCAL_START + REMAINING - 1
    else
        LOCAL_END = sc.size()-1

    FOUND = sc.sub( LOCAL_START, LOCAL_END )
    G.addAll( FOUND )
    REMAINING = REMAINING – FOUND.size()
    LOCAL_START = 0

end&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where the gathered collection of elements (&lt;code&gt;G&lt;/code&gt;) is your resulting data set containing the elements for the specified data page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It must be stated that the ordering of the overall collection and the sub-collections must be consistent across multiple data requests for this procedure to work properly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ok now, enough discussion. Let&amp;#8217;s see what this looks like with some real Groovy code. First, we need our collections of collections data to work with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;def data = [
    [ &apos;A0&apos;, &apos;A1&apos;, &apos;A2&apos;, &apos;A3&apos;, &apos;A4&apos;, &apos;A5&apos; ],
    [ &apos;B0&apos;, &apos;B1&apos;, &apos;B2&apos;, &apos;B3&apos;, &apos;B4&apos;, &apos;B5&apos; ],
    [ &apos;C0&apos;, &apos;C1&apos;, &apos;C2&apos;, &apos;C3&apos;, &apos;C4&apos;, &apos;C5&apos; ]
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we need to implement the algorithm in Groovy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;int page = 1
int pageSize = 4

// pre-computation

int before = 0
def prepared = data.collect {d -&amp;gt;
    def result = [
        countIn: d.size(),
        countBefore: before,
        countWith: before + d.size(),
        values:d
    ]

    before += d.size()

    return result
}

// main computation

def localStart = (page * pageSize ) - prepared[0].countBefore
def remaining = pageSize

def gathered = []

prepared.each { sc-&amp;gt;
    if( remaining ){
        def localEnd
        if( remaining &amp;lt; (sc.values.size() - localStart) ){
            localEnd = localStart + remaining - 1
        } else {
            localEnd = sc.values.size() - 1
        }

        def found = sc.values[localStart..localEnd]
        gathered.addAll(found)

        remaining -= found.size()
        localStart = 0
    }
}

println &quot;P$page : $gathered&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which yields&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;P1 : [A4, A5, B0, B1]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and if you look all the way back up to the beginning of the article, you see that this is the expected data set for page 1 of the example data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not a scenario I have run into often, but it was a bit of a tricky one to unravel. The pre-computation steps ended up being the key to keeping it simple and stable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Spring ViewResolver for &quot;GSP&quot;</title>
      <link>http://coffeaelectronica.com/blog/2015/gsp-view-resolver.html</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/gsp-view-resolver.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently, while working on a &lt;a href=&quot;http://springframework.org&quot;&gt;Spring MVC&lt;/a&gt; application, I was considering which template framework to use for my views and I was surprised to realize that there was no implementation using the Groovy &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/gapi/groovy/text/GStringTemplateEngine.html&quot;&gt;GStringTemplateEngine&lt;/a&gt;. There is one for the Groovy Markup Templates; however, in my opinion, that format seems pretty terrible - they are interesting in themselves, but they seem like they would be a
nightmare to maintain, and your designers would kill you if they ever had to work with them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This obvious gap in functionality surprised me and even a quick Google search did not turn up any implementations, though there was some documentation around using the Grails GSP framework in a standard Spring Boot application, but this seemed like overkill for how simple the templates can be. Generally, implementing extensions to the Spring Framework is pretty simple so I decided to give it a quick try&amp;#8230;&amp;#8203; and I was right, it was not hard at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ViewResolver&lt;/code&gt; implementation I came up with is an extension of the &lt;code&gt;AbstractTemplateViewResolver&lt;/code&gt; with one main method of interest, the &lt;code&gt;buildView(String)&lt;/code&gt; method
which contains the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;protected AbstractUrlBasedView buildView(final String viewName) throws Exception {
    GroovyTemplateView view = super.buildView(viewName) as GroovyTemplateView &lt;b class=&quot;conum&quot;&gt;(1)&lt;/b&gt;

    URL templateUrl = applicationContext.getResource(view.url).getURL() &lt;b class=&quot;conum&quot;&gt;(2)&lt;/b&gt;

    view.template = templateEngine.createTemplate(
        applicationContext.getResource(view.url).getURL()
    ) &lt;b class=&quot;conum&quot;&gt;(3)&lt;/b&gt;

    view.encoding = defaultEncoding

    return view
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Call the super class to create a configured instance of the &lt;code&gt;View&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load the template from the &lt;code&gt;ApplicationContext&lt;/code&gt; using the &lt;code&gt;url&lt;/code&gt; property of the &lt;code&gt;View&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create the &lt;code&gt;Template&lt;/code&gt; from the contents of the URL&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This method basically just uses the view resolver framework to find the template file
and load it with the &lt;code&gt;GSTringTemplateEngine&lt;/code&gt; - the framework takes care of the
caching and model attribute management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;View&lt;/code&gt; implementation is also quite simple; it is an extension of the &lt;code&gt;AbstractTemplateview&lt;/code&gt;, with the only implmented method being the &lt;code&gt;renderMergedTemplateModel()&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;protected void renderMergedTemplateModel(
    Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest req, HttpServletResponse res
) throws Exception {
    res.contentType = contentType
    res.characterEncoding = encoding

    res.writer.withPrintWriter { PrintWriter out -&amp;gt;
        out.write(template.make(model) as String)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Template&lt;/code&gt; content is rendered using the configured model data and then written to the &lt;code&gt;PrintWriter&lt;/code&gt; from the &lt;code&gt;HttpServletResponse&lt;/code&gt;, which sends it to the client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lastly, you need to configure the resolver in your application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;@Bean ViewResolver viewResolver() {
    new GroovyTemplateViewResolver(
        contentType: &apos;text/html&apos;,
        cache: true,
        prefix: &apos;/WEB-INF/gsp/&apos;,
        suffix: &apos;.gsp&apos;
    )
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One thing to notice here is all the functionality you get by default from the Spring &lt;code&gt;ViewResolver&lt;/code&gt; framework for very little added code on your part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another thing to note is that &quot;GSP&quot; file in this case is not really a true GSP; however, you have all the functionality provided by the &lt;code&gt;GStringTemplateEngine&lt;/code&gt;, which is quite similar. An example template could be something like:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;app-listing&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;hello.gsp&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-gsp&quot; data-lang=&quot;gsp&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        [${new Date()}] Hello, ${name ?: &apos;stranger&apos;}

        &amp;lt;% if(personService.seen(name)){ %&amp;gt;
            You have been here ${personService.visits(name)} times.
        &amp;lt;% } %&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s definitely a nice clean template language if you are already coding everything else in Groovy anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will be adding a spring helper library to my vanilla project; the &quot;vanilla-spring&quot;
project will have the final version of this code, though it should be similar to
what is dicussed here. The full source for the code discussed above is provided below for reference until the actual code is released.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;app-listing&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;GroovyTemplateViewResolver.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package com.stehno.vanilla.spring.view

// imports removed...

@TypeChecked
class GroovyTemplateViewResolver extends AbstractTemplateViewResolver {

    /**
     * The default character encoding to be used by the template views. Defaults to UTF-8 if not specified.
     */
    String defaultEncoding = StandardCharsets.UTF_8.name()

    private final TemplateEngine templateEngine = new GStringTemplateEngine()

    GroovyTemplateViewResolver() {
        viewClass = requiredViewClass()
    }

    @Override
    protected Class&amp;lt;?&amp;gt; requiredViewClass() {
        GroovyTemplateView
    }

    @Override
    protected AbstractUrlBasedView buildView(final String viewName) throws Exception {
        GroovyTemplateView view = super.buildView(viewName) as GroovyTemplateView

        view.template = templateEngine.createTemplate(
            applicationContext.getResource(view.url).getURL()
        )

        view.encoding = defaultEncoding
        return view
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;app-listing&quot; class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;GroovyTemplateView.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;package com.stehno.vanilla.spring.view

// imports removed...

@TypeChecked
class GroovyTemplateView extends AbstractTemplateView {

    Template template
    String encoding

    @Override
    protected void renderMergedTemplateModel(
        Map&amp;lt;String, Object&amp;gt; model, HttpServletRequest req, HttpServletResponse res
    ) throws Exception {
        res.contentType = contentType
        res.characterEncoding = encoding

        res.writer.withPrintWriter { PrintWriter out -&amp;gt;
            out.write(template.make(model) as String)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>Copying Data with ObjectMappers</title>
      <link>http://coffeaelectronica.com/blog/2015/object-mappers.html</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/object-mappers.html</guid>
      <description>
      &lt;p&gt;When working with legacy codebases, I tend to run into a lot of scenarios where I am copying data objects from one format to another while an API is in transition or due to some data model mismatch. &lt;/p&gt;&lt;p&gt;Suppose we have an object in one system - I am using Groovy because it keeps things simple, but it could be Java as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class Person {
    long id
    String firstName
    String lastName
    LocalDate birthDate
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then you are working with a legacy (or external) API which provides similar data in the form of:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class Individual {
    long id
    String givenName
    String familyName
    String birthDate
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and now you have to integrate the conversion from the old/external format (&lt;code&gt;Individual&lt;/code&gt;) to your internal format (&lt;code&gt;Person&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;You can write the code in Java using the &lt;code&gt;Transformer&lt;/code&gt; interface from &lt;a href=&quot;http://commons.apache.org/proper/commons-collections/&quot;&gt;Apache Commons Collections&lt;/a&gt;, which ends up with something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;public class IndividualToPerson implements Transformer&amp;lt;Individual,Person&amp;gt;{
    
    public Person transform(Individual indiv){
        Person person = new Person();
        person.setId( indiv.getId() );
        person.setFirstName( indiv.getGivenName() );
        person.setLastName( indiv.getFamilyName() );
        person.setBirthDate( LocalDate.parse(indiv.getBirthDate()) );
        return person;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I wrote a blog post about this many years ago (&lt;a href=&quot;http://coffeaelectronica.com/blog/2005/commons-collections-transformers.html&quot;&gt;Commons Collections - Transformers&lt;/a&gt;); however, if you have more than a handful of these conversions, you can end up handwriting a lot of the same code over and over, which can be error prone and time consuming. Even switching the code above to full-on Groovy does not really save you much, though it is better:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;class IndividualToPerson implements Transformer&amp;lt;Individual,Person&amp;gt;{
    
    Person transform(Individual indiv){
        new Person(
            id: indiv.id,
            firstName: indiv.givenName,
            lastName: indiv.familyName,
            birthDate: LocalDate.parse(indiv.birthDate)
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What I came up with was a simple mapping DSL which allows for straight-forward definitions of the property mappings in the simplest code possible:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;ObjectMapper inividualToPerson = mapper {
    map &amp;#39;id&amp;#39;
    map &amp;#39;givenName&amp;#39; into &amp;#39;firstName&amp;#39;
    map &amp;#39;familyName&amp;#39; into &amp;#39;lastName&amp;#39;
    map &amp;#39;birthDate&amp;#39; using { d-&amp;gt; LocaleDate.parse(d) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which builds an instance of &lt;code&gt;RuntimeObjectMapper&lt;/code&gt; which is stateless and thread-safe. The &lt;code&gt;ObjectMapper&lt;/code&gt; interface has a method &lt;code&gt;copy(Object source, Object dest)&lt;/code&gt; which will copy the properties from the source object to the destination object. Your transformation code ends up something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def people = individuals.collect { indiv-&amp;gt;
    Person person = new Person()
    individualToPerson.copy(indiv, person)
    person
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or we can use the &lt;code&gt;create(Object, Class)&lt;/code&gt; method as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def people = individuals.collect { indiv-&amp;gt;
    individualToPerson.create(indiv, Person)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which is just a shortcut method for the same code, as long as you are able to create your destination object with a default constructor, which we are able to do.&lt;/p&gt;&lt;p&gt;There is also a third, slightly more useful option in this specific collector case:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def people = individuals.collect( individualToPerson.collector(Person) )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;collector(Class)&lt;/code&gt; method returns a &lt;code&gt;Closure&lt;/code&gt; that is also a shortcut to the conversion code shown previously. It&apos;s mostly syntactic sugar, but it&apos;s nice and clean to work with.&lt;/p&gt;&lt;p&gt;Notice the &apos;using&apos; method - this allows for conversion of the source data before it is set into the destination object. This is one of the more powerful features of the DSL. Consider the case where your &lt;code&gt;Person&lt;/code&gt; class has an embedded &lt;code&gt;Name&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class Person {
    long id
    Name name
    LocalDate birthDate
}

@Canonical
class Name {
    String first
    String last
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we want to map the name properties into this new embedded object rather than into the main object. The mapper DSL can do this too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;ObjectMapper individualToPerson = mapper {
    map &amp;#39;id&amp;#39;
    map &amp;#39;givenName&amp;#39; into &amp;#39;name&amp;#39; using { p,src-&amp;gt; 
        new Name(src.givenName, src.familyName)
    }
    map &amp;#39;birthDate&amp;#39; using { d-&amp;gt; LocaleDate.parse(d) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s a bit odd since you are mapping two properties into one property, but it gets the job done. The conversion closure will accept up to three parameters (or none) - the first being the source property being converted, the second is the source object instance and the third is the destination object instance. The one thing to keep in mind when using the two and three parameter versions is that the order of your property mapping definitions may begin to matter, especially if you are working with the destination object.&lt;/p&gt;&lt;p&gt;So far, we have been talking about runtime-based mappers that take your configuration and resolve your property mappings at runtime. It&apos;s reasonably efficient since it doesn&apos;t do all that much, but consider the case where you have a million objects to transform; those extra property mapping operations start to add up - that&apos;s when you go back to hand-coding it unless there is a way to build the mappers at compile time rather than run time...&lt;/p&gt;&lt;p&gt;There is. This was something I have really wanted to get a hold of for this project and others; the ability to use a DSL to control the AST transformations used in code generation... or, using the mapper DSL in an annotation to create the mapper class at compile time so that it is closer to what you would have hand-coded yourself (and also becomes a bit more performant since there are fewer operations being executed at runtime).&lt;/p&gt;&lt;p&gt;Using the static approach is simple, you just write the DSL code in the &lt;code&gt;@Mapper&lt;/code&gt; annotation on a method, property or field:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class Mappers {

    @Mapper({
        map &amp;#39;id&amp;#39;
        map &amp;#39;givenName&amp;#39; into &amp;#39;firstName&amp;#39;
        map &amp;#39;familyName&amp;#39; into &amp;#39;lastName&amp;#39;
        map &amp;#39;birthDate&amp;#39; using { d-&amp;gt; LocaleDate.parse(d) }    
    })
    static final ObjectMapper personMapper(){}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the code compiles, a new implementation of &lt;code&gt;ObjectMapper&lt;/code&gt; will be created and installed as the return value for the &lt;code&gt;personMapper()&lt;/code&gt; method. The static version of the DSL has all of the same functionality of the dynamic version except that it does not support using &lt;code&gt;ObjectMappers&lt;/code&gt; direction in the &lt;code&gt;using&lt;/code&gt; command; however, a workaround for this is to use a closure.&lt;/p&gt;&lt;p&gt;Object property mapping/copying is one of those things you don&apos;t run into all that often, but it is useful to have a simple alternative to hand-writing the code for it. Both the dynamic and static version of the object mappers discussed here are available in my &lt;a href=&quot;http://stehno.com/vanilla&quot;&gt;Vanilla&lt;/a&gt; library.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Lazy Immutables</title>
      <link>http://coffeaelectronica.com/blog/2015/lazy-immutable.html</link>
      <pubDate>Wed, 23 Sep 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/lazy-immutable.html</guid>
      <description>
      &lt;p&gt;A co-worker and I were discussing the Groovy &lt;code&gt;@Immutable&lt;/code&gt; annotation recently where I was thinking it would be useful if it allowed you to work on the object as a mutable object until you were ready to make it permanent, and then you could &quot;seal&quot; it and make it immutable. This would give you a bit more freedom in how the object is configured - sometimes the standard immutable approach can be overly restrictive.&lt;/p&gt;&lt;p&gt;Consider the case of of an immutable &lt;code&gt;Person&lt;/code&gt; object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Immutable
class Person {
    String firstName
    String middleName
    String lastName
    int age
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With &lt;code&gt;@Immutable&lt;/code&gt; you have to create the object all at once:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def person = new Person(&amp;#39;Chris&amp;#39;,&amp;#39;J&amp;#39;,&amp;#39;Stehno&amp;#39;,42)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then you&apos;re stuck with it. You can create a copy of it with one or more different properties using the &lt;code&gt;copyWith&lt;/code&gt; method, but you need to specify the &lt;code&gt;copyWith=true&lt;/code&gt; in the annotation itself, then you can do something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;Person otherPerson = person.copyWith(firstName:&amp;#39;Bob&amp;#39;, age:50)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&apos;m not sure who &quot;Bob J Stehno&quot; is though. With more complicated immutables, this all at once requirement can be annoying. This is where the &lt;code&gt;@LazyImmutable&lt;/code&gt; annotation comes in (part of my &lt;a href=&quot;http://stehno.com/vanilla/&quot;&gt;Vanilla - Core library&lt;/a&gt;). With a similar &lt;code&gt;Person&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@LazyImmutable @Canonical
class Person {
    String firstName
    String middleName
    String lastName
    int age
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;using the new annotation, you can create and populate the instance over time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def person = new Person(&amp;#39;Chris&amp;#39;)
person.middleName = &amp;#39;J&amp;#39;
person.lastName = &amp;#39;Stehno&amp;#39;
person.age = 42
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the &lt;code&gt;@LazyImmutable&lt;/code&gt; annotation does not apply any other transforms (as the standard &lt;code&gt;@Immutable&lt;/code&gt; does). It&apos;s a standard Groovy object, but with an added method: the &lt;code&gt;asImmutable()&lt;/code&gt; method is injected via AST Transformation. This method will take the current state of the object and create an immutable version of the object - this does imply that the properties of lazy immutable objects should follow the same rules as those of the standard immutable so that the conversion is determinate. For our example case:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;Person immutablePerson = person.asImmutable()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The created object is the same immutable object as would have been created by using the &lt;code&gt;@Immutable&lt;/code&gt; annotation and it is generated as an extension of the class you created so that it&apos;s type is still valid. The immutable version of the object also has a useful added method, the &lt;code&gt;asMutable()&lt;/code&gt; method is used to create a copy of the original mutable object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;Person otherMutable = immutablePerson.asMutable()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&apos;s a fairly simple helper annotation, but it just fills one of those little functional gaps that you run into every now and then. Maybe someone else will find it useful.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Baking Your Blog with JBake, Groovy and GitHub</title>
      <link>http://coffeaelectronica.com/blog/2015/baking-with-groovy-and-github.html</link>
      <pubDate>Wed, 2 Sep 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/baking-with-groovy-and-github.html</guid>
      <description>
      &lt;p&gt;As a developer, it has always bugged me to have my blog or web site content stored on a server managed by someone else, outside of my control. Granted, WordPress and the like are very stable and generally have means of pulling out your data if you need it, but I really just like to have my content under my own control. Likewise, I have other projects I want to work on, so building content management software is not really on my radar at this point; that&apos;s where &lt;a href=&quot;http://jbake.org&quot;&gt;JBake&lt;/a&gt; comes in.&lt;/p&gt;&lt;p&gt;JBake is a simple JVM-based static site generation tool that makes casual blogging quite simple once you get everything set up. It&apos;s a bit of a raw project at this point, so there are a few rough edges to work with, but I will help to file them down in the discussions below.&lt;/p&gt;&lt;p&gt;Getting started with JBake, you have a couple options. You can install JBake locally and use it as a command line tool, or you can use the &lt;a href=&quot;https://github.com/jbake-org/jbake-gradle-plugin&quot;&gt;JBake Gradle Plugin&lt;/a&gt;. The Gradle plugin is currently lacking the local server feature provided by the command line tools; however, it does provide a more portable development environment along with the universe of other Gradle plugins. We will use the Gradle plugin approach here and I will provide some workarounds for the missing features to bring the functionality back on even ground with the command line tool.&lt;/p&gt;&lt;p&gt;The first thing we need is our base project and for that I am going to use a &lt;a href=&quot;https://github.com/pledbrook/lazybones&quot;&gt;Lazybones&lt;/a&gt; template that I have created (which may be found in my &lt;a href=&quot;https://github.com/cjstehno/lazybones-templates&quot;&gt;lazybones-templates&lt;/a&gt; repository). You can use the Gradle plugin and do all the setup yourself, but it was fairly simple and having a template for it allowed me to add in the missing features we need.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If you are unfamiliar with Lazybones, it&apos;s a Groovy-based project template framework along the lines of Yeoman and the old Maven Archetype plugin. Details for adding my template repo to your configuration can be found on the &lt;a href=&quot;https://github.com/cjstehno/lazybones-templates/blob/master/README.md&quot;&gt;README page&lt;/a&gt; for my templates.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Create the empty project with the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lazybones create jbake-groovy cookies
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where &quot;cookies&quot; is the name of our project and the name of the project directory to be created. You will be asked a few questions related to template generation. You should have something similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lazybones create jbake-groovy cookies
Creating project from template jbake-groovy (latest) in &amp;#39;cookies&amp;#39;
Define value for &amp;#39;JBake Plugin Version&amp;#39; [0.2]:
Define value for &amp;#39;JBake Version&amp;#39; [2.3.2]:
Define value for &amp;#39;Gradle version&amp;#39; [2.3]:
GitHub project: [username/projectname.git]: cjstehno/cookies.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &quot;username&quot; should reflect the username of your GitHub account, we&apos;ll see what this is used for later. If you look at the generated &quot;cookies&quot; directory now you will see a standard-looking Gradle project structure. The JBake source files reside in the &lt;code&gt;src/jbake&lt;/code&gt; directory with the following sub-directories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;assets - this is where your static assets live (CSS files, JavaScript files, images, etc)&lt;/li&gt;
  &lt;li&gt;templates - this is where your GSP page templates live&lt;/li&gt;
  &lt;li&gt;content - this is where your site content lives (will be applied to the templates)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You will see that by default, a simple Bootstrap-based blog site is provided with sample blog posts in HTML, ASCII Doc, and Markdown formats. This is the same sample content as provided by the command line version of the project setup tool. At this point we can build the sample content using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew jbake
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Gradle plugin does &lt;em&gt;not&lt;/em&gt; provide a means of serving up the &quot;baked&quot; content yet. There is work in progress so hopefully this will be merged in soon. One of the goodies my template provides is a simple Groovy web server script. This allows you to serve up the content with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;groovy serve.groovy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will start a Jetty instance pointed at the content in &lt;code&gt;build/jbake&lt;/code&gt; on the configured port (8080 by default, which can be changed by adding a port number to the command line). Now when you hit &lt;code&gt;http://localhost:8080/&lt;/code&gt; you should see the sample content. Also, you can leave this server running in a separate console while you develop, running the jbake command as needed to rebuild the content.&lt;/p&gt;&lt;p&gt;First, let&apos;s update the general site information. Our site&apos;s title is not &quot;JBake&quot;, so let&apos;s change it to &quot;JCookies&quot; by updating it in the &lt;code&gt;src/jbake/templates/header.gsp&lt;/code&gt; and &lt;code&gt;src/jbake/templates/menu.gsp&lt;/code&gt; files. While we&apos;re in there we can also update the site meta information as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;jsp&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;%if (content.title) {%&amp;gt;${content.title}&amp;lt;% } else { %&amp;gt;JCookies&amp;lt;% }%&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;A site about cookies.&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;Chris Stehno&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;cookies,baking&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;JBake&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then to apply the changes, run &lt;code&gt;./gradlew jbake&lt;/code&gt; and refresh the browser. Now we see our correct site name.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that JBake makes no requirements about the templates or content to be used. It provides special support for blog-style sites; however, you can remove all the content and make a standard simple static site if you wish.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Let&apos;s add a new blog entry. The blog entries are stored in the &lt;code&gt;src/jbake/content/blog&lt;/code&gt; directory by year so we need to create a new directory for &lt;code&gt;2015&lt;/code&gt;. Content may be written in HTML, ASCII Doc, or Markdown, based on the file extension. I am a fan of Markdown so we&apos;ll use that for our new blog entry. Let&apos;s create an entry file named &lt;code&gt;chocolate-chip.md&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;JBake uses a custom header block at the top of content files to store meta information. For our entry we will use the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title=Chocolate Chip Cookies
date=2015-05-04
type=post
tags=blog,recipe
status=published
~~~~~~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; are self-explanatory. The &lt;code&gt;type&lt;/code&gt; can be &lt;code&gt;post&lt;/code&gt; or &lt;code&gt;page&lt;/code&gt; to denote a blog post or a standard page. The &lt;code&gt;tags&lt;/code&gt; are used to provide extra tag information to categorize the content. The &lt;code&gt;status&lt;/code&gt; field may be &lt;code&gt;draft&lt;/code&gt; or &lt;code&gt;published&lt;/code&gt; to denote whether or not the content should be included in the rendered site. Everything below the line of tildes is your standard markdown content.&lt;/p&gt;&lt;p&gt;For the content of our entry we are going to use the &lt;a href=&quot;https://www.verybestbaking.com/recipes/18476/original-nestle-toll-house-chocolate-chip-cookies/&quot;&gt;Nestle Chocolate Chip Cookie recipe&lt;/a&gt; - it gives us a nice overview of the content capabilities, and they are yummy!&lt;/p&gt;&lt;p&gt;The content in Markdown format, is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Ingredients

* 2 1/4 cups all-purpose flour
* 1 teaspoon baking soda
* 1 teaspoon salt
* 1 cup (2 sticks) butter, softened
* 3/4 cup granulated sugar
* 3/4 cup packed brown sugar
* 1 teaspoon vanilla extract
* 2 large eggs
* 2 cups (12-oz. pkg.) NESTLÉ® TOLL HOUSE® Semi-Sweet Chocolate Morsels
* 1 cup chopped nuts

## Instructions

1. Preheat oven to 375° F.
1. Combine flour, baking soda and salt in small bowl. Beat butter, granulated sugar, brown sugar and vanilla extract in large mixer bowl until creamy. Add eggs, one at a time, beating well after each addition. Gradually beat in flour mixture. Stir in morsels and nuts. Drop by rounded tablespoon onto ungreased baking sheets. 
1. BAKE for 9 to 11 minutes or until golden brown. Cool on baking sheets for 2 minutes; remove to wire racks to cool completely. 

May be stored in refrigerator for up to 1 week or in freezer for up to 8 weeks.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Rebuild/refresh and now you see we have a new blog post. Now, since we &lt;strike&gt;stole&lt;/strike&gt;borrowed this recipe from another site, we should provide an attribution link back to the original source. The content header fields are dynamic; you can create your own and use them in your pages. Let&apos;s add an &lt;code&gt;attribution&lt;/code&gt; field and put our link in it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;attribution=https://www.verybestbaking.com/recipes/18476/original-nestle-toll-house-chocolate-chip-cookies/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we will want to add it to our rendered page, so we need to open up the blog entry template, the &lt;code&gt;src/jbake/templates/post.gsp&lt;/code&gt; file and add the following line after the page header:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;p&amp;gt;Borrowed from: &amp;lt;a href=&amp;quot;${content.attribution}&amp;quot;&amp;gt;${content.attribution}&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice now, that the templates are just GSP files which may have Groovy code embedded into them in order to perform rendering logic. The header data is accessible via the &lt;code&gt;content&lt;/code&gt; object in the page.&lt;/p&gt;&lt;p&gt;This post is kind of boring at this point. Yes, it&apos;s a recipe for chocolate chip cookies, and that&apos;s hard to beat, but the page full of text is not selling it to me. Let&apos;s add a photo to really make your mouth water. Grab an image of your favorite chocolate chip cookies and save it in &lt;code&gt;src/jbake/assets/images&lt;/code&gt; as &lt;code&gt;cookies.jpg&lt;/code&gt;. Static content like images live in the &lt;code&gt;assets&lt;/code&gt; folder. The contents of the assets folder will be copied into the root of the rendered site directory.&lt;/p&gt;&lt;p&gt;Now, we need to add the photo to the page. Markdown allows simple HTML tags to be used so we can add:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;img src=&amp;quot;/images/cookies.jpg&amp;quot; style=&amp;quot;width:300px;float:right;&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to the top of our blog post content, which will add the image at the top of the page, floated to the right of the main content text. Now that looks tasty!&lt;/p&gt;&lt;p&gt;You can also create tandard pages in a similar manner to blog posts; however, they are based on the &lt;code&gt;page.gsp&lt;/code&gt; template. This allows for different contextual formatting for each content type.&lt;/p&gt;&lt;p&gt;You can customize any of the templates to get the desired content and functionality for your static site, but what about the overall visual theme? As I mentioned earlier, the default templates use the Twitter Bootstrap library and there are quite a few resources available for changing the theme to fit your needs and they range from free to somewhat expensive. We just want a free one for demonstration purposes so let&apos;s download the &lt;code&gt;bootstrap.min.css&lt;/code&gt; file for the &lt;a href=&quot;https://bootswatch.com/cerulean/&quot;&gt;Bootswatch Cerulean&lt;/a&gt; theme. Overwrite the existing theme in the &lt;code&gt;src/jbake/assets/css&lt;/code&gt; directory with this new file then rebuild the site and refresh your browser. Now you can see that we have a nice blue banner along with other style changes.&lt;/p&gt;&lt;p&gt;The end result at this point will look something like this:&lt;/p&gt;
&lt;div style=&quot;text-align:center;margin-bottom:15px;&quot;&gt;&lt;img src=&quot;/images/cookiesblog.png&quot;/&gt;&lt;/div&gt;&lt;p&gt;All-in-all not too bad for a few minutes of coding work!&lt;/p&gt;&lt;p&gt;Another nice feature of JBake is delayed publishing. The &lt;code&gt;status&lt;/code&gt; field in the content header has three accepted values:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;published - the content will be rendered and listed in the list of available pages.&lt;/li&gt;
  &lt;li&gt;draft - the content will be rendered, but with a &quot;-draft&quot; suffix added to the file name. The content will not appear in the list of available pages.&lt;/li&gt;
  &lt;li&gt;published-date - the content will be rendered normally, but will not appear in the list of available pages until the site is built after the value of its &lt;code&gt;date&lt;/code&gt; field has passed.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We used the &lt;code&gt;published&lt;/code&gt; option since we wanted our content to be available right away. You could easily create a bunch of blog entries ahead of time, specifying the &lt;code&gt;date&lt;/code&gt; values for when they should be published but having the &lt;code&gt;status&lt;/code&gt; values set to &lt;code&gt;published-date&lt;/code&gt; so that they are released only after the appropriate date. The downside of this is that since JBake is a static generator, you would have to be sure and build the site often enough to pick up the newly available content - maybe with a nightly scheduled build and deployment job.&lt;/p&gt;&lt;p&gt;When you are ready to release your site out into the greater internet wilderness, you will need a way to publish it; this is another place where my lazybones template comes in handy. If you are hosting your site as &lt;a href=&quot;https://pages.github.com/&quot;&gt;github-pages&lt;/a&gt;, the template comes with a publishing task built-in, based on the gradle-git plugin. This is where the GitHub username and repository information from the initial project creation comes into play. For this to work, you need a repository named &quot;cookies&quot; associated with your GitHub account. You will also want to double check that the repo clone URL is correct in the &lt;code&gt;publish.gradle&lt;/code&gt; file. Then, to publish your site you simply run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./gradlew publish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then go check your project site for the updated content (sometimes it takes a minute or two, though it&apos;s usually instantaneous).&lt;/p&gt;&lt;p&gt;At this point we have a easily managed static web site; what&apos;s left to be done? Well, you could associate it with your own custom domain name rather than the one GitHub provides. I will not go into that here, since I really don&apos;t want to purchase a domain name just for this demo; however, I do have a blog post (&lt;a href=&quot;http://coffeaelectronica.com/blog/2015/custom-github-hosting.html&quot;&gt;Custom GitHub Hosting&lt;/a&gt;) that goes into how it&apos;s done (at least on GoDaddy).&lt;/p&gt;&lt;p&gt;JBake and GitHub with a dash of Groovy provide a nice environment for quick custom blogs and web sites, with little fuss. Everything I have shown here is what I use to create and manage this blog, so, I&apos;d say it works pretty well.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Portions of this discussion are based on a blog post by Cédric Champeau, &quot;&lt;a href=&quot;http://melix.github.io/blog/2014/02/hosting-jbake-github.html&quot;&gt;Authoring your blog on GitHub with JBake and Gradle&lt;/a&gt;&quot;, who is also a contributor to JBake (among other things). &lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Vanilla Test Fixtures</title>
      <link>http://coffeaelectronica.com/blog/2015/test-fixtures.html</link>
      <pubDate>Fri, 15 May 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/test-fixtures.html</guid>
      <description>
      &lt;p&gt;Unit testing with data fixtures is good practice to get into, and having a simple means of creating and managing reusable fixture data makes it much more likely. I have added a &lt;code&gt;FixtureBuilder&lt;/code&gt; and &lt;code&gt;Fixture&lt;/code&gt; class to my &lt;a href=&quot;http://github.com/cjstehno/vanilla&quot;&gt;Vanilla-Testing&lt;/a&gt; library.&lt;/p&gt;&lt;p&gt;Unit testing with domain object, entities and DTOs can become tedious and you can end up with a lot of duplication around creating the test fixtures for each test. Say you have an object, &lt;code&gt;Person&lt;/code&gt; defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class Person {
    Name name
    LocalDate birthDate
    int score
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You are writing your unit tests for services and controllers that may need to create and compare various instances of &lt;code&gt;Person&lt;/code&gt; and you end up with some constants somewhere or duplication of code with custom instances all over the test code.&lt;/p&gt;&lt;p&gt;Using &lt;code&gt;com.stehno.vanilla.test.FixtureBuilder&lt;/code&gt; you can create reusable fixtures with a simple DSL. I tend to create a main class to contain my fixtures and to also provide the set of supported fixture keys, something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class PersonFixtures {

    static final String BOB = &amp;#39;Bob&amp;#39;
    static final String LARRY = &amp;#39;Larry&amp;#39;
    
    static final Fixture FIXTURES = define {
        fix BOB, [ name:new Name(&amp;#39;Bob&amp;#39;,&amp;#39;Q&amp;#39;,&amp;#39;Public&amp;#39;), birthDate:LocalDate.of(1952,5,14), score:120 ]
        fix LARRY, [ name:new Name(&amp;#39;Larry&amp;#39;,&amp;#39;G&amp;#39;,&amp;#39;Larson&amp;#39;), birthDate:LocalDate.of(1970,2,8), score:100 ]
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the &lt;code&gt;define&lt;/code&gt; method is where you create the data contained by the fixtures, each mapped with an object key. The key can be any object which may be used as a Map key (proper &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; implementation).&lt;/p&gt;&lt;p&gt;The reasoning behind using Maps is that Groovy allows them to be used as constructor arguments for creating objects; therefore, the maps give you a reusable and detached dataset for use in creating your test fixture instances. Two objects instances created from the same fixture data will be equivalent at the level of the properties defined by the fixture; however, each can be manipulated without effecting the other.&lt;/p&gt;&lt;p&gt;Once your fixtures are defined, you can use them in various ways. You can request the immutable data map for a fixture:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Map data = PersonFixtures.FIXTURES.map(PersonFixtures.BOB)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can create an instance of the target object using the data mapped to a specified fixture:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Person person = PersonFixtures.FIXTURES.object(Person, PersonFixtures.LARRY)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or, you can request the data or an instance for a fixture while applying additional (or overridden) properties to the fixture data:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Map data = PersonFixtures.FIXTURES.map(PersonFixtures.BOB, score:53)
Person person = PersonFixtures.FIXTURES.object(Person, PersonFixtures.LARRY, score:200)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can easily retrieve field property values for each fixture for use in your tests:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assert 100 == PersonFixtures.FIXTURES.field(&amp;#39;score&amp;#39;, PersonFixtures.LARRY)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows field-by-field comparisons for testing and the ability to use the field values as parameters as needed.&lt;/p&gt;&lt;p&gt;Lastly, you can verify that an object instance contains the expected data that is associated with a fixture:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;assert PersonFixtures.FIXTURES.verify(person, PersonFixtures.LARRY)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will compare the given object to the specified fixture and return true of all of the properties defined in the fixture match the same properties of the given object. There is also a second version of the method which allows property customizations before comparison.&lt;/p&gt;&lt;p&gt;One step farther... you can combine fixtures with &lt;a href=&quot;http://coffeaelectronica.com/blog/2015/property-randomization.html&quot;&gt;property randomizaiton&lt;/a&gt; to make fixture creation even simpler for those cases where you don&apos;t care about what the properties are, just that you can get at them reliably.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;static final Fixture FIXTURES = define {
    fix FIX_A, [ name:randomize(Name).one(), birthDate:LocalDate.of(1952,5,14), score:120 ]
    fix FIX_B, randomize(Person){
        typeRandomizers(
            (Name): randomize(Name),
            (LocalDate): { LocalDate.now() }
        )
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The fixture mapper accepts &lt;code&gt;PropertyRandomizer&lt;/code&gt; instances and will use them to generate the random content once, when the fixture is created and then it will be available unchanged during the testing.&lt;/p&gt;&lt;p&gt;One thing to note about the fixtures is that the fixture container and the maps that are passed in as individual fixture data are all made immutable via the &lt;code&gt;asImmutable()&lt;/code&gt; method; however, if the data inside the fixture is mutable, it still may have the potential for being changed. Be aware of this and take proper precautions when you create an interact with such data types.&lt;/p&gt;&lt;p&gt;Reusable text fixtures can really help to clean up your test code base, and they are a good habit to get into.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Property Randomization for Testing</title>
      <link>http://coffeaelectronica.com/blog/2015/property-randomization.html</link>
      <pubDate>Wed, 6 May 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/property-randomization.html</guid>
      <description>
      &lt;p&gt;Unit tests are great, but sometimes you end up creating a lot of test objects requiring data, such as DTOs and domain objects. Generally, I have always come up with movie quotes or other interesting content for test data. Recently, while working on a Groovy project, I thought it would be interesting to have a way to randomly generate and populate the data for these objects. The randomization would provide a simpler approach to test data as well as providing the potential for stumbling on test data that would break your code in interesting ways.&lt;/p&gt;&lt;p&gt;My &lt;a href=&quot;http://github.com/cjstehno/vanilla&quot;&gt;Vanilla&lt;/a&gt; project now has a &lt;code&gt;PropertyRandomizer&lt;/code&gt; class, which provides this property randomization functionality in two ways. You can use it as a builder or as a DSL.&lt;/p&gt;&lt;p&gt;Say you have a &lt;code&gt;Person&lt;/code&gt; domain class, defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@ToString
class Person {
    String name
    Date birthDate
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You could generate a random instance of it using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def rando = randomize(Person).typeRandomizers( (Date):{ new Date() } )
def instance = rando.one()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note, that there is no default randomizer for &lt;code&gt;Date&lt;/code&gt; so we had to provide one. The other fields, &lt;code&gt;name&lt;/code&gt; in this case would be randomized by the default randomizer.&lt;/p&gt;&lt;p&gt;The DSL usage style for the use case above would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def rando = randomize(Person){
    typeRandomizers( 
        (Date):{ new Date() } 
    )
}
def instance = rando.one()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not really much difference, but sometimes a DSL style construct is cleaner to work with.&lt;/p&gt;&lt;p&gt;What if you need three random instances for the same class, all different? You just ask for them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def instances = rando.times(3)

// or 

instances = rando * 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The multiplication operator is overridden to provide a nice shortcut for requesting multiple random instances.&lt;/p&gt;&lt;p&gt;You can customize the randomizers at either the type or property level or you can configure certain properties to be ignored by the randomization. This allows for nested randomized objects. Say your &lt;code&gt;Person&lt;/code&gt; has a new &lt;code&gt;pet&lt;/code&gt; property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@ToString
class Person {
    String name
    Date birthDate
    Pet pet
}

@ToString
class Pet {
    String name
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can easily provide randomized pets for your randomized people:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def rando = randomize(Person){
    typeRandomizers( 
        (Date):{ new Date() },
        (Pet): { randomize(Pet).one() }
    )
}
def instance = rando.one()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I have started using this in some of my testing, at it comes in pretty handy. My Vanilla library is not yet available via any public repositories; however, it will be soon, and if there is expressed interest, I can speed this up.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Secure REST in Spring</title>
      <link>http://coffeaelectronica.com/blog/2015/secure-rest-spring.html</link>
      <pubDate>Mon, 4 May 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/secure-rest-spring.html</guid>
      <description>
      &lt;p&gt;Getting HTTPS to play nice with REST and non-browser web clients in development (with a self-signed certificate) can be a frustrating effort. I struggled for a while down the path of using the Spring &lt;code&gt;RestTemplate&lt;/code&gt; thinking that since I was using Spring MVC as my REST provider, it would make things easier; in this case, Spring did not come to the rescue, but Groovy did or rather the Groovy &lt;a href=&quot;https://github.com/jgritman/httpbuilder&quot;&gt;HTTPBuilder&lt;/a&gt; did.&lt;/p&gt;&lt;p&gt;To keep this discussion simple, we need a simple REST project using HTTPS. I found the &lt;a href=&quot;https://github.com/spring-guides/gs-rest-service&quot;&gt;Spring REST Service Guide&lt;/a&gt; project useful for this (with a few modifications to follow).&lt;/p&gt;&lt;p&gt;Go ahead and clone the project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:spring-guides/gs-rest-service.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since this is a tutorial project, it has a few versions of the code in it. We are going to work with the &quot;complete&quot; version, which is a Gradle project. Let&apos;s go ahead and do a build and run just to ensure everything works out of the box:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd gs-rest-service/complete
./gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a bunch of downloading and startup logging you should see that the application has started. You can give it a test by opening &lt;code&gt;http://localhost:8080/greeting?name=Chris&lt;/code&gt; in your browser, which should respond with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
    &amp;quot;id&amp;quot;: 2,
    &amp;quot;content&amp;quot;: &amp;quot;Hello, Chris!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we have that running, we want a RESTful client to call it rather that hitting it using the browser. Let&apos;s get it working with the simple HTTP case first to ensure that we have everything working before we go into the HTTPS configuration. Create a groovy script, &lt;code&gt;rest-client.groovy&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Grapes(
    @Grab(group=&amp;#39;org.codehaus.groovy.modules.http-builder&amp;#39;, module=&amp;#39;http-builder&amp;#39;, version=&amp;#39;0.7.1&amp;#39;)
)

import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET

def http = new HTTPBuilder( &amp;#39;http://localhost:8080/&amp;#39; )

http.get( path: &amp;#39;greeting&amp;#39;, query:[name:&amp;#39;Chris&amp;#39;] ) { resp, json -&amp;gt;
    println &amp;quot;Status: ${resp.status}&amp;quot;
    println &amp;quot;Content: $json&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since this is not a discussion of HTTPBuilder itself, I will leave most of the details to your own research; however, it&apos;s pretty straight forward. We are making the same request we made in the browser, and after another initial batch of dependency downloads (grapes) it should yield:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Status: 200
Content: [content:Hello, Chris!, id:6]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ok, our control group is working. Now, let&apos;s add in the HTTPS. For the Spring Boot project, it&apos;s pretty trivial. We need to add an &lt;code&gt;application.properties&lt;/code&gt; file in &lt;code&gt;src/main/resources&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server.port = 8443
server.ssl.key-store = /home/cjstehno/.keystore
server.ssl.key-store-password = tomcat
server.ssl.key-password = tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of course, update the key-store path to your home directory. For the server, we also need to install a certificate for our use. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I am not a security certificate expert, so from here on out I will state that this stuff works in development but I make no claims that this is suitable for production use. Proceed at your own risk!&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;From the &lt;a href=&quot;http://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html&quot;&gt;Tomcat 8 SSL How To&lt;/a&gt;, run the &lt;code&gt;keytool -genkey -alias tomcat -keyalg RSA&lt;/code&gt; and run through the questions answering everything with &apos;localhost&apos; (there seems to be a reason for this).&lt;/p&gt;&lt;p&gt;At this point you should be able to restart the server and hit it via HTTPS (&lt;a href=&quot;https://localhost:8443/greeting?name=Chris&quot;&gt;https://localhost:8443/greeting?name=Chris&lt;/a&gt;) to retrieve a successful response as before, though you will need to accept the self-signed certificate.&lt;/p&gt;&lt;p&gt;Now try the client. Update the URL to the new HTTPS version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def http = new HTTPBuilder( &amp;#39;https://localhost:8443/&amp;#39; )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and give it a run. You should see something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Caught: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I will start with the simplest method of resolving this problem. HTTPBuilder provides a configuration method that will just ignore these types of SSL errors. If you add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http.ignoreSSLIssues()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;before you make a request, it will succeed as normal. This should be used only as a development configuration, but there are times when you just want to get something workign for testing. If that&apos;s all you want here, you&apos;re done. From here on out I will show how to get the SSL configuration working for a more formal use case.&lt;/p&gt;&lt;p&gt;Still with me? Alright, let&apos;s have fun with certificates! The &lt;a href=&quot;https://github.com/jgritman/httpbuilder/wiki/SSL&quot;&gt;HTTPBuilder wiki page for SSL&lt;/a&gt; gives us most of what we need. To summarize, we need to export our server certificate and then import it into a keyfile that our client can use. To export the server certificate, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;keytool -exportcert -alias &amp;quot;tomcat&amp;quot; -file mytomcat.crt -keystore ~/.keystore -storepass tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will export the &quot;tomcat&quot; certificate from the keystore at &quot;~/.keystore&quot; (the one we created earlier) and save it into &quot;mytomcat.crt&quot;. Next, we need to import this certificate into the keystore that will be used by our client as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;keytool -importcert -alias &amp;quot;tomcat&amp;quot; -file mytomcat.crt -keystore clientstore.jks -storepass clientpass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You will be asked to trust this certificate, which you should answer &quot;yes&quot; to continue.&lt;/p&gt;&lt;p&gt;Now that we have our certificate ready, we can update the client script to use it. The client script becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;@Grapes(
    @Grab(group=&amp;#39;org.codehaus.groovy.modules.http-builder&amp;#39;, module=&amp;#39;http-builder&amp;#39;, version=&amp;#39;0.7.1&amp;#39;)
)

import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import java.security.KeyStore
import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory

def http = new HTTPBuilder( &amp;#39;https://localhost:8443/&amp;#39; )

def keyStore = KeyStore.getInstance( KeyStore.defaultType )

new File( args[0] ).withInputStream {
   keyStore.load( it, args[1].toCharArray() )
}

http.client.connectionManager.schemeRegistry.register(new Scheme(&amp;quot;https&amp;quot;, new SSLSocketFactory(keyStore), 443) )

http.get( path: &amp;#39;greeting&amp;#39;, query:[name:&amp;#39;Chris&amp;#39;] ) { resp, json -&amp;gt;
    println &amp;quot;Status: ${resp.status}&amp;quot;
    println &amp;quot;Content: $json&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main changes from the previous version are the loading and use of the keystore by the connection manager. When you run this version of the script, with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;groovy rest-client.groovy clientstore.jks clientpass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;you get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Status: 200
Content: [content:Hello, Chris!, id:1]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are now using HTTPS on both the server and client for our rest service. It&apos;s not all that bad to setup once you figure out the steps, but in general the information seems to be tough to find.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Tour de Mock 6: Spock</title>
      <link>http://coffeaelectronica.com/blog/2015/tour-de-mock-6-spock.html</link>
      <pubDate>Thu, 9 Apr 2015 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2015/tour-de-mock-6-spock.html</guid>
      <description>
      &lt;p&gt;My last entry in my &quot;Tour de Mock&quot; series was focused on basic &lt;a href=&quot;http://coffeaelectronica.com/blog/2010/tour-de-mock-5.html&quot;&gt;Groovy mocking&lt;/a&gt;. In this post, I am going to take a look at the &lt;a href=&quot;https://code.google.com/p/spock/&quot;&gt;Spock Framework&lt;/a&gt;, which is an alternative testing framework with a lot of features, including its own mocking API.&lt;/p&gt;&lt;p&gt;Since it&apos;s been a while, let&apos;s refer back to the &lt;a href=&quot;http://coffeaelectronica.com/blog/2009/tour-de-mock-1.html&quot;&gt;original posting&lt;/a&gt; as a refresher of what is being tested. We have a &lt;code&gt;Servlet&lt;/code&gt;, the &lt;code&gt;EmailListServlet&lt;/code&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;public class EmailListServlet extends HttpServlet {

    private EmailListService emailListService;

    public void init() throws ServletException {
        final ServletContext servletContext = getServletContext();
        this.emailListService = (EmailListService)servletContext.getAttribute(EmailListService.KEY);

        if(emailListService == null) throw new ServletException(&amp;quot;No ListService available!&amp;quot;);
    }

    protected void doGet(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException {
        final String listName = req.getParameter(&amp;quot;listName&amp;quot;);
        final List&amp;lt;String&amp;gt; list = emailListService.getListByName(listName);
        PrintWriter writer = null;
        try {
            writer = res.getWriter();
            for(final String email : list){
                writer.println(email);
            }
        } finally {
            if(writer != null) writer.close();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which uses an &lt;code&gt;EmailListService&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;public interface EmailListService {

    public static final String KEY = &amp;quot;com.stehno.mockery.service.EmailListService&amp;quot;;

    /**
     * Retrieves the list of email addresses with the specified name. If no list
     * exists with that name an IOException is thrown.
     */
    List&amp;lt;String&amp;gt; getListByName(String listName) throws IOException;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to retrieve lists of email addresses, because that&apos;s what you do, right? It&apos;s just an example. :-)&lt;/p&gt;&lt;p&gt;First, we need to add Spock to our build (recently converted to Gradle, but basically the same) by adding the following line to the &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;testCompile &amp;quot;org.spockframework:spock-core:1.0-groovy-2.4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we need a test class. Spock uses the concept of a test &quot;Specification&quot; so we create a simple test class as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;class EmailListServlet_SpockSpec extends Specification {
    // test stuff here...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not all that different from a JUnit test; conceptually they are very similar.&lt;/p&gt;&lt;p&gt;Just as in the other examples of testing this system, we need to setup our mock objects for the servlet environment and other collaborators:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def setup() {
    def emailListService = Mock(EmailListService) {
        _ * getListByName(null) &amp;gt;&amp;gt; { throw new IOException() }
        _ * getListByName(&amp;#39;foolist&amp;#39;) &amp;gt;&amp;gt; LIST
    }

    def servletContext = Mock(ServletContext) {
        1 * getAttribute(EmailListService.KEY) &amp;gt;&amp;gt; emailListService
    }

    def servletConfig = Mock(ServletConfig) {
        1 * getServletContext() &amp;gt;&amp;gt; servletContext
    }

    emailListServlet = new EmailListServlet()
    emailListServlet.init servletConfig

    request = Mock(HttpServletRequest)
    response = Mock(HttpServletResponse)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Spock provides a &lt;code&gt;setup&lt;/code&gt; method that you can override to perform your test setup operations, such as mocking. In this example, we are mocking the service interface, and the servlet API interfaces so that they behave in the deisred manner.&lt;/p&gt;&lt;p&gt;The mocking provided by Spock took a little getting used to when coming from a primarily mockito-based background, but once you grasp the overall syntax, it&apos;s actually pretty expressive. In the code above for the &lt;code&gt;EmailListService&lt;/code&gt;, I am mocking the &lt;code&gt;getListByName(String)&lt;/code&gt; method such that it will accept any number of calls with a &lt;code&gt;null&lt;/code&gt; parameter and throw an exception, as well as any number of calls with a &lt;code&gt;foolist&lt;/code&gt; parameter which will return a reference to the email address list. Similarly, you can specify that you expect only N calls to a method as was done in the other mocks. You can dig a little deeper into the mocking part of the framework in the &lt;a href=&quot;http://spockframework.github.io/spock/docs/1.0/interaction_based_testing.html&quot;&gt;Interaction-based Testing&lt;/a&gt; section of the Spock documentation.&lt;/p&gt;&lt;p&gt;Now that we have our basic mocks ready, we can test something. As in the earlier examples, we want to test the condition when no list name is specified and ensure that we get the expected &lt;code&gt;Exception&lt;/code&gt; thrown:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def &amp;#39;doGet: without list&amp;#39;() {
    setup:
    1 * request.getParameter(&amp;#39;listName&amp;#39;) &amp;gt;&amp;gt; null

    when:
    emailListServlet.doGet request, response

    then:
    thrown(IOException)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One thing you should notice right away is that Spock uses label blocks to denote different parts of a test method. Here, the &lt;code&gt;setup&lt;/code&gt; block is where we do any additional mocking or setup specific to this test method. The &lt;code&gt;when&lt;/code&gt; block is where the actual operations being tested are performed while the &lt;code&gt;then&lt;/code&gt; block is where the results are verified and conditions examined.&lt;/p&gt;&lt;p&gt;In our case, we need to mock out the reuest parameter to return &lt;code&gt;null&lt;/code&gt; and then we need to ensure that an &lt;code&gt;IOException&lt;/code&gt; is thrown.&lt;/p&gt;&lt;p&gt;Our other test is the case when a valid list name is provided:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;def &amp;#39;doGet: with list&amp;#39;() {
    setup:
    1 * request.getParameter(&amp;#39;listName&amp;#39;) &amp;gt;&amp;gt; &amp;#39;foolist&amp;#39;

    def writer = Mock(PrintWriter)

    1 * response.getWriter() &amp;gt;&amp;gt; writer

    when:
    emailListServlet.doGet request, response

    then:
    1 * writer.println(LIST[0])
    1 * writer.println(LIST[1])
    1 * writer.println(LIST[2])
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the &lt;code&gt;then&lt;/code&gt; block here, we verify that the &lt;code&gt;println(String)&lt;/code&gt; method of the mocked &lt;code&gt;PrintWriter&lt;/code&gt; is called with the correct arguments in the correct order.&lt;/p&gt;&lt;p&gt;Overall, Spock is a pretty clean and expressive framework for testing and mocking. It actually has quite a few other interesting features that beg to be explored.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You can find the source code used in this posting in my &lt;a href=&quot;http://github.com/cjstehno/coffeaelectronica/tree/master/tourdemock&quot;&gt;TourDeMock&lt;/a&gt; project.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Testing AST Transformations</title>
      <link>http://coffeaelectronica.com/blog/2015/ast-testing.html</link>
      <pubDate>Sun, 8 Mar 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/ast-testing.html</guid>
      <description>
      &lt;p&gt;While working on my &lt;a href=&quot;https://github.com/cjstehno/effigy&quot;&gt;Effigy&lt;/a&gt; project, I have gone deep into the world of Groovy AST Transformations and found that they are, in my opinion, the most interesting and useful feature of the Groovy language; however, developing them is a bit of a poorly-documented black art, especially around writing unit tests for your transformations. Since the code you are writing is run at compile-time, you generally have little access or view to what is going on at that point and it can be quite frustrating to try and figure out why something is failing.&lt;/p&gt;&lt;p&gt;After some Googling and experimentation, I have been able to piece together a good method for testing your transformation code, and it&apos;s actually not all that hard. Also, you can do your development and testing in a single project, rather than in a main project and testing project (to account for the need to compile the code for testing)&lt;/p&gt;&lt;p&gt;The key to making transforms testable is the &lt;code&gt;GroovyClassLoader&lt;/code&gt; which gives you the ability to compile Groovy code on the fly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def clazz = new GroovyClassLoader().parseClass(sourceCode)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;During that &lt;code&gt;parseClass&lt;/code&gt; method is when all the AST magic happens. This means you can not only easily test your code, but also debug into your transformations to get a better feel for what is going wrong when things break - and they often do.&lt;/p&gt;&lt;p&gt;For my testing, I have started building a &lt;code&gt;ClassBuilder&lt;/code&gt; code helper that is a shell for String-based source code. You provide a code template that acts as your class shell, and then you inject code for your specific test case. You end up with a reasonably clean means of building test code and instantiating it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;private final ClassBuilder code = forCode(&amp;#39;&amp;#39;&amp;#39;
    package testing

    import com.stehno.ast.annotation.Counted

    class CountingTester {
        $code
    }
&amp;#39;&amp;#39;&amp;#39;)

@Test void &amp;#39;single method&amp;#39;(){
    def instance = code.inject(&amp;#39;&amp;#39;&amp;#39;
        @Counted
        String sayHello(String name){
            &amp;quot;Hello, $name&amp;quot;
        }
    &amp;#39;&amp;#39;&amp;#39;).instantiate()

    assert instance.sayHello(&amp;#39;AST&amp;#39;) == &amp;#39;Hello, AST&amp;#39;
    assert instance.getSayHelloCount() == 1

    assert instance.sayHello(&amp;#39;Counting&amp;#39;) == &amp;#39;Hello, Counting&amp;#39;
    assert instance.getSayHelloCount() == 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;forCode&lt;/code&gt; method creates the builder and prepares the code shell. This construct may be reused for each of your tests.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;inject&lt;/code&gt; method adds in the actual code you care about, meaning your transformation code being tested.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;instantiate&lt;/code&gt; method uses the &lt;code&gt;GroovyClassLoader&lt;/code&gt; internally to load the class and then instantiate it for testing.&lt;/p&gt;&lt;p&gt;I am going to add a version of the &lt;code&gt;ClassBuilder&lt;/code&gt; to my &lt;a href=&quot;https://github.com/cjstehno/vanilla&quot;&gt;Vanilla&lt;/a&gt; project once it is more stable; however, I have a version of it and a simple AST testing demo project in the &lt;a href=&quot;https://github.com/cjstehno/coffeaelectronica/tree/master/ast-testing&quot;&gt;ast-testing&lt;/a&gt; CoffeaElectronica sub-repo. This sample code builds a simple AST Transformation for counting method invocations and writes normal unit tests for it (the code above is taken from one of the tests).&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note: I have recently discovered the &lt;a href=&quot;http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/tools/ast/TransformTestHelper.html&quot;&gt;groovy.tools.ast.TransformTestHelper&lt;/a&gt; class; I have not yet tried it out, but it seems to provide a similar base functionality set to what I have described here.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    
    <item>
      <title>Custom Domain for GitHub Pages</title>
      <link>http://coffeaelectronica.com/blog/2015/custom-github-hosting.html</link>
      <pubDate>Sun, 15 Feb 2015 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2015/custom-github-hosting.html</guid>
      <description>
      &lt;p&gt;I have been working for a while now to get my blog fully cut over to being generated by &lt;a href=&quot;http://jbake.org/&quot;&gt;JBake&lt;/a&gt; and hosted on &lt;a href=&quot;http://github.org&quot;&gt;GitHub&lt;/a&gt;; it&apos;s not all that difficult, just a format conversion and some domain fiddling, but I was procrastinating.&lt;/p&gt;&lt;p&gt;Pointing your GitHub Pages at a custom domain is not all that hard to do, and they provide &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&quot;&gt;decent documentation&lt;/a&gt; about how to do it; however, some streamlining is nice for DNS novices like myself. I may have done things a bit out of order, but it worked in the end...&lt;/p&gt;&lt;p&gt;First, I created &lt;code&gt;A&lt;/code&gt; records for the GitHub-provided IP Addresses. I use Godaddy for my domain names, so your experience may be a bit different; but, in the Godaddy DNS Zone File editor you end up adding something like:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/a_records.png&quot; alt=&quot;A Record&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Next, I added a &lt;code&gt;CName&lt;/code&gt; record alias for &lt;code&gt;www&lt;/code&gt; pointing to my GitHub account hostname, which ended up looking like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/files/cname_record.png&quot; alt=&quot;CName Record&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Lastly, you need to make &lt;a href=&quot;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&quot;&gt;changes in your repository&lt;/a&gt; - this step seems to be missed by a lot of people. The gist of it is that you add a new file to your &lt;code&gt;gh-pages&lt;/code&gt; branch, named &lt;code&gt;CNAME&lt;/code&gt; (all caps, no extension). And in that file you add your domain name (without &lt;code&gt;http://www.&lt;/code&gt;). Save the file and be sure you push it to your remote repository.&lt;/p&gt;&lt;p&gt;At this point it worked for me, but the documentation said it could take up to 48 hours to propagate the changes.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Gradle and CodeNarc</title>
      <link>http://coffeaelectronica.com/blog/2014/gradle-and-codenarc.html</link>
      <pubDate>Fri, 7 Nov 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/gradle-and-codenarc.html</guid>
      <description>
      &lt;p&gt;The subject of &quot;code quality tools&quot; has lead to many developer holy wars over the years, so I&apos;m not really going to touch the subject of their value or level of importance here, suffice to say that they are tools in your toolbox for helping to maintain a base level of &quot;tedious quality&quot;, meaning style rules and general coding conventions enforced by your organization - it should never take the ultimate decision making from the developers.&lt;/p&gt;&lt;p&gt;That being said, let&apos;s talk about &lt;a href=&quot;http://codenarc.sourceforge.net/&quot;&gt;CodeNarc&lt;/a&gt;. CodeNarc is a rule-based code quality analysis tool for Groovy-based projects. Groovy does not always play nice with other code analysis tools, so it&apos;s nice that there is one specially designed for it and &lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; provides access to it out of the box.&lt;/p&gt;&lt;p&gt;Using the &lt;a href=&quot;http://www.gradle.org/docs/current/dsl/org.gradle.api.plugins.quality.CodeNarc.html&quot;&gt;Gradle CodeNarc plugin&lt;/a&gt; is easy, apply the plugin to your build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apply plugin: &amp;#39;codenarc&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then do a bit of rule configuration based on the needs of your code base. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;codenarcMain {
    ignoreFailures false
    configFile file(&amp;#39;config/codenarc/codenarc-main.rules&amp;#39;)

    maxPriority1Violations 0
    maxPriority2Violations 10
    maxPriority3Violations 20
}

codenarcTest {
    ignoreFailures true
    configFile file(&amp;#39;config/codenarc/codenarc-test.rules&amp;#39;)

    maxPriority1Violations 0
    maxPriority2Violations 10
    maxPriority3Violations 20
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The plugin allows you to have different configurations for your main code and your test code, and I recommend using that functionality since generally you may care about slightly different things in your production code versus your test code. Also, there are JUnit-specific rules that you can ignore in your production code scan.&lt;/p&gt;&lt;p&gt;Notice that in my example, I have ignored failures in the test code. This is handy when you are doing a lot of active development and don&apos;t really want to fail your build every time your test code quality drops slightly. You can also set the thresholds for allowed violations of the three priority levels - when the counts exceed one of the given thresholds, the build will fail, unless it&apos;s ignored. You will always get a report for both main and test code in your build reports directory, even if there are no violations. The threshold numbers are something you will need to determine based on your code base, your team and your needs.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;.rules&lt;/code&gt; files are really Groovy DSL files, but the extension is unimportant so I like to keep them out of the Groovy namespace. The CodeNarc web site has a sample &quot;&lt;a href=&quot;http://codenarc.sourceforge.net/StarterRuleSet-AllRulesByCategory.groovy.txt&quot;&gt;kitchen sink&lt;/a&gt;&quot; rule set to get things started - though it has a few rules that cause errors, you can comment those out or remove them from the file. Basically the file is a list of all the active rules, so removing one disables it. You can also configure some of them. LineLength is one I like to change:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LineLength { length = 150 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will keep the rule active, but will allow line lengths of 150 rather than the default 120 characters. You will need to check the JavaDocs for configurable rule properties; for the most part, they seem to be on or off. &lt;/p&gt;&lt;p&gt;Running the analysis is simple, the &lt;code&gt;check&lt;/code&gt; task may be run by itself, or it will be run along with the &lt;code&gt;build&lt;/code&gt; task.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gradle check
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reports (main and test) will be available in the &lt;code&gt;build/reports/codenarc&lt;/code&gt; directory as two html files. They are not the prettiest reports, but they are functional.&lt;/p&gt;&lt;p&gt;If you are starting to use CodeNarc on an existing project, you may want to take a phased approach to applying and customizing rules so that you are not instantly bogged down with rule violations - do a few passes with the trimmed down rule set, fix what you can fix quickly and configure or disable the others and set your thresholds to a sensible level then make a goal to drop the numbers with each sprint or release so that progress is made.&lt;/p&gt;
	  </description>
    </item>
    
    <item>
      <title>Hello Again Slick2D</title>
      <link>http://coffeaelectronica.com/blog/2014/hello-again-slick2d.html</link>
      <pubDate>Sat, 11 Oct 2014 00:00:00 -0500</pubDate>
      <guid isPermaLink="false">blog/2014/hello-again-slick2d.html</guid>
      <description>
      &lt;p&gt;I am finally getting back around to working on my little game programming project and I realized that somewhere along the&lt;br/&gt;way, my project stopped working. I am using the &lt;a href=&quot;http://slick.ninjacave.com/&quot;&gt;Slick2D&lt;/a&gt; library, which seems to have little&lt;br/&gt;in the way of formal release or distribution so it didn&apos;t surprise me. I think I had something hacked together making it&lt;br/&gt;work last time. I decided to try and put some more concrete and repeatable steps around basic setup, at least for how I use it - I&apos;m no&lt;br/&gt;game programmer. &lt;/p&gt;&lt;p&gt;I&apos;m using Groovy as my development language and Gradle for building. In the interest of time and clarity, I am going to use a&lt;br/&gt;dump-and-describe approach here; there are only two files, so it should not be a big deal.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;build.gradle&lt;/code&gt; file is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;group = &amp;#39;com.stehno.demo&amp;#39;
version = &amp;#39;0.1&amp;#39;

buildscript {
    repositories {
        jcenter()

        maven {
            url &amp;#39;http://dl.bintray.com/cjstehno/public/&amp;#39;
        }
    }

    dependencies {
        classpath &amp;#39;com.stehno:gradle-natives:0.2&amp;#39;
    }
}

apply plugin:&amp;#39;groovy&amp;#39;
apply plugin:&amp;#39;application&amp;#39;
apply plugin:&amp;#39;com.stehno.natives&amp;#39;

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

mainClassName = &amp;#39;helloslick.HelloSlick&amp;#39;

repositories {
    jcenter()
}

dependencies {
    compile &amp;#39;org.codehaus.groovy:groovy-all:2.3.6&amp;#39;

    compile &amp;#39;org.slick2d:slick2d-core:1.0.1&amp;#39;
}

test {
    systemProperty &amp;#39;java.library.path&amp;#39;, file(&amp;#39;build/natives/windows&amp;#39;)
}

run {
    systemProperty &amp;#39;java.library.path&amp;#39;, file(&amp;#39;build/natives/windows&amp;#39;)
}

natives {
    jars = [
        &amp;#39;lwjgl-platform-2.9.1-natives-windows.jar&amp;#39;,
        &amp;#39;jinput-platform-2.0.5-natives-windows.jar&amp;#39;
    ]
    platforms = &amp;#39;windows&amp;#39;
}

task wrapper(type: Wrapper) {
    gradleVersion = &amp;#39;2.1&amp;#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first point of note, is that I am using my &lt;a href=&quot;http://cjstehno.github.io/gradle-natives/&quot;&gt;Gradle Natives plugin&lt;/a&gt;, not as&lt;br/&gt;a self-promotion, but since this is the reason I wrote it. This plugin takes care of extracting all the little native&lt;br/&gt;libraries and putting them in your build so that they are easily accessible by your code. The configuration is found near&lt;br/&gt;the bottom of the file, in the &lt;code&gt;natives&lt;/code&gt; block - we want to extract the native libraries from the lwjgl and jinput libraries&lt;br/&gt;for this project and in my case, I only care about the Windows versions (leave off &lt;code&gt;platforms&lt;/code&gt; to get all platforms).&lt;/p&gt;&lt;p&gt;There was one interesting development during my time away from this project, a 3rd-party jar version of Slick2D has been pushed to maven central, which makes it a lot easier - I think I had to build it myself and fiddle with pushing it to my local maven repo or something. Now it&apos;s just another remote library (hopefully it works as expected - I have not played with it yet).&lt;/p&gt;&lt;p&gt;The last point of interest here is the use of the &lt;code&gt;application&lt;/code&gt; plugin. This plugin provides an easy way to run your game&lt;br/&gt;while specifying the &lt;code&gt;java.library.path&lt;/code&gt; which is the painful part of running applications with native libraries. With the&lt;br/&gt;&lt;code&gt;application&lt;/code&gt; plugin and the &lt;code&gt;run&lt;/code&gt; configuration in place, you can run the game from Gradle - admittedly not ideal, but this&lt;br/&gt;is just development; I actually have a configuration set for the IzPack installer that I will write about later.&lt;/p&gt;&lt;p&gt;Now, we need some code to run, and the Slick2D wiki provides a simple Hello world sample that I have tweaked a bit for my&lt;br/&gt;use - mostly just cosmetic changes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;package helloslick

import groovy.util.logging.Log
import org.newdawn.slick.*

import java.util.logging.Level

@Log
class HelloSlick extends BasicGame {

    HelloSlick(String gamename){
        super(gamename)
    }

    @Override
    public void init(GameContainer gc) throws SlickException {}

    @Override
    public void update(GameContainer gc, int i) throws SlickException {}

    @Override
    public void render(GameContainer gc, Graphics g) throws SlickException {
        g.drawString &amp;#39;Hello Slick!&amp;#39;, 50, 50
    }

    public static void main(String[] args){
        try {
            AppGameContainer appgc = new AppGameContainer(new HelloSlick(&amp;#39;Simple Slick Game&amp;#39;))
            appgc.setDisplayMode(640, 480, false)
            appgc.start()

        } catch (SlickException ex) {
            log.log(Level.SEVERE, null, ex)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This just opens a game window and writes &quot;Hello Slick!&quot; in it, but if you have that working, you should be ready for playtime&lt;br/&gt;with Slick2D.&lt;/p&gt;&lt;p&gt;Once you have the project setup (&lt;code&gt;build.gradle&lt;/code&gt; in the root, and &lt;code&gt;HelloSlick.groovy&lt;/code&gt; in &lt;code&gt;/src/main/groovy/helloslick&lt;/code&gt;), you&lt;br/&gt;are ready to go. Run the following to run the project.&lt;/p&gt;&lt;p&gt;&lt;code&gt;gradle unpackNatives run&lt;/code&gt;&lt;/p&gt;&lt;p&gt;And if all is well, you will see the game window and message.&lt;/p&gt;&lt;p&gt;Like I said, this is mostly just for getting my development environment up and running as a sanity check, but maybe it is useful to others.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Yes, the explicit &lt;code&gt;unpackNatives&lt;/code&gt; calls are annoying, it&apos;s something I am working on.&lt;/p&gt;
&lt;/blockquote&gt;
	  </description>
    </item>
    

  </channel> 
</rss>
